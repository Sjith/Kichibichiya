android.support.v4.app.ActivityCompatHoneycomb -> android.support.v4.app.a:
    void invalidateOptionsMenu(android.app.Activity) -> a
android.support.v4.app.BackStackEntryTrojan -> android.support.v4.app.b:
    android.support.v4.app.Fragment getFragmentInBackStackRecord(android.support.v4.app.FragmentManager$BackStackEntry) -> a
android.support.v4.app.BackStackRecord -> android.support.v4.app.c:
    android.support.v4.app.FragmentManagerImpl mManager -> a
    android.support.v4.app.BackStackRecord$Op mHead -> b
    android.support.v4.app.BackStackRecord$Op mTail -> c
    int mNumOp -> d
    int mEnterAnim -> e
    int mExitAnim -> f
    int mPopEnterAnim -> g
    int mPopExitAnim -> h
    int mTransition -> i
    int mTransitionStyle -> j
    boolean mAddToBackStack -> k
    boolean mAllowAddToBackStack -> l
    java.lang.String mName -> m
    boolean mCommitted -> n
    int mIndex -> o
    int mBreadCrumbTitleRes -> p
    java.lang.CharSequence mBreadCrumbTitleText -> q
    int mBreadCrumbShortTitleRes -> r
    java.lang.CharSequence mBreadCrumbShortTitleText -> s
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void addOp(android.support.v4.app.BackStackRecord$Op) -> a
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> a
    void doAddOp(int,android.support.v4.app.Fragment,java.lang.String,int) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> b
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction setTransitionStyle(int) -> a
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> a
    void bumpBackStackNesting(int) -> b
    int commit() -> a
    int commitAllowingStateLoss() -> b
    int commitInternal(boolean) -> a
    void run() -> run
    void popFromBackStack(boolean) -> b
    java.lang.String getName() -> c
android.support.v4.app.BackStackRecord$Op -> android.support.v4.app.d:
    android.support.v4.app.BackStackRecord$Op next -> a
    android.support.v4.app.BackStackRecord$Op prev -> b
    int cmd -> c
    android.support.v4.app.Fragment fragment -> d
    int enterAnim -> e
    int exitAnim -> f
    int popEnterAnim -> g
    int popExitAnim -> h
    java.util.ArrayList removed -> i
android.support.v4.app.BackStackState -> android.support.v4.app.BackStackState:
    int[] mOps -> a
    int mTransition -> b
    int mTransitionStyle -> c
    java.lang.String mName -> d
    int mIndex -> e
    int mBreadCrumbTitleRes -> f
    java.lang.CharSequence mBreadCrumbTitleText -> g
    int mBreadCrumbShortTitleRes -> h
    java.lang.CharSequence mBreadCrumbShortTitleText -> i
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.BackStackRecord instantiate(android.support.v4.app.FragmentManagerImpl) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.BackStackState$1 -> android.support.v4.app.e:
    android.support.v4.app.BackStackState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.BackStackState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.DialogFragment -> android.support.v4.app.f:
    int mStyle -> a
    int mTheme -> b
    boolean mCancelable -> c
    boolean mShowsDialog -> d
    int mBackStackId -> e
    android.app.Dialog mDialog -> f
    boolean mViewDestroyed -> g
    boolean mDismissed -> h
    boolean mShownByMe -> i
    void show(android.support.v4.app.FragmentManager,java.lang.String) -> a
    int show(android.support.v4.app.FragmentTransaction,java.lang.String) -> a
    void dismiss() -> a
    void dismissInternal(boolean) -> a
    int getTheme() -> b
    void setCancelable(boolean) -> b
    void onAttach(android.app.Activity) -> a
    void onDetach() -> c
    void onCreate(android.os.Bundle) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onCancel(android.content.DialogInterface) -> onCancel
    void onDismiss(android.content.DialogInterface) -> onDismiss
    void onActivityCreated(android.os.Bundle) -> d
    void onStart() -> d
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStop() -> e
    void onDestroyView() -> f
android.support.v4.app.Fragment -> android.support.v4.app.Fragment:
    java.util.HashMap sClassMap -> a
    int mState -> j
    android.view.View mAnimatingAway -> k
    int mStateAfterAnimating -> l
    android.os.Bundle mSavedFragmentState -> m
    android.util.SparseArray mSavedViewState -> n
    int mIndex -> o
    java.lang.String mWho -> p
    android.os.Bundle mArguments -> q
    android.support.v4.app.Fragment mTarget -> r
    int mTargetIndex -> s
    int mTargetRequestCode -> t
    boolean mAdded -> u
    boolean mRemoving -> v
    boolean mResumed -> w
    boolean mFromLayout -> x
    boolean mInLayout -> y
    boolean mRestored -> z
    int mBackStackNesting -> A
    android.support.v4.app.FragmentManagerImpl mFragmentManager -> B
    android.support.v4.app.FragmentActivity mActivity -> C
    int mFragmentId -> D
    int mContainerId -> E
    java.lang.String mTag -> F
    boolean mHidden -> G
    boolean mDetached -> H
    boolean mRetainInstance -> I
    boolean mRetaining -> J
    boolean mHasMenu -> K
    boolean mMenuVisible -> L
    boolean mCalled -> M
    int mNextAnim -> N
    android.view.ViewGroup mContainer -> O
    android.view.View mView -> P
    android.view.View mInnerView -> Q
    boolean mDeferStart -> R
    boolean mUserVisibleHint -> S
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> T
    boolean mLoadersStarted -> U
    boolean mCheckedForLoaderManager -> V
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String) -> a
    android.support.v4.app.Fragment instantiate(android.content.Context,java.lang.String,android.os.Bundle) -> a
    void restoreViewState() -> g
    void setIndex(int) -> a
    boolean isInBackStack() -> h
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void setArguments(android.os.Bundle) -> f
    android.os.Bundle getArguments() -> i
    void setInitialSavedState(android.support.v4.app.Fragment$SavedState) -> a
    android.support.v4.app.FragmentActivity getActivity() -> j
    android.content.res.Resources getResources() -> k
    java.lang.String getString(int) -> b
    java.lang.String getString(int,java.lang.Object[]) -> a
    android.support.v4.app.FragmentManager getFragmentManager() -> l
    boolean isAdded() -> m
    boolean isDetached() -> n
    boolean isHidden() -> o
    void onHiddenChanged(boolean) -> c
    void setRetainInstance(boolean) -> d
    void setHasOptionsMenu(boolean) -> e
    void setMenuVisibility(boolean) -> f
    android.support.v4.app.LoaderManager getLoaderManager() -> p
    void startActivity(android.content.Intent) -> a
    void startActivityForResult(android.content.Intent,int) -> a
    void onActivityResult(int,int,android.content.Intent) -> a
    android.view.LayoutInflater getLayoutInflater(android.os.Bundle) -> b
    void onInflate(android.app.Activity,android.util.AttributeSet,android.os.Bundle) -> a
    void onAttach(android.app.Activity) -> a
    android.view.animation.Animation onCreateAnimation(int,boolean,int) -> a
    void onCreate(android.os.Bundle) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    android.view.View getView() -> q
    void onActivityCreated(android.os.Bundle) -> d
    void onStart() -> d
    void onResume() -> r
    void onSaveInstanceState(android.os.Bundle) -> e
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onPause() -> s
    void onStop() -> e
    void onLowMemory() -> onLowMemory
    void onDestroyView() -> f
    void onDestroy() -> t
    void initState() -> u
    void onDetach() -> c
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onPrepareOptionsMenu(android.view.Menu) -> a
    void onDestroyOptionsMenu() -> v
    boolean onOptionsItemSelected(android.view.MenuItem) -> a_
    void onOptionsMenuClosed(android.view.Menu) -> b
    void onCreateContextMenu(android.view.ContextMenu,android.view.View,android.view.ContextMenu$ContextMenuInfo) -> onCreateContextMenu
    boolean onContextItemSelected(android.view.MenuItem) -> b
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    void performStart() -> w
    void performStop() -> x
    void performReallyStop() -> y
    void performDestroyView() -> z
android.support.v4.app.Fragment$InstantiationException -> android.support.v4.app.g:
android.support.v4.app.Fragment$SavedState -> android.support.v4.app.Fragment$SavedState:
    android.os.Bundle mState -> a
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.Fragment$SavedState$1 -> android.support.v4.app.h:
    android.support.v4.app.Fragment$SavedState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.Fragment$SavedState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentActivity -> android.support.v4.app.i:
    android.os.Handler mHandler -> a
    android.support.v4.app.FragmentManagerImpl mFragments -> b
    boolean mCreated -> c
    boolean mResumed -> d
    boolean mStopped -> e
    boolean mReallyStopped -> f
    boolean mRetaining -> g
    boolean mOptionsMenuInvalidated -> h
    boolean mCheckedForLoaderManager -> i
    boolean mLoadersStarted -> j
    android.support.v4.util.SparseArrayCompat mAllLoaderManagers -> k
    android.support.v4.app.LoaderManagerImpl mLoaderManager -> l
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onConfigurationChanged(android.content.res.Configuration) -> onConfigurationChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreatePanelMenu(int,android.view.Menu) -> onCreatePanelMenu
    android.view.View onCreateView(java.lang.String,android.content.Context,android.util.AttributeSet) -> onCreateView
    void onDestroy() -> onDestroy
    boolean onKeyDown(int,android.view.KeyEvent) -> onKeyDown
    void onLowMemory() -> onLowMemory
    boolean onMenuItemSelected(int,android.view.MenuItem) -> onMenuItemSelected
    void onPanelClosed(int,android.view.Menu) -> onPanelClosed
    void onPause() -> onPause
    void onResume() -> onResume
    void onPostResume() -> onPostResume
    void onResumeFragments() -> a_
    boolean onPreparePanel(int,android.view.View,android.view.Menu) -> onPreparePanel
    java.lang.Object onRetainNonConfigurationInstance() -> onRetainNonConfigurationInstance
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStart() -> onStart
    void onStop() -> onStop
    java.lang.Object onRetainCustomNonConfigurationInstance() -> b
    void supportInvalidateOptionsMenu() -> c
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> dump
    void doReallyStop(boolean) -> a
    void onReallyStop() -> d
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentManager getSupportFragmentManager() -> e
    void startActivityForResult(android.content.Intent,int) -> startActivityForResult
    void startActivityFromFragment(android.support.v4.app.Fragment,android.content.Intent,int) -> a
    void invalidateSupportFragmentIndex(int) -> a
    android.support.v4.app.LoaderManager getSupportLoaderManager() -> f
    android.support.v4.app.LoaderManagerImpl getLoaderManager(int,boolean,boolean) -> a
android.support.v4.app.FragmentActivity$1 -> android.support.v4.app.j:
    android.support.v4.app.FragmentActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.app.FragmentActivity$FragmentTag -> android.support.v4.app.k:
    int[] Fragment -> a
android.support.v4.app.FragmentActivity$NonConfigurationInstances -> android.support.v4.app.l:
    java.lang.Object activity -> a
    java.lang.Object custom -> b
    java.util.HashMap children -> c
    java.util.ArrayList fragments -> d
    android.support.v4.util.SparseArrayCompat loaders -> e
android.support.v4.app.FragmentManager -> android.support.v4.app.m:
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    boolean popBackStackImmediate() -> c
    void popBackStack(int,int) -> a
    int getBackStackEntryCount() -> d
    android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt(int) -> b
    void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> a
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> a
android.support.v4.app.FragmentManager$BackStackEntry -> android.support.v4.app.n:
android.support.v4.app.FragmentManager$OnBackStackChangedListener -> android.support.v4.app.o:
    void onBackStackChanged() -> a
android.support.v4.app.FragmentManagerImpl -> android.support.v4.app.p:
    boolean DEBUG -> a
    boolean HONEYCOMB -> b
    java.util.ArrayList mPendingActions -> c
    java.lang.Runnable[] mTmpActions -> d
    boolean mExecutingActions -> e
    java.util.ArrayList mActive -> f
    java.util.ArrayList mAdded -> g
    java.util.ArrayList mAvailIndices -> h
    java.util.ArrayList mBackStack -> i
    java.util.ArrayList mCreatedMenus -> j
    java.util.ArrayList mBackStackIndices -> k
    java.util.ArrayList mAvailBackStackIndices -> l
    java.util.ArrayList mBackStackChangeListeners -> m
    int mCurState -> n
    android.support.v4.app.FragmentActivity mActivity -> o
    boolean mNeedMenuInvalidate -> p
    boolean mStateSaved -> q
    boolean mDestroyed -> r
    java.lang.String mNoTransactionsBecause -> s
    boolean mHavePendingDeferredStart -> t
    android.os.Bundle mStateBundle -> u
    android.util.SparseArray mStateArray -> v
    java.lang.Runnable mExecCommit -> w
    android.view.animation.Interpolator DECELERATE_QUINT -> x
    android.view.animation.Interpolator DECELERATE_CUBIC -> y
    android.view.animation.Interpolator ACCELERATE_QUINT -> z
    android.view.animation.Interpolator ACCELERATE_CUBIC -> A
    android.support.v4.app.FragmentTransaction beginTransaction() -> a
    boolean executePendingTransactions() -> b
    boolean popBackStackImmediate() -> c
    void popBackStack(int,int) -> a
    int getBackStackEntryCount() -> d
    android.support.v4.app.FragmentManager$BackStackEntry getBackStackEntryAt(int) -> b
    void addOnBackStackChangedListener(android.support.v4.app.FragmentManager$OnBackStackChangedListener) -> a
    void putFragment(android.os.Bundle,java.lang.String,android.support.v4.app.Fragment) -> a
    android.support.v4.app.Fragment getFragment(android.os.Bundle,java.lang.String) -> a
    android.support.v4.app.Fragment$SavedState saveFragmentInstanceState(android.support.v4.app.Fragment) -> a
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    android.view.animation.Animation makeOpenCloseAnimation(android.content.Context,float,float,float,float) -> a
    android.view.animation.Animation makeFadeAnimation(android.content.Context,float,float) -> a
    android.view.animation.Animation loadAnimation(android.support.v4.app.Fragment,int,boolean,int) -> a
    void performPendingDeferredStart(android.support.v4.app.Fragment) -> b
    void moveToState(android.support.v4.app.Fragment,int,int,int,boolean) -> a
    void moveToState(android.support.v4.app.Fragment) -> c
    void moveToState(int,boolean) -> a
    void moveToState(int,int,int,boolean) -> a
    void startPendingDeferredFragments() -> e
    void makeActive(android.support.v4.app.Fragment) -> d
    void makeInactive(android.support.v4.app.Fragment) -> e
    void addFragment(android.support.v4.app.Fragment,boolean) -> a
    void removeFragment(android.support.v4.app.Fragment,int,int) -> a
    void hideFragment(android.support.v4.app.Fragment,int,int) -> b
    void showFragment(android.support.v4.app.Fragment,int,int) -> c
    void detachFragment(android.support.v4.app.Fragment,int,int) -> d
    void attachFragment(android.support.v4.app.Fragment,int,int) -> e
    android.support.v4.app.Fragment findFragmentById(int) -> a
    android.support.v4.app.Fragment findFragmentByTag(java.lang.String) -> a
    void checkStateLoss() -> t
    void enqueueAction(java.lang.Runnable,boolean) -> a
    int allocBackStackIndex(android.support.v4.app.BackStackRecord) -> a
    void setBackStackIndex(int,android.support.v4.app.BackStackRecord) -> a
    void freeBackStackIndex(int) -> c
    boolean execPendingActions() -> f
    void reportBackStackChanged() -> g
    void addBackStackState(android.support.v4.app.BackStackRecord) -> b
    boolean popBackStackState(android.os.Handler,java.lang.String,int,int) -> a
    java.util.ArrayList retainNonConfig() -> h
    void saveFragmentViewState(android.support.v4.app.Fragment) -> f
    android.os.Bundle saveFragmentBasicState(android.support.v4.app.Fragment) -> g
    android.os.Parcelable saveAllState() -> i
    void restoreAllState(android.os.Parcelable,java.util.ArrayList) -> a
    void attachActivity(android.support.v4.app.FragmentActivity) -> a
    void noteStateNotSaved() -> j
    void dispatchCreate() -> k
    void dispatchActivityCreated() -> l
    void dispatchStart() -> m
    void dispatchResume() -> n
    void dispatchPause() -> o
    void dispatchStop() -> p
    void dispatchReallyStop() -> q
    void dispatchDestroy() -> r
    void dispatchConfigurationChanged(android.content.res.Configuration) -> a
    void dispatchLowMemory() -> s
    boolean dispatchCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    boolean dispatchPrepareOptionsMenu(android.view.Menu) -> a
    boolean dispatchOptionsItemSelected(android.view.MenuItem) -> a
    boolean dispatchContextItemSelected(android.view.MenuItem) -> b
    void dispatchOptionsMenuClosed(android.view.Menu) -> b
    int reverseTransit(int) -> d
    int transitToStyleIndex(int,boolean) -> b
android.support.v4.app.FragmentManagerImpl$1 -> android.support.v4.app.q:
    android.support.v4.app.FragmentManagerImpl this$0 -> a
    void run() -> run
android.support.v4.app.FragmentManagerImpl$4 -> android.support.v4.app.r:
    int val$id -> a
    int val$flags -> b
    android.support.v4.app.FragmentManagerImpl this$0 -> c
    void run() -> run
android.support.v4.app.FragmentManagerImpl$5 -> android.support.v4.app.s:
    android.support.v4.app.Fragment val$fragment -> a
    android.support.v4.app.FragmentManagerImpl this$0 -> b
    void onAnimationEnd(android.view.animation.Animation) -> onAnimationEnd
    void onAnimationRepeat(android.view.animation.Animation) -> onAnimationRepeat
    void onAnimationStart(android.view.animation.Animation) -> onAnimationStart
android.support.v4.app.FragmentManagerState -> android.support.v4.app.FragmentManagerState:
    android.support.v4.app.FragmentState[] mActive -> a
    int[] mAdded -> b
    android.support.v4.app.BackStackState[] mBackStack -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentManagerState$1 -> android.support.v4.app.t:
    android.support.v4.app.FragmentManagerState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentManagerState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentManagerTrojan -> android.support.v4.app.u:
    boolean isStateSaved(android.support.v4.app.FragmentManager) -> a
android.support.v4.app.FragmentState -> android.support.v4.app.FragmentState:
    java.lang.String mClassName -> a
    int mIndex -> b
    boolean mFromLayout -> c
    int mFragmentId -> d
    int mContainerId -> e
    java.lang.String mTag -> f
    boolean mRetainInstance -> g
    boolean mDetached -> h
    android.os.Bundle mArguments -> i
    android.os.Bundle mSavedFragmentState -> j
    android.support.v4.app.Fragment mInstance -> k
    android.os.Parcelable$Creator CREATOR -> CREATOR
    android.support.v4.app.Fragment instantiate(android.support.v4.app.FragmentActivity) -> a
    int describeContents() -> describeContents
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
android.support.v4.app.FragmentState$1 -> android.support.v4.app.v:
    android.support.v4.app.FragmentState createFromParcel(android.os.Parcel) -> a
    android.support.v4.app.FragmentState[] newArray(int) -> a
    java.lang.Object[] newArray(int) -> newArray
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
android.support.v4.app.FragmentStatePagerAdapter -> android.support.v4.app.w:
    android.support.v4.app.FragmentManager mFragmentManager -> a
    android.support.v4.app.FragmentTransaction mCurTransaction -> b
    java.util.ArrayList mSavedState -> c
    java.util.ArrayList mFragments -> d
    android.support.v4.app.Fragment mCurrentPrimaryItem -> e
    android.support.v4.app.Fragment getItem(int) -> a
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
android.support.v4.app.FragmentTransaction -> android.support.v4.app.x:
    android.support.v4.app.FragmentTransaction add(android.support.v4.app.Fragment,java.lang.String) -> a
    android.support.v4.app.FragmentTransaction add(int,android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction replace(int,android.support.v4.app.Fragment) -> b
    android.support.v4.app.FragmentTransaction remove(android.support.v4.app.Fragment) -> a
    android.support.v4.app.FragmentTransaction setTransitionStyle(int) -> a
    android.support.v4.app.FragmentTransaction addToBackStack(java.lang.String) -> a
    int commit() -> a
    int commitAllowingStateLoss() -> b
android.support.v4.app.ListFragment -> android.support.v4.app.y:
    android.os.Handler mHandler -> i
    java.lang.Runnable mRequestFocus -> W
    android.widget.AdapterView$OnItemClickListener mOnClickListener -> X
    android.widget.ListAdapter mAdapter -> a
    android.widget.ListView mList -> b
    android.view.View mEmptyView -> c
    android.widget.TextView mStandardEmptyView -> d
    android.view.View mProgressContainer -> e
    android.view.View mListContainer -> f
    java.lang.CharSequence mEmptyText -> g
    boolean mListShown -> h
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onViewCreated(android.view.View,android.os.Bundle) -> a
    void onDestroyView() -> f
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void setListAdapter(android.widget.ListAdapter) -> a
    android.widget.ListView getListView() -> a
    void setListShown(boolean) -> a
    void setListShownNoAnimation(boolean) -> b
    void setListShown(boolean,boolean) -> a
    android.widget.ListAdapter getListAdapter() -> b
    void ensureList() -> A
android.support.v4.app.ListFragment$1 -> android.support.v4.app.z:
    android.support.v4.app.ListFragment this$0 -> a
    void run() -> run
android.support.v4.app.ListFragment$2 -> android.support.v4.app.aa:
    android.support.v4.app.ListFragment this$0 -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
android.support.v4.app.LoaderManager -> android.support.v4.app.ab:
    android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> a
    android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> b
    void destroyLoader(int) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManager$LoaderCallbacks -> android.support.v4.app.ac:
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
android.support.v4.app.LoaderManagerImpl -> android.support.v4.app.ad:
    boolean DEBUG -> a
    android.support.v4.util.SparseArrayCompat mLoaders -> b
    android.support.v4.util.SparseArrayCompat mInactiveLoaders -> c
    android.support.v4.app.FragmentActivity mActivity -> d
    boolean mStarted -> e
    boolean mRetaining -> f
    boolean mCreatingLoader -> g
    void updateActivity(android.support.v4.app.FragmentActivity) -> a
    android.support.v4.app.LoaderManagerImpl$LoaderInfo createLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> c
    android.support.v4.app.LoaderManagerImpl$LoaderInfo createAndInstallLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> d
    void installLoader(android.support.v4.app.LoaderManagerImpl$LoaderInfo) -> a
    android.support.v4.content.Loader initLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> a
    android.support.v4.content.Loader restartLoader(int,android.os.Bundle,android.support.v4.app.LoaderManager$LoaderCallbacks) -> b
    void destroyLoader(int) -> a
    void doStart() -> b
    void doStop() -> c
    void doRetain() -> d
    void finishRetain() -> e
    void doReportNextStart() -> f
    void doReportStart() -> g
    void doDestroy() -> h
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    boolean hasRunningLoaders() -> a
android.support.v4.app.LoaderManagerImpl$LoaderInfo -> android.support.v4.app.ae:
    int mId -> a
    android.os.Bundle mArgs -> b
    android.support.v4.app.LoaderManager$LoaderCallbacks mCallbacks -> c
    android.support.v4.content.Loader mLoader -> d
    boolean mHaveData -> e
    boolean mDeliveredData -> f
    java.lang.Object mData -> g
    boolean mStarted -> h
    boolean mRetaining -> i
    boolean mRetainingStarted -> j
    boolean mReportNextStart -> k
    boolean mDestroyed -> l
    boolean mListenerRegistered -> m
    android.support.v4.app.LoaderManagerImpl$LoaderInfo mPendingLoader -> n
    android.support.v4.app.LoaderManagerImpl this$0 -> o
    void start() -> a
    void retain() -> b
    void finishRetain() -> c
    void reportStart() -> d
    void stop() -> e
    void destroy() -> f
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> a
    void callOnLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> b
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.app.NavUtils -> android.support.v4.app.af:
    android.support.v4.app.NavUtils$NavUtilsImpl IMPL -> a
    void navigateUpFromSameTask(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    android.content.Intent getParentActivityIntent(android.app.Activity) -> b
    java.lang.String getParentActivityName(android.app.Activity) -> c
    java.lang.String getParentActivityName(android.content.Context,android.content.ComponentName) -> a
android.support.v4.app.NavUtils$NavUtilsImpl -> android.support.v4.app.ag:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtils$NavUtilsImplBase -> android.support.v4.app.ah:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtils$NavUtilsImplJB -> android.support.v4.app.ai:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    java.lang.String getParentActivityName(android.content.Context,android.content.pm.ActivityInfo) -> a
android.support.v4.app.NavUtilsJB -> android.support.v4.app.aj:
    android.content.Intent getParentActivityIntent(android.app.Activity) -> a
    void navigateUpTo(android.app.Activity,android.content.Intent) -> a
    java.lang.String getParentActivityName(android.content.pm.ActivityInfo) -> a
android.support.v4.app.NoSaveStateFrameLayout -> android.support.v4.app.ak:
    android.view.ViewGroup wrap(android.view.View) -> a
    void dispatchSaveInstanceState(android.util.SparseArray) -> dispatchSaveInstanceState
    void dispatchRestoreInstanceState(android.util.SparseArray) -> dispatchRestoreInstanceState
android.support.v4.app.NotificationCompat -> android.support.v4.app.al:
    android.support.v4.app.NotificationCompat$NotificationCompatImpl IMPL -> a
    android.support.v4.app.NotificationCompat$NotificationCompatImpl access$000() -> a
android.support.v4.app.NotificationCompat$Action -> android.support.v4.app.am:
    int icon -> a
    java.lang.CharSequence title -> b
    android.app.PendingIntent actionIntent -> c
android.support.v4.app.NotificationCompat$BigPictureStyle -> android.support.v4.app.an:
    android.graphics.Bitmap mPicture -> a
android.support.v4.app.NotificationCompat$BigTextStyle -> android.support.v4.app.ao:
    java.lang.CharSequence mBigText -> a
android.support.v4.app.NotificationCompat$Builder -> android.support.v4.app.ap:
    android.content.Context mContext -> a
    java.lang.CharSequence mContentTitle -> b
    java.lang.CharSequence mContentText -> c
    android.app.PendingIntent mContentIntent -> d
    android.app.PendingIntent mFullScreenIntent -> e
    android.widget.RemoteViews mTickerView -> f
    android.graphics.Bitmap mLargeIcon -> g
    java.lang.CharSequence mContentInfo -> h
    int mNumber -> i
    int mPriority -> j
    boolean mUseChronometer -> k
    android.support.v4.app.NotificationCompat$Style mStyle -> l
    java.lang.CharSequence mSubText -> m
    int mProgressMax -> n
    int mProgress -> o
    boolean mProgressIndeterminate -> p
    java.util.ArrayList mActions -> q
    android.app.Notification mNotification -> r
    android.support.v4.app.NotificationCompat$Builder setWhen(long) -> a
    android.support.v4.app.NotificationCompat$Builder setSmallIcon(int) -> a
    android.support.v4.app.NotificationCompat$Builder setContentTitle(java.lang.CharSequence) -> a
    android.support.v4.app.NotificationCompat$Builder setContentText(java.lang.CharSequence) -> b
    android.support.v4.app.NotificationCompat$Builder setNumber(int) -> b
    android.support.v4.app.NotificationCompat$Builder setContentIntent(android.app.PendingIntent) -> a
    android.support.v4.app.NotificationCompat$Builder setDeleteIntent(android.app.PendingIntent) -> b
    android.support.v4.app.NotificationCompat$Builder setTicker(java.lang.CharSequence) -> c
    android.support.v4.app.NotificationCompat$Builder setLargeIcon(android.graphics.Bitmap) -> a
    android.support.v4.app.NotificationCompat$Builder setSound(android.net.Uri,int) -> a
    android.support.v4.app.NotificationCompat$Builder setLights(int,int,int) -> a
    android.support.v4.app.NotificationCompat$Builder setOnlyAlertOnce(boolean) -> a
    android.support.v4.app.NotificationCompat$Builder setAutoCancel(boolean) -> b
    android.support.v4.app.NotificationCompat$Builder setDefaults(int) -> c
    void setFlag(int,boolean) -> a
    android.app.Notification build() -> a
android.support.v4.app.NotificationCompat$InboxStyle -> android.support.v4.app.aq:
    java.util.ArrayList mTexts -> a
android.support.v4.app.NotificationCompat$NotificationCompatImpl -> android.support.v4.app.ar:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplBase -> android.support.v4.app.as:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplHoneycomb -> android.support.v4.app.at:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplIceCreamSandwich -> android.support.v4.app.au:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$NotificationCompatImplJellybean -> android.support.v4.app.av:
    android.app.Notification build(android.support.v4.app.NotificationCompat$Builder) -> a
android.support.v4.app.NotificationCompat$Style -> android.support.v4.app.aw:
    java.lang.CharSequence mBigContentTitle -> b
    java.lang.CharSequence mSummaryText -> c
    boolean mSummaryTextSet -> d
android.support.v4.app.NotificationCompatHoneycomb -> android.support.v4.app.ax:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap) -> a
android.support.v4.app.NotificationCompatIceCreamSandwich -> android.support.v4.app.ay:
    android.app.Notification add(android.content.Context,android.app.Notification,java.lang.CharSequence,java.lang.CharSequence,java.lang.CharSequence,android.widget.RemoteViews,int,android.app.PendingIntent,android.app.PendingIntent,android.graphics.Bitmap,int,int,boolean) -> a
android.support.v4.app.NotificationCompatJellybean -> android.support.v4.app.az:
    android.app.Notification$Builder b -> a
    void addAction(int,java.lang.CharSequence,android.app.PendingIntent) -> a
    void addBigTextStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.lang.CharSequence) -> a
    void addBigPictureStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,android.graphics.Bitmap) -> a
    void addInboxStyle(java.lang.CharSequence,boolean,java.lang.CharSequence,java.util.ArrayList) -> a
    android.app.Notification build() -> a
android.support.v4.app.SuperNotCalledException -> android.support.v4.app.ba:
android.support.v4.content.AsyncTaskLoader -> android.support.v4.a.a:
    android.support.v4.content.AsyncTaskLoader$LoadTask mTask -> a
    android.support.v4.content.AsyncTaskLoader$LoadTask mCancellingTask -> b
    long mUpdateThrottle -> c
    long mLastLoadCompleteTime -> d
    android.os.Handler mHandler -> e
    void onForceLoad() -> a
    boolean cancelLoad() -> b
    void onCanceled(java.lang.Object) -> a
    void executePendingTask() -> c
    void dispatchOnCancelled(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> a
    void dispatchOnLoadComplete(android.support.v4.content.AsyncTaskLoader$LoadTask,java.lang.Object) -> b
    java.lang.Object loadInBackground() -> d
    java.lang.Object onLoadInBackground() -> e
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.AsyncTaskLoader$LoadTask -> android.support.v4.a.b:
    java.lang.Object result -> a
    boolean waiting -> b
    java.util.concurrent.CountDownLatch done -> e
    android.support.v4.content.AsyncTaskLoader this$0 -> c
    java.lang.Object doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Object) -> a
    void onCancelled() -> a
    void run() -> run
    java.lang.Object doInBackground(java.lang.Object[]) -> a
android.support.v4.content.CursorLoader -> android.support.v4.a.c:
    android.support.v4.content.Loader$ForceLoadContentObserver mObserver -> f
    android.net.Uri mUri -> g
    java.lang.String[] mProjection -> h
    java.lang.String mSelection -> i
    java.lang.String[] mSelectionArgs -> j
    java.lang.String mSortOrder -> k
    android.database.Cursor mCursor -> l
    android.database.Cursor loadInBackground() -> f
    void registerContentObserver(android.database.Cursor,android.database.ContentObserver) -> a
    void deliverResult(android.database.Cursor) -> a
    void onStartLoading() -> g
    void onStopLoading() -> h
    void onCanceled(android.database.Cursor) -> b
    void onReset() -> i
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
    java.lang.Object loadInBackground() -> d
    void onCanceled(java.lang.Object) -> a
    void deliverResult(java.lang.Object) -> b
android.support.v4.content.Loader -> android.support.v4.a.d:
    int mId -> m
    android.support.v4.content.Loader$OnLoadCompleteListener mListener -> n
    android.content.Context mContext -> o
    boolean mStarted -> p
    boolean mAbandoned -> q
    boolean mReset -> r
    boolean mContentChanged -> s
    void deliverResult(java.lang.Object) -> b
    android.content.Context getContext() -> j
    void registerListener(int,android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    void unregisterListener(android.support.v4.content.Loader$OnLoadCompleteListener) -> a
    boolean isStarted() -> k
    boolean isAbandoned() -> l
    boolean isReset() -> m
    void startLoading() -> n
    void onStartLoading() -> g
    void forceLoad() -> o
    void onForceLoad() -> a
    void stopLoading() -> p
    void onStopLoading() -> h
    void abandon() -> q
    void onAbandon() -> r
    void reset() -> s
    void onReset() -> i
    boolean takeContentChanged() -> t
    void onContentChanged() -> u
    java.lang.String dataToString(java.lang.Object) -> c
    java.lang.String toString() -> toString
    void dump(java.lang.String,java.io.FileDescriptor,java.io.PrintWriter,java.lang.String[]) -> a
android.support.v4.content.Loader$ForceLoadContentObserver -> android.support.v4.a.e:
    android.support.v4.content.Loader this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.content.Loader$OnLoadCompleteListener -> android.support.v4.a.f:
    void onLoadComplete(android.support.v4.content.Loader,java.lang.Object) -> a
android.support.v4.content.ModernAsyncTask -> android.support.v4.a.g:
    java.util.concurrent.ThreadFactory sThreadFactory -> a
    java.util.concurrent.BlockingQueue sPoolWorkQueue -> b
    java.util.concurrent.Executor THREAD_POOL_EXECUTOR -> d
    android.support.v4.content.ModernAsyncTask$InternalHandler sHandler -> c
    java.util.concurrent.Executor sDefaultExecutor -> e
    android.support.v4.content.ModernAsyncTask$WorkerRunnable mWorker -> f
    java.util.concurrent.FutureTask mFuture -> g
    android.support.v4.content.ModernAsyncTask$Status mStatus -> h
    java.util.concurrent.atomic.AtomicBoolean mTaskInvoked -> i
    void postResultIfNotInvoked(java.lang.Object) -> c
    java.lang.Object postResult(java.lang.Object) -> d
    java.lang.Object doInBackground(java.lang.Object[]) -> a
    void onPreExecute() -> b
    void onPostExecute(java.lang.Object) -> a
    void onProgressUpdate(java.lang.Object[]) -> b
    void onCancelled(java.lang.Object) -> b
    void onCancelled() -> a
    boolean isCancelled() -> c
    boolean cancel(boolean) -> a
    android.support.v4.content.ModernAsyncTask executeOnExecutor(java.util.concurrent.Executor,java.lang.Object[]) -> a
    void finish(java.lang.Object) -> e
    java.util.concurrent.atomic.AtomicBoolean access$200(android.support.v4.content.ModernAsyncTask) -> a
    java.lang.Object access$300(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> a
    void access$400(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> b
    void access$500(android.support.v4.content.ModernAsyncTask,java.lang.Object) -> c
android.support.v4.content.ModernAsyncTask$1 -> android.support.v4.a.h:
    java.util.concurrent.atomic.AtomicInteger mCount -> a
    java.lang.Thread newThread(java.lang.Runnable) -> newThread
android.support.v4.content.ModernAsyncTask$2 -> android.support.v4.a.i:
    android.support.v4.content.ModernAsyncTask this$0 -> a
    java.lang.Object call() -> call
android.support.v4.content.ModernAsyncTask$3 -> android.support.v4.a.j:
    android.support.v4.content.ModernAsyncTask this$0 -> a
    void done() -> done
android.support.v4.content.ModernAsyncTask$4 -> android.support.v4.a.k:
    int[] $SwitchMap$android$support$v4$content$ModernAsyncTask$Status -> a
android.support.v4.content.ModernAsyncTask$AsyncTaskResult -> android.support.v4.a.l:
    android.support.v4.content.ModernAsyncTask mTask -> a
    java.lang.Object[] mData -> b
android.support.v4.content.ModernAsyncTask$InternalHandler -> android.support.v4.a.m:
    void handleMessage(android.os.Message) -> handleMessage
android.support.v4.content.ModernAsyncTask$Status -> android.support.v4.a.n:
    android.support.v4.content.ModernAsyncTask$Status PENDING -> a
    android.support.v4.content.ModernAsyncTask$Status RUNNING -> b
    android.support.v4.content.ModernAsyncTask$Status FINISHED -> c
    android.support.v4.content.ModernAsyncTask$Status[] $VALUES -> d
    android.support.v4.content.ModernAsyncTask$Status[] values() -> values
    android.support.v4.content.ModernAsyncTask$Status valueOf(java.lang.String) -> valueOf
android.support.v4.content.ModernAsyncTask$WorkerRunnable -> android.support.v4.a.o:
    java.lang.Object[] mParams -> b
android.support.v4.os.ParcelableCompat -> android.support.v4.b.a:
    android.os.Parcelable$Creator newCreator(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.os.ParcelableCompat$CompatCreator -> android.support.v4.b.b:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorCallbacks -> android.support.v4.b.c:
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
    java.lang.Object[] newArray(int) -> a
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2 -> android.support.v4.b.d:
    android.support.v4.os.ParcelableCompatCreatorCallbacks mCallbacks -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
android.support.v4.os.ParcelableCompatCreatorHoneycombMR2Stub -> android.support.v4.b.e:
    android.os.Parcelable$Creator instantiate(android.support.v4.os.ParcelableCompatCreatorCallbacks) -> a
android.support.v4.util.DebugUtils -> android.support.v4.c.a:
    void buildShortClassTag(java.lang.Object,java.lang.StringBuilder) -> a
android.support.v4.util.LogWriter -> android.support.v4.c.b:
    java.lang.String mTag -> a
    java.lang.StringBuilder mBuilder -> b
    void close() -> close
    void flush() -> flush
    void write(char[],int,int) -> write
    void flushBuilder() -> a
android.support.v4.util.SparseArrayCompat -> android.support.v4.c.c:
    java.lang.Object DELETED -> a
    boolean mGarbage -> b
    int[] mKeys -> c
    java.lang.Object[] mValues -> d
    int mSize -> e
    java.lang.Object get(int) -> a
    java.lang.Object get(int,java.lang.Object) -> a
    void delete(int) -> b
    void remove(int) -> c
    void removeAt(int) -> d
    void gc() -> c
    void put(int,java.lang.Object) -> b
    int size() -> a
    int keyAt(int) -> e
    java.lang.Object valueAt(int) -> f
    int indexOfKey(int) -> g
    void clear() -> b
    int binarySearch(int[],int,int,int) -> a
    int idealByteArraySize(int) -> h
    int idealIntArraySize(int) -> i
android.support.v4.util.TimeUtils -> android.support.v4.c.d:
    java.lang.Object sFormatSync -> a
    char[] sFormatStr -> b
    int accumField(int,int,boolean,int) -> a
    int printField(char[],int,char,int,boolean,int) -> a
    int formatDurationLocked(long,int) -> a
    void formatDuration(long,java.io.PrintWriter,int) -> a
    void formatDuration(long,java.io.PrintWriter) -> a
    void formatDuration(long,long,java.io.PrintWriter) -> a
android.support.v4.view.AccessibilityDelegateCompat -> android.support.v4.view.a:
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl IMPL -> b
    java.lang.Object DEFAULT_DELEGATE -> c
    java.lang.Object mBridge -> a
    java.lang.Object getBridge() -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl -> android.support.v4.view.b:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl$1 -> android.support.v4.view.c:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateIcsImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateImpl -> android.support.v4.view.d:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl -> android.support.v4.view.e:
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl$1 -> android.support.v4.view.f:
    android.support.v4.view.AccessibilityDelegateCompat val$compat -> a
    android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateJellyBeanImpl this$0 -> b
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompat$AccessibilityDelegateStubImpl -> android.support.v4.view.g:
    java.lang.Object newAccessiblityDelegateDefaultImpl() -> a
    java.lang.Object newAccessiblityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompat) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatIcs -> android.support.v4.view.h:
    java.lang.Object newAccessibilityDelegateDefaultImpl() -> a
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge) -> a
    boolean dispatchPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(java.lang.Object,android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(java.lang.Object,android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(java.lang.Object,android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(java.lang.Object,android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatIcs$1 -> android.support.v4.view.i:
    android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
android.support.v4.view.AccessibilityDelegateCompatIcs$AccessibilityDelegateBridge -> android.support.v4.view.j:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
android.support.v4.view.AccessibilityDelegateCompatJellyBean -> android.support.v4.view.k:
    java.lang.Object newAccessibilityDelegateBridge(android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean) -> a
    java.lang.Object getAccessibilityNodeProvider(java.lang.Object,android.view.View) -> a
    boolean performAccessibilityAction(java.lang.Object,android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.AccessibilityDelegateCompatJellyBean$1 -> android.support.v4.view.l:
    android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean val$bridge -> a
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onInitializeAccessibilityEvent
    void onInitializeAccessibilityNodeInfo(android.view.View,android.view.accessibility.AccessibilityNodeInfo) -> onInitializeAccessibilityNodeInfo
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> onPopulateAccessibilityEvent
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> onRequestSendAccessibilityEvent
    void sendAccessibilityEvent(android.view.View,int) -> sendAccessibilityEvent
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> sendAccessibilityEventUnchecked
    android.view.accessibility.AccessibilityNodeProvider getAccessibilityNodeProvider(android.view.View) -> getAccessibilityNodeProvider
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> performAccessibilityAction
android.support.v4.view.AccessibilityDelegateCompatJellyBean$AccessibilityDelegateBridgeJellyBean -> android.support.v4.view.m:
    boolean dispatchPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> b
    void onInitializeAccessibilityNodeInfo(android.view.View,java.lang.Object) -> a
    void onPopulateAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> c
    boolean onRequestSendAccessibilityEvent(android.view.ViewGroup,android.view.View,android.view.accessibility.AccessibilityEvent) -> a
    void sendAccessibilityEvent(android.view.View,int) -> a
    void sendAccessibilityEventUnchecked(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    java.lang.Object getAccessibilityNodeProvider(android.view.View) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.KeyEventCompat -> android.support.v4.view.n:
    android.support.v4.view.KeyEventCompat$KeyEventVersionImpl IMPL -> a
    boolean hasModifiers(android.view.KeyEvent,int) -> a
    boolean hasNoModifiers(android.view.KeyEvent) -> a
android.support.v4.view.KeyEventCompat$BaseKeyEventVersionImpl -> android.support.v4.view.o:
    int metaStateFilterDirectionalModifiers(int,int,int,int,int) -> a
    int normalizeMetaState(int) -> a
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$HoneycombKeyEventVersionImpl -> android.support.v4.view.p:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompat$KeyEventVersionImpl -> android.support.v4.view.q:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> b
android.support.v4.view.KeyEventCompatHoneycomb -> android.support.v4.view.r:
    boolean metaStateHasModifiers(int,int) -> a
    boolean metaStateHasNoModifiers(int) -> a
android.support.v4.view.MotionEventCompat -> android.support.v4.view.s:
    android.support.v4.view.MotionEventCompat$MotionEventVersionImpl IMPL -> a
    int getActionIndex(android.view.MotionEvent) -> a
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$BaseMotionEventVersionImpl -> android.support.v4.view.t:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$EclairMotionEventVersionImpl -> android.support.v4.view.u:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompat$MotionEventVersionImpl -> android.support.v4.view.v:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.MotionEventCompatEclair -> android.support.v4.view.w:
    int findPointerIndex(android.view.MotionEvent,int) -> a
    int getPointerId(android.view.MotionEvent,int) -> b
    float getX(android.view.MotionEvent,int) -> c
    float getY(android.view.MotionEvent,int) -> d
android.support.v4.view.PagerAdapter -> android.support.v4.view.x:
    android.database.DataSetObservable mObservable -> a
    int getCount() -> b
    void startUpdate(android.view.ViewGroup) -> a
    java.lang.Object instantiateItem(android.view.ViewGroup,int) -> a
    void destroyItem(android.view.ViewGroup,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.ViewGroup,int,java.lang.Object) -> b
    void finishUpdate(android.view.ViewGroup) -> b
    void startUpdate(android.view.View) -> a
    java.lang.Object instantiateItem(android.view.View,int) -> a
    void destroyItem(android.view.View,int,java.lang.Object) -> a
    void setPrimaryItem(android.view.View,int,java.lang.Object) -> b
    void finishUpdate(android.view.View) -> b
    boolean isViewFromObject(android.view.View,java.lang.Object) -> a
    android.os.Parcelable saveState() -> a
    void restoreState(android.os.Parcelable,java.lang.ClassLoader) -> a
    int getItemPosition(java.lang.Object) -> a
    void notifyDataSetChanged() -> c
    void registerDataSetObserver(android.database.DataSetObserver) -> a
    void unregisterDataSetObserver(android.database.DataSetObserver) -> b
    float getPageWidth(int) -> b
android.support.v4.view.VelocityTrackerCompat -> android.support.v4.view.y:
    android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl IMPL -> a
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$BaseVelocityTrackerVersionImpl -> android.support.v4.view.z:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$HoneycombVelocityTrackerVersionImpl -> android.support.v4.view.aa:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompat$VelocityTrackerVersionImpl -> android.support.v4.view.ab:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.VelocityTrackerCompatHoneycomb -> android.support.v4.view.ac:
    float getXVelocity(android.view.VelocityTracker,int) -> a
android.support.v4.view.ViewCompat -> android.support.v4.view.ad:
    android.support.v4.view.ViewCompat$ViewCompatImpl IMPL -> a
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$BaseViewCompatImpl -> android.support.v4.view.ae:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    long getFrameTime() -> a
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$GBViewCompatImpl -> android.support.v4.view.af:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompat$HCViewCompatImpl -> android.support.v4.view.ag:
    long getFrameTime() -> a
android.support.v4.view.ViewCompat$ICSViewCompatImpl -> android.support.v4.view.ah:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
android.support.v4.view.ViewCompat$JBViewCompatImpl -> android.support.v4.view.ai:
    void postInvalidateOnAnimation(android.view.View) -> b
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompat$ViewCompatImpl -> android.support.v4.view.aj:
    boolean canScrollHorizontally(android.view.View,int) -> a
    int getOverScrollMode(android.view.View) -> a
    void setAccessibilityDelegate(android.view.View,android.support.v4.view.AccessibilityDelegateCompat) -> a
    void postInvalidateOnAnimation(android.view.View) -> b
    int getImportantForAccessibility(android.view.View) -> c
    void setImportantForAccessibility(android.view.View,int) -> b
android.support.v4.view.ViewCompatGingerbread -> android.support.v4.view.ak:
    int getOverScrollMode(android.view.View) -> a
android.support.v4.view.ViewCompatHC -> android.support.v4.view.al:
    long getFrameTime() -> a
android.support.v4.view.ViewCompatICS -> android.support.v4.view.am:
    boolean canScrollHorizontally(android.view.View,int) -> a
    void setAccessibilityDelegate(android.view.View,java.lang.Object) -> a
android.support.v4.view.ViewCompatJB -> android.support.v4.view.an:
    void postInvalidateOnAnimation(android.view.View) -> a
    int getImportantForAccessibility(android.view.View) -> b
    void setImportantForAccessibility(android.view.View,int) -> a
android.support.v4.view.ViewConfigurationCompat -> android.support.v4.view.ao:
    android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl IMPL -> a
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$BaseViewConfigurationVersionImpl -> android.support.v4.view.ap:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$FroyoViewConfigurationVersionImpl -> android.support.v4.view.aq:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompat$ViewConfigurationVersionImpl -> android.support.v4.view.ar:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewConfigurationCompatFroyo -> android.support.v4.view.as:
    int getScaledPagingTouchSlop(android.view.ViewConfiguration) -> a
android.support.v4.view.ViewPager -> android.support.v4.view.ViewPager:
    int[] LAYOUT_ATTRS -> a
    java.util.Comparator COMPARATOR -> b
    android.view.animation.Interpolator sInterpolator -> c
    java.util.ArrayList mItems -> d
    android.support.v4.view.ViewPager$ItemInfo mTempItem -> e
    android.graphics.Rect mTempRect -> f
    android.support.v4.view.PagerAdapter mAdapter -> g
    int mCurItem -> h
    int mRestoredCurItem -> i
    android.os.Parcelable mRestoredAdapterState -> j
    java.lang.ClassLoader mRestoredClassLoader -> k
    android.widget.Scroller mScroller -> l
    android.support.v4.view.ViewPager$PagerObserver mObserver -> m
    int mPageMargin -> n
    android.graphics.drawable.Drawable mMarginDrawable -> o
    int mTopPageBounds -> p
    int mBottomPageBounds -> q
    float mFirstOffset -> r
    float mLastOffset -> s
    int mChildWidthMeasureSpec -> t
    int mChildHeightMeasureSpec -> u
    boolean mInLayout -> v
    boolean mScrollingCacheEnabled -> w
    boolean mPopulatePending -> x
    int mOffscreenPageLimit -> y
    boolean mIsBeingDragged -> z
    boolean mIsUnableToDrag -> A
    int mDefaultGutterSize -> B
    int mGutterSize -> C
    int mTouchSlop -> D
    float mInitialMotionX -> E
    float mLastMotionX -> F
    float mLastMotionY -> G
    int mActivePointerId -> H
    android.view.VelocityTracker mVelocityTracker -> I
    int mMinimumVelocity -> J
    int mMaximumVelocity -> K
    int mFlingDistance -> L
    int mCloseEnough -> M
    boolean mFakeDragging -> N
    android.support.v4.widget.EdgeEffectCompat mLeftEdge -> O
    android.support.v4.widget.EdgeEffectCompat mRightEdge -> P
    boolean mFirstLayout -> Q
    boolean mNeedCalculatePageOffsets -> R
    boolean mCalledSuper -> S
    int mDecorChildCount -> T
    android.support.v4.view.ViewPager$OnPageChangeListener mOnPageChangeListener -> U
    android.support.v4.view.ViewPager$OnPageChangeListener mInternalPageChangeListener -> V
    android.support.v4.view.ViewPager$OnAdapterChangeListener mAdapterChangeListener -> W
    int mScrollState -> Z
    void initViewPager() -> a
    void setScrollState(int) -> setScrollState
    void setAdapter(android.support.v4.view.PagerAdapter) -> setAdapter
    void removeNonDecorViews() -> g
    android.support.v4.view.PagerAdapter getAdapter() -> getAdapter
    void setOnAdapterChangeListener(android.support.v4.view.ViewPager$OnAdapterChangeListener) -> setOnAdapterChangeListener
    void setCurrentItem(int) -> setCurrentItem
    void setCurrentItem(int,boolean) -> a
    int getCurrentItem() -> getCurrentItem
    void setCurrentItemInternal(int,boolean,boolean) -> a
    void setCurrentItemInternal(int,boolean,boolean,int) -> a
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    int getOffscreenPageLimit() -> getOffscreenPageLimit
    void setOffscreenPageLimit(int) -> setOffscreenPageLimit
    void setPageMargin(int) -> setPageMargin
    int getPageMargin() -> getPageMargin
    void setPageMarginDrawable(android.graphics.drawable.Drawable) -> setPageMarginDrawable
    void setPageMarginDrawable(int) -> setPageMarginDrawable
    boolean verifyDrawable(android.graphics.drawable.Drawable) -> verifyDrawable
    void drawableStateChanged() -> drawableStateChanged
    float distanceInfluenceForSnapDuration(float) -> a
    void smoothScrollTo(int,int,int) -> a
    android.support.v4.view.ViewPager$ItemInfo addNewItem(int,int) -> a
    void dataSetChanged() -> b
    void populate() -> c
    void populate(int) -> a
    void calculatePageOffsets(android.support.v4.view.ViewPager$ItemInfo,int,android.support.v4.view.ViewPager$ItemInfo) -> a
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    void addView(android.view.View,int,android.view.ViewGroup$LayoutParams) -> addView
    android.support.v4.view.ViewPager$ItemInfo infoForChild(android.view.View) -> a
    android.support.v4.view.ViewPager$ItemInfo infoForAnyChild(android.view.View) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForPosition(int) -> b
    void onAttachedToWindow() -> onAttachedToWindow
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void recomputeScrollPosition(int,int,int,int) -> a
    void onLayout(boolean,int,int,int,int) -> onLayout
    void computeScroll() -> computeScroll
    boolean pageScrolled(int) -> d
    void onPageScrolled(int,float,int) -> a
    void completeScroll() -> h
    boolean isGutterDrag(float,float) -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean performDrag(float) -> b
    android.support.v4.view.ViewPager$ItemInfo infoForCurrentScrollPosition() -> i
    int determineTargetPage(int,float,int,int) -> a
    void draw(android.graphics.Canvas) -> draw
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSecondaryPointerUp(android.view.MotionEvent) -> a
    void endDrag() -> j
    void setScrollingCacheEnabled(boolean) -> setScrollingCacheEnabled
    boolean canScroll(android.view.View,boolean,int,int,int) -> a
    boolean dispatchKeyEvent(android.view.KeyEvent) -> dispatchKeyEvent
    boolean executeKeyEvent(android.view.KeyEvent) -> a
    boolean arrowScroll(int) -> c
    android.graphics.Rect getChildRectInPagerCoordinates(android.graphics.Rect,android.view.View) -> a
    boolean pageLeft() -> d
    boolean pageRight() -> e
    void addFocusables(java.util.ArrayList,int,int) -> addFocusables
    void addTouchables(java.util.ArrayList) -> addTouchables
    boolean onRequestFocusInDescendants(int,android.graphics.Rect) -> onRequestFocusInDescendants
    boolean dispatchPopulateAccessibilityEvent(android.view.accessibility.AccessibilityEvent) -> dispatchPopulateAccessibilityEvent
    android.view.ViewGroup$LayoutParams generateDefaultLayoutParams() -> generateDefaultLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.view.ViewGroup$LayoutParams) -> generateLayoutParams
    boolean checkLayoutParams(android.view.ViewGroup$LayoutParams) -> checkLayoutParams
    android.view.ViewGroup$LayoutParams generateLayoutParams(android.util.AttributeSet) -> generateLayoutParams
    android.support.v4.view.PagerAdapter access$100(android.support.v4.view.ViewPager) -> a
    int access$200(android.support.v4.view.ViewPager) -> b
    int[] access$300() -> f
android.support.v4.view.ViewPager$1 -> android.support.v4.view.at:
    int compare(android.support.v4.view.ViewPager$ItemInfo,android.support.v4.view.ViewPager$ItemInfo) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
android.support.v4.view.ViewPager$2 -> android.support.v4.view.au:
    float getInterpolation(float) -> getInterpolation
android.support.v4.view.ViewPager$Decor -> android.support.v4.view.av:
android.support.v4.view.ViewPager$ItemInfo -> android.support.v4.view.aw:
    java.lang.Object object -> a
    int position -> b
    boolean scrolling -> c
    float widthFactor -> d
    float offset -> e
android.support.v4.view.ViewPager$LayoutParams -> android.support.v4.view.ax:
    boolean isDecor -> a
    int gravity -> b
    float widthFactor -> c
    boolean needsMeasure -> d
android.support.v4.view.ViewPager$MyAccessibilityDelegate -> android.support.v4.view.ay:
    android.support.v4.view.ViewPager this$0 -> b
    void onInitializeAccessibilityEvent(android.view.View,android.view.accessibility.AccessibilityEvent) -> d
    void onInitializeAccessibilityNodeInfo(android.view.View,android.support.v4.view.accessibility.AccessibilityNodeInfoCompat) -> a
    boolean performAccessibilityAction(android.view.View,int,android.os.Bundle) -> a
android.support.v4.view.ViewPager$OnAdapterChangeListener -> android.support.v4.view.az:
    void onAdapterChanged(android.support.v4.view.PagerAdapter,android.support.v4.view.PagerAdapter) -> a
android.support.v4.view.ViewPager$OnPageChangeListener -> android.support.v4.view.ba:
    void onPageScrolled(int,float,int) -> a
    void onPageSelected(int) -> a_
    void onPageScrollStateChanged(int) -> b
android.support.v4.view.ViewPager$PagerObserver -> android.support.v4.view.bb:
    android.support.v4.view.ViewPager this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.view.ViewPager$SavedState -> android.support.v4.view.ViewPager$SavedState:
    int position -> a
    android.os.Parcelable adapterState -> b
    java.lang.ClassLoader loader -> c
    android.os.Parcelable$Creator CREATOR -> CREATOR
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    java.lang.String toString() -> toString
android.support.v4.view.ViewPager$SavedState$1 -> android.support.v4.view.bc:
    android.support.v4.view.ViewPager$SavedState createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> b
    android.support.v4.view.ViewPager$SavedState[] newArray(int) -> b
    java.lang.Object[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel,java.lang.ClassLoader) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat -> android.support.v4.view.a.a:
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl IMPL -> a
    java.lang.Object mInfo -> b
    java.lang.Object getInfo() -> a
    void addAction(int) -> a
    void setScrollable(boolean) -> a
    void setClassName(java.lang.CharSequence) -> a
    int hashCode() -> hashCode
    boolean equals(java.lang.Object) -> equals
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoIcsImpl -> android.support.v4.view.a.b:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoImpl -> android.support.v4.view.a.c:
    void addAction(java.lang.Object,int) -> a
    void setScrollable(java.lang.Object,boolean) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoJellybeanImpl -> android.support.v4.view.a.d:
android.support.v4.view.accessibility.AccessibilityNodeInfoCompat$AccessibilityNodeInfoStubImpl -> android.support.v4.view.a.e:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeInfoCompatIcs -> android.support.v4.view.a.f:
    void addAction(java.lang.Object,int) -> a
    void setClassName(java.lang.Object,java.lang.CharSequence) -> a
    void setScrollable(java.lang.Object,boolean) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat -> android.support.v4.view.a.g:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl IMPL -> a
    java.lang.Object mProvider -> b
    java.lang.Object getProvider() -> a
    android.support.v4.view.accessibility.AccessibilityNodeInfoCompat createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderImpl -> android.support.v4.view.a.h:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl -> android.support.v4.view.a.i:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl$1 -> android.support.v4.view.a.j:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat val$compat -> a
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderJellyBeanImpl this$0 -> b
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
    java.lang.Object createAccessibilityNodeInfo(int) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompat$AccessibilityNodeProviderStubImpl -> android.support.v4.view.a.k:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompat) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean -> android.support.v4.view.a.l:
    java.lang.Object newAccessibilityNodeProviderBridge(android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge) -> a
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$1 -> android.support.v4.view.a.m:
    android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge val$bridge -> a
    android.view.accessibility.AccessibilityNodeInfo createAccessibilityNodeInfo(int) -> createAccessibilityNodeInfo
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> findAccessibilityNodeInfosByText
    boolean performAction(int,int,android.os.Bundle) -> performAction
android.support.v4.view.accessibility.AccessibilityNodeProviderCompatJellyBean$AccessibilityNodeInfoBridge -> android.support.v4.view.a.n:
    java.lang.Object createAccessibilityNodeInfo(int) -> a
    boolean performAction(int,int,android.os.Bundle) -> a
    java.util.List findAccessibilityNodeInfosByText(java.lang.String,int) -> a
android.support.v4.widget.CursorAdapter -> android.support.v4.d.a:
    boolean mDataValid -> a
    boolean mAutoRequery -> b
    android.database.Cursor mCursor -> c
    android.content.Context mContext -> d
    int mRowIDColumn -> e
    android.support.v4.widget.CursorAdapter$ChangeObserver mChangeObserver -> f
    android.database.DataSetObserver mDataSetObserver -> g
    android.support.v4.widget.CursorFilter mCursorFilter -> h
    android.widget.FilterQueryProvider mFilterQueryProvider -> i
    void init(android.content.Context,android.database.Cursor,int) -> a
    android.database.Cursor getCursor() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    boolean hasStableIds() -> hasStableIds
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    android.view.View getDropDownView(int,android.view.View,android.view.ViewGroup) -> getDropDownView
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.widget.Filter getFilter() -> getFilter
    android.widget.FilterQueryProvider getFilterQueryProvider() -> b
    void onContentChanged() -> c
android.support.v4.widget.CursorAdapter$1 -> android.support.v4.d.b:
android.support.v4.widget.CursorAdapter$ChangeObserver -> android.support.v4.d.c:
    android.support.v4.widget.CursorAdapter this$0 -> a
    boolean deliverSelfNotifications() -> deliverSelfNotifications
    void onChange(boolean) -> onChange
android.support.v4.widget.CursorAdapter$MyDataSetObserver -> android.support.v4.d.d:
    android.support.v4.widget.CursorAdapter this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
android.support.v4.widget.CursorFilter -> android.support.v4.d.e:
    android.support.v4.widget.CursorFilter$CursorFilterClient mClient -> a
    java.lang.CharSequence convertResultToString(java.lang.Object) -> convertResultToString
    android.widget.Filter$FilterResults performFiltering(java.lang.CharSequence) -> performFiltering
    void publishResults(java.lang.CharSequence,android.widget.Filter$FilterResults) -> publishResults
android.support.v4.widget.CursorFilter$CursorFilterClient -> android.support.v4.d.f:
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
    android.database.Cursor getCursor() -> a
    void changeCursor(android.database.Cursor) -> a
android.support.v4.widget.EdgeEffectCompat -> android.support.v4.d.g:
    java.lang.Object mEdgeEffect -> a
    android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl IMPL -> b
    void setSize(int,int) -> a
    boolean isFinished() -> a
    void finish() -> b
    boolean onPull(float) -> a
    boolean onRelease() -> c
    boolean draw(android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$BaseEdgeEffectImpl -> android.support.v4.d.h:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectIcsImpl -> android.support.v4.d.i:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompat$EdgeEffectImpl -> android.support.v4.d.j:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.EdgeEffectCompatIcs -> android.support.v4.d.k:
    java.lang.Object newEdgeEffect(android.content.Context) -> a
    void setSize(java.lang.Object,int,int) -> a
    boolean isFinished(java.lang.Object) -> a
    void finish(java.lang.Object) -> b
    boolean onPull(java.lang.Object,float) -> a
    boolean onRelease(java.lang.Object) -> c
    boolean draw(java.lang.Object,android.graphics.Canvas) -> a
android.support.v4.widget.ResourceCursorAdapter -> android.support.v4.d.l:
    int mLayout -> j
    int mDropDownLayout -> k
    android.view.LayoutInflater mInflater -> l
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    android.view.View newDropDownView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> b
android.support.v4.widget.SimpleCursorAdapter -> android.support.v4.d.m:
    int[] mFrom -> j
    int[] mTo -> k
    int mStringConversionColumn -> m
    android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter mCursorToStringConverter -> n
    android.support.v4.widget.SimpleCursorAdapter$ViewBinder mViewBinder -> o
    java.lang.String[] mOriginalFrom -> l
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void setViewImage(android.widget.ImageView,java.lang.String) -> a
    void setViewText(android.widget.TextView,java.lang.String) -> a
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    void findColumns(java.lang.String[]) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
android.support.v4.widget.SimpleCursorAdapter$CursorToStringConverter -> android.support.v4.d.n:
    java.lang.CharSequence convertToString(android.database.Cursor) -> a
android.support.v4.widget.SimpleCursorAdapter$ViewBinder -> android.support.v4.d.o:
    boolean setViewValue(android.view.View,android.database.Cursor,int) -> a
com.handmark.pulltorefresh.library.PullToRefreshAdapterViewBase -> com.a.a.a.a:
    int mSavedLastVisibleIndex -> c
    android.widget.AbsListView$OnScrollListener mOnScrollListener -> d
    com.handmark.pulltorefresh.library.PullToRefreshBase$OnLastItemVisibleListener mOnLastItemVisibleListener -> e
    android.view.View mEmptyView -> f
    android.widget.FrameLayout mRefreshableViewHolder -> g
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void setEmptyView(android.view.View) -> setEmptyView
    void setOnLastItemVisibleListener(com.handmark.pulltorefresh.library.PullToRefreshBase$OnLastItemVisibleListener) -> setOnLastItemVisibleListener
    void setOnScrollListener(android.widget.AbsListView$OnScrollListener) -> setOnScrollListener
    void addRefreshableView(android.content.Context,android.widget.AbsListView) -> a
    int getNumberInternalFooterViews() -> getNumberInternalFooterViews
    int getNumberInternalHeaderViews() -> getNumberInternalHeaderViews
    int getNumberInternalViews() -> getNumberInternalViews
    void handleStyledAttributes(android.content.res.TypedArray) -> a
    boolean isReadyForPullDown() -> a
    boolean isReadyForPullUp() -> b
    boolean isFirstItemVisible() -> j
    boolean isLastItemVisible() -> k
    void addRefreshableView(android.content.Context,android.view.View) -> a
com.handmark.pulltorefresh.library.PullToRefreshBase -> com.a.a.a.b:
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode DEFAULT_MODE -> a
    int mTouchSlop -> c
    float mLastMotionX -> d
    float mLastMotionY -> e
    float mInitialMotionY -> f
    boolean mIsBeingDragged -> g
    int mState -> h
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode mMode -> i
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode mCurrentMode -> j
    android.view.View mRefreshableView -> b
    boolean mPullToRefreshEnabled -> k
    boolean mShowViewWhileRefreshing -> l
    boolean mDisableScrollingWhileRefreshing -> m
    boolean mFilterTouchEvents -> n
    com.handmark.pulltorefresh.library.internal.LoadingLayout mHeaderLayout -> o
    com.handmark.pulltorefresh.library.internal.LoadingLayout mFooterLayout -> p
    int mHeaderHeight -> q
    android.os.Handler mHandler -> r
    com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener mOnRefreshListener -> s
    com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 mOnRefreshListener2 -> t
    com.handmark.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable mCurrentSmoothScrollRunnable -> u
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode -> v
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode getCurrentMode() -> getCurrentMode
    boolean getFilterTouchEvents() -> getFilterTouchEvents
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode getMode() -> getMode
    android.view.View getRefreshableView() -> getRefreshableView
    boolean getShowViewWhileRefreshing() -> getShowViewWhileRefreshing
    boolean isRefreshing() -> c
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    void onRefreshComplete() -> d
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setDisableScrollingWhileRefreshing(boolean) -> setDisableScrollingWhileRefreshing
    void setFilterTouchEvents(boolean) -> setFilterTouchEvents
    void setLastUpdatedLabel(java.lang.CharSequence) -> setLastUpdatedLabel
    void setLongClickable(boolean) -> setLongClickable
    void setMode(com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> setMode
    void setOnRefreshListener(com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener) -> setOnRefreshListener
    void setOnRefreshListener(com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2) -> setOnRefreshListener
    void setPullLabel(java.lang.String) -> setPullLabel
    void setPullLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> a
    void setPullToRefreshEnabled(boolean) -> setPullToRefreshEnabled
    void setRefreshing(boolean) -> setRefreshing
    void setRefreshingLabel(java.lang.String) -> setRefreshingLabel
    void setRefreshingLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> b
    void setReleaseLabel(java.lang.String) -> setReleaseLabel
    void setReleaseLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> c
    void setShowViewWhileRefreshing(boolean) -> setShowViewWhileRefreshing
    void addRefreshableView(android.content.Context,android.view.View) -> a
    android.view.View createRefreshableView(android.content.Context,android.util.AttributeSet) -> a
    com.handmark.pulltorefresh.library.internal.LoadingLayout getFooterLayout() -> getFooterLayout
    int getHeaderHeight() -> getHeaderHeight
    com.handmark.pulltorefresh.library.internal.LoadingLayout getHeaderLayout() -> getHeaderLayout
    int getState() -> getState
    void handleStyledAttributes(android.content.res.TypedArray) -> a
    boolean isReadyForPullDown() -> a
    boolean isReadyForPullUp() -> b
    void onPullToRefresh() -> e
    void onReleaseToRefresh() -> f
    void onRestoreInstanceState(android.os.Parcelable) -> onRestoreInstanceState
    android.os.Parcelable onSaveInstanceState() -> onSaveInstanceState
    void resetHeader() -> g
    void setHeaderScroll(int) -> setHeaderScroll
    void setRefreshingInternal(boolean) -> setRefreshingInternal
    void smoothScrollTo(int) -> a
    void updateUIForMode() -> h
    void init(android.content.Context,android.util.AttributeSet) -> b
    boolean isReadyForPull() -> j
    void measureView(android.view.View) -> a
    boolean pullEvent() -> k
    void refreshLoadingViewsHeight() -> l
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode() -> i
com.handmark.pulltorefresh.library.PullToRefreshBase$Mode -> com.a.a.a.c:
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode PULL_DOWN_TO_REFRESH -> a
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode PULL_UP_TO_REFRESH -> b
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode BOTH -> c
    int mIntValue -> d
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode[] ENUM$VALUES -> e
    boolean canPullDown() -> a
    boolean canPullUp() -> b
    int getIntValue() -> c
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode mapIntToMode(int) -> a
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode[] values() -> values
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode valueOf(java.lang.String) -> valueOf
com.handmark.pulltorefresh.library.PullToRefreshBase$OnLastItemVisibleListener -> com.a.a.a.d:
    void onLastItemVisible() -> a
com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener -> com.a.a.a.e:
    void onRefresh() -> a
com.handmark.pulltorefresh.library.PullToRefreshBase$OnRefreshListener2 -> com.a.a.a.f:
    void onPullDownToRefresh() -> b_
    void onPullUpToRefresh() -> c_
com.handmark.pulltorefresh.library.PullToRefreshBase$SmoothScrollRunnable -> com.a.a.a.g:
    android.view.animation.Interpolator mInterpolator -> b
    int mScrollToY -> c
    int mScrollFromY -> d
    android.os.Handler mHandler -> e
    boolean mContinueRunning -> f
    long mStartTime -> g
    int mCurrentY -> h
    com.handmark.pulltorefresh.library.PullToRefreshBase this$0 -> a
    void run() -> run
    void stop() -> a
com.handmark.pulltorefresh.library.PullToRefreshListView -> com.a.a.a.h:
    com.handmark.pulltorefresh.library.internal.LoadingLayout mHeaderLoadingView -> c
    com.handmark.pulltorefresh.library.internal.LoadingLayout mFooterLoadingView -> d
    android.widget.FrameLayout mLvFooterLoadingFrame -> e
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode -> f
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    void setPullLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> a
    void setRefreshingLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> b
    void setReleaseLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> c
    android.widget.ListView createRefreshableView(android.content.Context,android.util.AttributeSet) -> b
    int getNumberInternalFooterViews() -> getNumberInternalFooterViews
    int getNumberInternalHeaderViews() -> getNumberInternalHeaderViews
    void resetHeader() -> g
    void setRefreshingInternal(boolean) -> setRefreshingInternal
    android.view.View createRefreshableView(android.content.Context,android.util.AttributeSet) -> a
    android.widget.FrameLayout access$1(com.handmark.pulltorefresh.library.PullToRefreshListView) -> a
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode() -> j
com.handmark.pulltorefresh.library.PullToRefreshListView$InternalListView -> com.a.a.a.i:
    boolean mAddedLvFooter -> b
    com.handmark.pulltorefresh.library.PullToRefreshListView this$0 -> a
    void draw(android.graphics.Canvas) -> draw
    android.view.ContextMenu$ContextMenuInfo getContextMenuInfo() -> getContextMenuInfo
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setEmptyView(android.view.View) -> setEmptyView
    void setEmptyViewInternal(android.view.View) -> a
com.handmark.pulltorefresh.library.internal.EmptyViewMethodAccessor -> com.a.a.a.a.a:
    void setEmptyViewInternal(android.view.View) -> a
com.handmark.pulltorefresh.library.internal.LoadingLayout -> com.a.a.a.a.b:
    android.widget.ImageView mHeaderArrow -> a
    android.widget.ProgressBar mHeaderProgress -> b
    android.widget.TextView mHeaderText -> c
    android.widget.TextView mSubHeaderText -> d
    java.lang.String mPullLabel -> e
    java.lang.String mRefreshingLabel -> f
    java.lang.String mReleaseLabel -> g
    com.handmark.pulltorefresh.library.PullToRefreshBase$Mode mMode -> h
    android.view.animation.Animation mRotateAnimation -> i
    boolean mArrowRotated -> j
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode -> k
    void pullToRefresh() -> a
    void refreshing() -> b
    void releaseToRefresh() -> c
    void reset() -> d
    void setPullLabel(java.lang.String) -> setPullLabel
    void setRefreshingLabel(java.lang.String) -> setRefreshingLabel
    void setReleaseLabel(java.lang.String) -> setReleaseLabel
    void setSubHeaderText(java.lang.CharSequence) -> setSubHeaderText
    void setSubTextColor(android.content.res.ColorStateList) -> setSubTextColor
    void setSubTextColor(int) -> setSubTextColor
    void setTextColor(android.content.res.ColorStateList) -> setTextColor
    void setTextColor(int) -> setTextColor
    void rotateArrow() -> f
    int[] $SWITCH_TABLE$com$handmark$pulltorefresh$library$PullToRefreshBase$Mode() -> e
com.pahans.kichibichiya.IImageUploader -> com.pahans.kichibichiya.a:
    android.net.Uri upload(android.net.Uri,java.lang.String) -> a
com.pahans.kichibichiya.IImageUploader$Stub -> com.pahans.kichibichiya.b:
    com.pahans.kichibichiya.IImageUploader asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.pahans.kichibichiya.IImageUploader$Stub$Proxy -> com.pahans.kichibichiya.c:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    android.net.Uri upload(android.net.Uri,java.lang.String) -> a
com.pahans.kichibichiya.ITweetShortener -> com.pahans.kichibichiya.d:
    java.lang.String shorten(java.lang.String,java.lang.String,long) -> a
com.pahans.kichibichiya.ITweetShortener$Stub -> com.pahans.kichibichiya.e:
    com.pahans.kichibichiya.ITweetShortener asInterface(android.os.IBinder) -> a
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.pahans.kichibichiya.ITweetShortener$Stub$Proxy -> com.pahans.kichibichiya.f:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    java.lang.String shorten(java.lang.String,java.lang.String,long) -> a
com.pahans.kichibichiya.ITwidereService -> com.pahans.kichibichiya.g:
    int getHomeTimeline(long[],long[]) -> a
    int getMentions(long[],long[]) -> b
    int getReceivedDirectMessages(long[],long[]) -> c
    int getSentDirectMessages(long[],long[]) -> d
    int getHomeTimelineWithSinceIds(long[],long[],long[]) -> a
    int getMentionsWithSinceIds(long[],long[],long[]) -> b
    int getReceivedDirectMessagesWithSinceIds(long[],long[],long[]) -> c
    int getSentDirectMessagesWithSinceIds(long[],long[],long[]) -> d
    int refreshAll() -> a
    int getLocalTrends(long,int) -> a
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    int destroyStatus(long,long) -> a
    int sendDirectMessage(long,java.lang.String,long,java.lang.String) -> a
    int destroyDirectMessage(long,long) -> b
    int retweetStatus(long,long) -> c
    int createFavorite(long,long) -> d
    int destroyFavorite(long,long) -> e
    int createFriendship(long,long) -> f
    int destroyFriendship(long,long) -> g
    int createUserListSubscription(long,int) -> b
    int destroyUserListSubscription(long,int) -> c
    int createUserList(long,java.lang.String,boolean,java.lang.String) -> a
    int destroyUserList(long,int) -> d
    int createBlock(long,long) -> h
    int destroyBlock(long,long) -> i
    int reportSpam(long,long) -> j
    int createMultiBlock(long,long[]) -> a
    int reportMultiSpam(long,long[]) -> b
    int addUserListMember(long,int,long,java.lang.String) -> a
    int deleteUserListMember(long,int,long) -> a
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    int updateUserListDetails(long,int,boolean,java.lang.String,java.lang.String) -> a
    boolean isHomeTimelineRefreshing() -> b
    boolean isMentionsRefreshing() -> c
    boolean isReceivedDirectMessagesRefreshing() -> d
    boolean isSentDirectMessagesRefreshing() -> e
    boolean isLocalTrendsRefreshing() -> f
    boolean hasActivatedTask() -> g
    boolean test() -> h
    boolean startAutoRefresh() -> i
    void stopAutoRefresh() -> j
    void shutdownService() -> k
    void cancelShutdown() -> l
    void clearNotification(int) -> a
com.pahans.kichibichiya.ITwidereService$Stub -> com.pahans.kichibichiya.h:
    com.pahans.kichibichiya.ITwidereService asInterface(android.os.IBinder) -> a
    android.os.IBinder asBinder() -> asBinder
    boolean onTransact(int,android.os.Parcel,android.os.Parcel,int) -> onTransact
com.pahans.kichibichiya.ITwidereService$Stub$Proxy -> com.pahans.kichibichiya.i:
    android.os.IBinder mRemote -> a
    android.os.IBinder asBinder() -> asBinder
    int getHomeTimeline(long[],long[]) -> a
    int getMentions(long[],long[]) -> b
    int getReceivedDirectMessages(long[],long[]) -> c
    int getSentDirectMessages(long[],long[]) -> d
    int getHomeTimelineWithSinceIds(long[],long[],long[]) -> a
    int getMentionsWithSinceIds(long[],long[],long[]) -> b
    int getReceivedDirectMessagesWithSinceIds(long[],long[],long[]) -> c
    int getSentDirectMessagesWithSinceIds(long[],long[],long[]) -> d
    int refreshAll() -> a
    int getLocalTrends(long,int) -> a
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    int destroyStatus(long,long) -> a
    int sendDirectMessage(long,java.lang.String,long,java.lang.String) -> a
    int destroyDirectMessage(long,long) -> b
    int retweetStatus(long,long) -> c
    int createFavorite(long,long) -> d
    int destroyFavorite(long,long) -> e
    int createFriendship(long,long) -> f
    int destroyFriendship(long,long) -> g
    int createUserListSubscription(long,int) -> b
    int destroyUserListSubscription(long,int) -> c
    int createUserList(long,java.lang.String,boolean,java.lang.String) -> a
    int destroyUserList(long,int) -> d
    int createBlock(long,long) -> h
    int destroyBlock(long,long) -> i
    int reportSpam(long,long) -> j
    int createMultiBlock(long,long[]) -> a
    int reportMultiSpam(long,long[]) -> b
    int addUserListMember(long,int,long,java.lang.String) -> a
    int deleteUserListMember(long,int,long) -> a
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    int updateUserListDetails(long,int,boolean,java.lang.String,java.lang.String) -> a
    boolean isHomeTimelineRefreshing() -> b
    boolean isMentionsRefreshing() -> c
    boolean isReceivedDirectMessagesRefreshing() -> d
    boolean isSentDirectMessagesRefreshing() -> e
    boolean isLocalTrendsRefreshing() -> f
    boolean hasActivatedTask() -> g
    boolean test() -> h
    boolean startAutoRefresh() -> i
    void stopAutoRefresh() -> j
    void shutdownService() -> k
    void cancelShutdown() -> l
    void clearNotification(int) -> a
com.pahans.kichibichiya.R -> com.pahans.kichibichiya.j:
com.pahans.kichibichiya.R$styleable -> com.pahans.kichibichiya.k:
    int[] PullToRefresh -> PullToRefresh
    int PullToRefresh_ptrAdapterViewBackground -> PullToRefresh_ptrAdapterViewBackground
    int PullToRefresh_ptrHeaderBackground -> PullToRefresh_ptrHeaderBackground
    int PullToRefresh_ptrHeaderSubTextColor -> PullToRefresh_ptrHeaderSubTextColor
    int PullToRefresh_ptrHeaderTextColor -> PullToRefresh_ptrHeaderTextColor
    int PullToRefresh_ptrMode -> PullToRefresh_ptrMode
    int[] Twidere -> Twidere
    int Twidere_editTextStyle -> Twidere_editTextStyle
    int Twidere_preferenceTitleStyle -> Twidere_preferenceTitleStyle
    int Twidere_switchStyle -> Twidere_switchStyle
    int[] ViewPagerIndicator -> ViewPagerIndicator
    int ViewPagerIndicator_tabBackground -> ViewPagerIndicator_tabBackground
    int ViewPagerIndicator_tabStyle -> ViewPagerIndicator_tabStyle
    int ViewPagerIndicator_tabTextStyle -> ViewPagerIndicator_tabTextStyle
com.pahans.kichibichiya.activity.AboutActivity -> com.pahans.kichibichiya.activity.AboutActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean isThemeChanged() -> a
    void setHardwareAcceleration() -> b
    void restart() -> c
    void onResume() -> onResume
    void setTheme() -> d
    boolean isHardwareAccelerationChanged() -> e
com.pahans.kichibichiya.activity.AuthorizeActivity -> com.pahans.kichibichiya.activity.AuthorizeActivity:
    android.content.SharedPreferences mPreferences -> m
    android.webkit.WebView mWebView -> n
    android.webkit.WebSettings mWebSettings -> o
    boolean mLoaderInitialized -> p
    java.lang.String mAuthUrl -> q
    twitter4j.auth.RequestToken mRequestToken -> r
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onDestroy() -> onDestroy
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,twitter4j.auth.RequestToken) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void getRequestToken() -> o
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    android.content.SharedPreferences access$1(com.pahans.kichibichiya.activity.AuthorizeActivity) -> a
    java.lang.String access$2(com.pahans.kichibichiya.activity.AuthorizeActivity) -> b
    twitter4j.auth.RequestToken access$3(com.pahans.kichibichiya.activity.AuthorizeActivity) -> c
com.pahans.kichibichiya.activity.AuthorizeActivity$AuthorizationWebViewClient -> com.pahans.kichibichiya.activity.a:
    com.pahans.kichibichiya.activity.AuthorizeActivity this$0 -> a
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onReceivedError(android.webkit.WebView,int,java.lang.String,java.lang.String) -> onReceivedError
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.pahans.kichibichiya.activity.AuthorizeActivity$RequestTokenLoader -> com.pahans.kichibichiya.activity.b:
    java.lang.String mRESTBaseURL -> f
    java.lang.String mSigningRESTBaseURL -> g
    java.lang.String mOAuthBaseURL -> h
    java.lang.String mSigningOAuthBaseURL -> i
    com.pahans.kichibichiya.app.TwidereApplication app -> j
    android.content.SharedPreferences prefs -> k
    android.content.Context context -> l
    twitter4j.auth.RequestToken loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.activity.BaseActivity -> com.pahans.kichibichiya.activity.c:
    boolean mIsDarkTheme -> m
    boolean mIsSolidColorBackground -> n
    boolean mHardwareAccelerated -> o
    com.pahans.kichibichiya.app.TwidereApplication getTwidereApplication() -> g
    boolean isDarkTheme() -> h
    boolean isHardwareAccelerationChanged() -> i
    boolean isSolidColorBackground() -> j
    boolean isThemeChanged() -> k
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void restart() -> l
    void setHardwareAcceleration() -> m
    void setTheme() -> n
com.pahans.kichibichiya.activity.BaseDialogActivity -> com.pahans.kichibichiya.activity.d:
    int mThemeId -> m
    boolean mHardwareAccelerated -> n
    boolean isHardwareAccelerationChanged() -> g
    boolean isThemeChanged() -> h
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void restart() -> i
    void setHardwareAcceleration() -> j
    void setTheme() -> k
com.pahans.kichibichiya.activity.BasePreferenceActivity -> com.pahans.kichibichiya.activity.e:
    boolean mIsDarkTheme -> b
    boolean mIsSolidColorBackground -> c
    boolean mHardwareAccelerated -> d
    boolean isHardwareAccelerationChanged() -> e
    boolean isThemeChanged() -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onResume() -> onResume
    void restart() -> c
    void setHardwareAcceleration() -> b
    void setTheme() -> d
com.pahans.kichibichiya.activity.BrowserActivity -> com.pahans.kichibichiya.activity.BrowserActivity:
    android.net.Uri mUri -> m
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
com.pahans.kichibichiya.activity.ComposeActivity -> com.pahans.kichibichiya.activity.ComposeActivity:
    com.pahans.kichibichiya.util.ServiceInterface mService -> m
    android.location.LocationManager mLocationManager -> n
    android.content.SharedPreferences mPreferences -> o
    android.location.Location mRecentLocation -> p
    android.content.ContentResolver mResolver -> q
    com.twitter.Validator mValidator -> r
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> s
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> t
    com.pahans.kichibichiya.view.ColorView mColorIndicator -> u
    android.widget.EditText mEditText -> v
    android.widget.TextView mTextCount -> w
    android.widget.ImageView mImageThumbnailPreview -> x
    org.mariotaku.menubar.MenuBar mMenuBar -> y
    boolean mIsImageAttached -> z
    boolean mIsPhotoAttached -> A
    long[] mAccountIds -> B
    java.lang.String mText -> C
    android.net.Uri mImageUri -> D
    long mInReplyToStatusId -> E
    java.lang.String mInReplyToScreenName -> F
    java.lang.String mInReplyToName -> G
    boolean mIsQuote -> H
    boolean mUploadUseExtension -> I
    boolean mContentModified -> J
    android.support.v4.app.DialogFragment mUnsavedTweetDialogFragment -> K
    boolean mLoaderInitialized -> L
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
    void onContentChanged() -> onContentChanged
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.graphics.Bitmap) -> a
    void onLocationChanged(android.location.Location) -> onLocationChanged
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onMenuItemClick(android.view.MenuItem) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onProviderDisabled(java.lang.String) -> onProviderDisabled
    void onProviderEnabled(java.lang.String) -> onProviderEnabled
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onStatusChanged(java.lang.String,int,android.os.Bundle) -> onStatusChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void saveToDrafts() -> o
    void onStart() -> onStart
    void onStop() -> onStop
    boolean getLocation() -> p
    void pickImage() -> q
    void reloadAttachedImageThumbnail(java.io.File) -> a
    void send() -> r
    void setMenu(android.view.Menu) -> a
    void takePhoto() -> s
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.activity.ComposeActivity$AttachedImageThumbnailLoader -> com.pahans.kichibichiya.activity.f:
    java.io.File file -> f
    android.graphics.Bitmap loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.activity.ComposeActivity$UnsavedTweetDialogFragment -> com.pahans.kichibichiya.activity.g:
    boolean mIsNavigateUp -> W
    void onActivityCreated(android.os.Bundle) -> d
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
com.pahans.kichibichiya.activity.CreateComposeShortcutActivity -> com.pahans.kichibichiya.activity.CreateComposeShortcutActivity:
    void onCreate(android.os.Bundle) -> onCreate
com.pahans.kichibichiya.activity.CustomTabsActivity -> com.pahans.kichibichiya.activity.CustomTabsActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
com.pahans.kichibichiya.activity.DraftsActivity -> com.pahans.kichibichiya.activity.DraftsActivity:
    android.content.ContentResolver mResolver -> m
    com.pahans.kichibichiya.util.ServiceInterface mService -> n
    android.content.SharedPreferences mPreferences -> o
    com.pahans.kichibichiya.activity.DraftsActivity$DraftsAdapter mAdapter -> p
    android.widget.ListView mListView -> q
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> r
    android.database.Cursor mCursor -> s
    float mTextSize -> t
    com.pahans.kichibichiya.model.DraftItem mDraftItem -> u
    long mSelectedId -> v
    android.content.BroadcastReceiver mStatusReceiver -> w
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onResume() -> onResume
    void onStart() -> onStart
    void onStop() -> onStop
    void composeDraft(com.pahans.kichibichiya.model.DraftItem) -> a
    void sendDraft(com.pahans.kichibichiya.model.DraftItem) -> b
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.activity.DraftsActivity$1 -> com.pahans.kichibichiya.activity.h:
    com.pahans.kichibichiya.activity.DraftsActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.activity.DraftsActivity$DraftsAdapter -> com.pahans.kichibichiya.activity.i:
    java.lang.String[] mFrom -> m
    int[] mTo -> n
    float mTextSize -> o
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void setTextSize(float) -> a
com.pahans.kichibichiya.activity.DualPaneActivity -> com.pahans.kichibichiya.activity.j:
    android.content.SharedPreferences mPreferences -> m
    com.pahans.kichibichiya.view.ExtendedFrameLayout mLeftPaneContainer -> n
    com.pahans.kichibichiya.view.ExtendedFrameLayout mRightPaneContainer -> o
    android.view.ViewGroup mLeftPaneLayer -> p
    android.view.ViewGroup mRightPaneLayer -> q
    android.support.v4.app.Fragment mDetailsFragment -> r
    boolean mDualPaneInPortrait -> s
    boolean mDualPaneInLandscape -> t
    com.pahans.kichibichiya.view.ExtendedFrameLayout$TouchInterceptor mLeftPaneTouchInterceptor -> u
    com.pahans.kichibichiya.view.ExtendedFrameLayout$TouchInterceptor mRightPaneTouchInterceptor -> v
    void bringLeftPaneToFront() -> o
    void bringRightPaneToFront() -> p
    android.support.v4.app.Fragment getDetailsFragment() -> q
    boolean isDualPaneMode() -> r
    void onBackStackChanged() -> a
    void onContentChanged() -> onContentChanged
    void onCreate(android.os.Bundle) -> onCreate
    void showAtPane(int,android.support.v4.app.Fragment,boolean) -> a
    void showFragment(android.support.v4.app.Fragment,boolean) -> a
    void onStart() -> onStart
    int getPaneBackground() -> u
    int getDualPaneLayoutRes() -> s
    int getNormalLayoutRes() -> t
com.pahans.kichibichiya.activity.DualPaneActivity$1 -> com.pahans.kichibichiya.activity.k:
    com.pahans.kichibichiya.activity.DualPaneActivity this$0 -> a
    void onInterceptTouchEvent(android.view.MotionEvent) -> a
com.pahans.kichibichiya.activity.DualPaneActivity$2 -> com.pahans.kichibichiya.activity.l:
    com.pahans.kichibichiya.activity.DualPaneActivity this$0 -> a
    void onInterceptTouchEvent(android.view.MotionEvent) -> a
com.pahans.kichibichiya.activity.EditAPIActivity -> com.pahans.kichibichiya.activity.EditAPIActivity:
    android.widget.EditText mEditRestBaseURL -> m
    android.widget.EditText mEditSigningRESTBaseURL -> n
    android.widget.EditText mEditOAuthBaseURL -> o
    android.widget.EditText mEditSigningOAuthBaseURL -> p
    android.widget.RadioGroup mEditAuthType -> q
    android.widget.RadioButton mButtonOAuth -> r
    android.widget.RadioButton mButtonxAuth -> s
    android.widget.RadioButton mButtonBasic -> t
    android.widget.RadioButton mButtonTwipOMode -> u
    android.widget.Button mSaveButton -> v
    java.lang.String mRestBaseURL -> w
    java.lang.String mSigningRESTBaseURL -> x
    java.lang.String mOAuthBaseURL -> y
    java.lang.String mSigningOAuthBaseURL -> z
    android.widget.TextView mAdvancedAPIConfigLabel -> A
    int mAuthType -> B
    void onCheckedChanged(android.widget.RadioGroup,int) -> onCheckedChanged
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void saveEditedText() -> l
    boolean isThemeChanged() -> h
    void setHardwareAcceleration() -> j
    void restart() -> i
    void onResume() -> onResume
    void setTheme() -> k
    boolean isHardwareAccelerationChanged() -> g
com.pahans.kichibichiya.activity.EditCustomTabActivity -> com.pahans.kichibichiya.activity.EditCustomTabActivity:
    java.lang.String mType -> b
    java.lang.String mName -> c
    java.lang.String mIcon -> d
    java.lang.String mText1 -> e
    java.lang.String mText2 -> f
    long mAccountId -> g
    android.preference.Preference mTabTypePreference -> h
    android.preference.Preference mAccountPreference -> i
    android.preference.Preference mNamePreference -> j
    android.preference.Preference mTabIconPreference -> k
    com.pahans.kichibichiya.activity.EditCustomTabActivity$Text1Preference mText1Preference -> l
    com.pahans.kichibichiya.activity.EditCustomTabActivity$Text2Preference mText2Preference -> m
    boolean mBackPressed -> n
    boolean mHasUnsavedChanges -> o
    android.os.Handler mBackPressedHandler -> p
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean backPressed() -> g
    void setPreferencesByType(java.lang.String) -> a
    boolean isThemeChanged() -> a
    void setHardwareAcceleration() -> b
    void restart() -> c
    void onResume() -> onResume
    void setTheme() -> d
    boolean isHardwareAccelerationChanged() -> e
    long access$9(com.pahans.kichibichiya.activity.EditCustomTabActivity) -> a
    void access$10(com.pahans.kichibichiya.activity.EditCustomTabActivity,long) -> a
    void access$11(com.pahans.kichibichiya.activity.EditCustomTabActivity,boolean) -> a
    void access$12(com.pahans.kichibichiya.activity.EditCustomTabActivity,boolean) -> b
    java.lang.String access$13(com.pahans.kichibichiya.activity.EditCustomTabActivity) -> b
    void access$14(com.pahans.kichibichiya.activity.EditCustomTabActivity,java.lang.String) -> a
    java.lang.String access$15(com.pahans.kichibichiya.activity.EditCustomTabActivity) -> c
    void access$16(com.pahans.kichibichiya.activity.EditCustomTabActivity,java.lang.String) -> b
    java.lang.String access$17(com.pahans.kichibichiya.activity.EditCustomTabActivity) -> d
    void access$18(com.pahans.kichibichiya.activity.EditCustomTabActivity,java.lang.String) -> c
    void access$19(com.pahans.kichibichiya.activity.EditCustomTabActivity,java.lang.String) -> d
    android.preference.Preference access$20(com.pahans.kichibichiya.activity.EditCustomTabActivity) -> e
    java.lang.String access$21(com.pahans.kichibichiya.activity.EditCustomTabActivity) -> f
    void access$22(com.pahans.kichibichiya.activity.EditCustomTabActivity,java.lang.String) -> e
    java.lang.String access$23(com.pahans.kichibichiya.activity.EditCustomTabActivity) -> g
    void access$24(com.pahans.kichibichiya.activity.EditCustomTabActivity,java.lang.String) -> f
com.pahans.kichibichiya.activity.EditCustomTabActivity$AccountPreference -> com.pahans.kichibichiya.activity.m:
    android.app.AlertDialog mDialog -> b
    com.pahans.kichibichiya.model.Account[] mAccounts -> c
    int mSelectedPos -> d
    com.pahans.kichibichiya.activity.EditCustomTabActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.pahans.kichibichiya.activity.EditCustomTabActivity$AdditionalPreference -> com.pahans.kichibichiya.activity.n:
    android.app.AlertDialog mDialog -> b
    android.widget.AutoCompleteTextView mEditText -> c
    com.pahans.kichibichiya.activity.EditCustomTabActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void onTextSet(java.lang.String) -> a
    boolean shouldCompleteUserName() -> a
    java.lang.String getTextToSet() -> b
com.pahans.kichibichiya.activity.EditCustomTabActivity$BackPressedHandler -> com.pahans.kichibichiya.activity.o:
    com.pahans.kichibichiya.activity.EditCustomTabActivity mActivity -> a
    void handleMessage(android.os.Message) -> handleMessage
com.pahans.kichibichiya.activity.EditCustomTabActivity$NamePreference -> com.pahans.kichibichiya.activity.p:
    com.pahans.kichibichiya.activity.EditCustomTabActivity this$0 -> b
    java.lang.String getTextToSet() -> b
    void onTextSet(java.lang.String) -> a
com.pahans.kichibichiya.activity.EditCustomTabActivity$TabIconPreference -> com.pahans.kichibichiya.activity.q:
    android.app.AlertDialog mDialog -> b
    java.lang.String[] mKeys -> c
    java.lang.String[] mNames -> d
    int mSelectedPos -> e
    com.pahans.kichibichiya.activity.EditCustomTabActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.pahans.kichibichiya.activity.EditCustomTabActivity$TabTypePreference -> com.pahans.kichibichiya.activity.r:
    android.app.AlertDialog mDialog -> b
    java.lang.String[] mKeys -> c
    java.lang.String[] mNames -> d
    int mSelectedPos -> e
    com.pahans.kichibichiya.activity.EditCustomTabActivity this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.pahans.kichibichiya.activity.EditCustomTabActivity$Text1Preference -> com.pahans.kichibichiya.activity.s:
    boolean mShouldCompleteUserName -> b
    com.pahans.kichibichiya.activity.EditCustomTabActivity this$0 -> c
    java.lang.String getTextToSet() -> b
    void onTextSet(java.lang.String) -> a
    void setShouldCompleteUserName(boolean) -> a
    boolean shouldCompleteUserName() -> a
com.pahans.kichibichiya.activity.EditCustomTabActivity$Text2Preference -> com.pahans.kichibichiya.activity.t:
    com.pahans.kichibichiya.activity.EditCustomTabActivity this$0 -> c
    java.lang.String getTextToSet() -> b
    void onTextSet(java.lang.String) -> a
    boolean shouldCompleteUserName() -> a
com.pahans.kichibichiya.activity.ExtensionsListActivity -> com.pahans.kichibichiya.activity.ExtensionsListActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
com.pahans.kichibichiya.activity.FilePickerActivity -> com.pahans.kichibichiya.activity.FilePickerActivity:
    java.io.File mCurrentDirectory -> m
    android.widget.ListView mListView -> n
    com.pahans.kichibichiya.activity.FilePickerActivity$FilesAdapter mAdapter -> o
    void onBackPressed() -> onBackPressed
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.activity.FilePickerActivity$FilesAdapter -> com.pahans.kichibichiya.activity.u:
    android.view.LayoutInflater mInflater -> a
    android.content.Context mContext -> b
    java.util.List mData -> c
    int getCount() -> getCount
    java.io.File getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.activity.FilePickerActivity$FilesLoader -> com.pahans.kichibichiya.activity.v:
    java.io.File path -> f
    java.util.regex.Pattern extensions_regex -> g
    java.util.Comparator NAME_COMPARATOR -> h
    java.util.List loadInBackground() -> f
    void onStartLoading() -> g
    void onStopLoading() -> h
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.activity.FilePickerActivity$FilesLoader$1 -> com.pahans.kichibichiya.activity.w:
    int compare(java.io.File,java.io.File) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.activity.FileSaveAsActivity -> com.pahans.kichibichiya.activity.FileSaveAsActivity:
    java.io.File mCurrentDirectory -> m
    java.io.File mSourceFile -> n
    android.widget.ListView mListView -> o
    com.pahans.kichibichiya.activity.FileSaveAsActivity$DirectoriesAdapter mAdapter -> p
    android.widget.EditText mEditFileName -> q
    java.lang.String mDefaultFileName -> r
    java.lang.String mFileName -> s
    android.support.v4.app.DialogFragment mOverwriteComfirmFragment -> t
    android.support.v4.app.DialogFragment mSaveProgressFragment -> u
    com.pahans.kichibichiya.activity.FileSaveAsActivity$SaveFileTask mSaveFileTask -> v
    android.text.InputFilter VALID_FILENAME_FILTER -> w
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onBackPressed() -> onBackPressed
    void onClick(android.content.DialogInterface,int) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    android.support.v4.app.DialogFragment access$1(com.pahans.kichibichiya.activity.FileSaveAsActivity) -> a
com.pahans.kichibichiya.activity.FileSaveAsActivity$1 -> com.pahans.kichibichiya.activity.x:
    java.lang.CharSequence filter(java.lang.CharSequence,int,int,android.text.Spanned,int,int) -> filter
com.pahans.kichibichiya.activity.FileSaveAsActivity$DirectoriesAdapter -> com.pahans.kichibichiya.activity.y:
    android.view.LayoutInflater mInflater -> a
    android.content.Context mContext -> b
    java.util.List mData -> c
    int getCount() -> getCount
    java.io.File getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.activity.FileSaveAsActivity$DirectoriesLoader -> com.pahans.kichibichiya.activity.z:
    java.io.File path -> f
    java.util.Comparator NAME_COMPARATOR -> g
    java.util.List loadInBackground() -> f
    void onStartLoading() -> g
    void onStopLoading() -> h
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.activity.FileSaveAsActivity$DirectoriesLoader$1 -> com.pahans.kichibichiya.activity.aa:
    int compare(java.io.File,java.io.File) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.activity.FileSaveAsActivity$OverwriteComfirmFragment -> com.pahans.kichibichiya.activity.ab:
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
com.pahans.kichibichiya.activity.FileSaveAsActivity$SaveFileTask -> com.pahans.kichibichiya.activity.ac:
    java.io.File src -> b
    java.io.File dst -> c
    com.pahans.kichibichiya.activity.FileSaveAsActivity this$0 -> a
    java.lang.Boolean doInBackground(java.lang.Void[]) -> a
    void onCancelled() -> onCancelled
    void onPostExecute(java.lang.Boolean) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.activity.FileSaveAsActivity$SaveProgressFragment -> com.pahans.kichibichiya.activity.ad:
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
com.pahans.kichibichiya.activity.FiltersActivity -> com.pahans.kichibichiya.activity.FiltersActivity:
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> m
    android.widget.ArrayAdapter mAdapter -> n
    android.widget.Spinner mSpinner -> o
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
com.pahans.kichibichiya.activity.FiltersActivity$TabSpec -> com.pahans.kichibichiya.activity.ae:
    java.lang.Class cls -> a
    java.lang.String name -> b
    java.lang.String toString() -> toString
com.pahans.kichibichiya.activity.HomeActivity -> com.pahans.kichibichiya.activity.HomeActivity:
    android.content.SharedPreferences mPreferences -> m
    com.pahans.kichibichiya.util.ServiceInterface mService -> n
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> o
    android.app.NotificationManager mNotificationManager -> p
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> q
    com.pahans.kichibichiya.adapter.TabsAdapter mAdapter -> r
    com.pahans.kichibichiya.view.ExtendedViewPager mViewPager -> s
    android.widget.ImageButton mComposeButton -> t
    com.pahans.kichibichiya.view.TabPageIndicator mIndicator -> u
    android.widget.ProgressBar mProgress -> v
    boolean mProgressBarIndeterminateVisible -> w
    boolean mIsNavigateToDefaultAccount -> x
    boolean mDisplayAppIcon -> y
    java.util.ArrayList mCustomTabs -> z
    android.content.BroadcastReceiver mStateReceiver -> A
    boolean mShowHomeTab -> B
    boolean mShowMentionsTab -> C
    boolean mShowMessagesTab -> D
    boolean mShowAccountsTab -> E
    boolean checkDefaultAccountSet() -> u
    void onBackStackChanged() -> a
    void onClick(android.view.View) -> onClick
    void onContentChanged() -> onContentChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPageScrolled(int,float,int) -> a
    void onPageScrollStateChanged(int) -> b
    void onPageSelected(int) -> a_
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onResume() -> onResume
    void setSupportProgressBarIndeterminateVisibility(boolean) -> b
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onDestroy() -> onDestroy
    void onNewIntent(android.content.Intent) -> onNewIntent
    void onStart() -> onStart
    void onStop() -> onStop
    void setPagingEnabled(boolean) -> c
    void initTabs(java.util.Collection) -> a
    boolean isTabsChanged(java.util.List) -> a
    int getDualPaneLayoutRes() -> s
    int getNormalLayoutRes() -> t
    boolean access$0(com.pahans.kichibichiya.activity.HomeActivity) -> a
com.pahans.kichibichiya.activity.HomeActivity$1 -> com.pahans.kichibichiya.activity.af:
    com.pahans.kichibichiya.activity.HomeActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.activity.HostMappingActivity -> com.pahans.kichibichiya.activity.HostMappingActivity:
    android.widget.ListView mListView -> m
    com.pahans.kichibichiya.activity.HostMappingActivity$HostMappingAdapter mAdapter -> n
    android.content.SharedPreferences mPreferences -> o
    android.support.v4.app.DialogFragment mDialogFragment -> p
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void reload() -> o
com.pahans.kichibichiya.activity.HostMappingActivity$AddMappingDialogFragment -> com.pahans.kichibichiya.activity.ag:
    android.widget.EditText mEditHost -> W
    android.widget.EditText mEditAddress -> X
    java.lang.String mHost -> Y
    java.lang.String mAddress -> Z
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onSaveInstanceState(android.os.Bundle) -> e
com.pahans.kichibichiya.activity.HostMappingActivity$HostMappingAdapter -> com.pahans.kichibichiya.activity.ah:
    android.content.SharedPreferences mPreferences -> a
    android.view.LayoutInflater mInflater -> b
    java.util.Map mData -> c
    java.lang.String[] mKeys -> d
    int getCount() -> getCount
    java.lang.String getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void reload() -> a
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.activity.ImageViewerActivity -> com.pahans.kichibichiya.activity.ImageViewerActivity:
    com.pahans.kichibichiya.view.ImageViewer mImageView -> m
    android.view.View mProgress -> n
    android.widget.ImageButton mRefreshStopSaveButton -> o
    boolean mImageLoaded -> p
    java.io.File mImageFile -> q
    java.lang.String mUserAgent -> r
    twitter4j.http.HostAddressResolver mResolver -> s
    void onClick(android.view.View) -> onClick
    void onContentChanged() -> onContentChanged
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.activity.ImageViewerActivity$ImageLoader$Result) -> a
    void onCreate(android.os.Bundle) -> onCreate
    void onDestroy() -> onDestroy
    void onNewIntent(android.content.Intent) -> onNewIntent
    void loadImage(boolean) -> b
    void saveImage() -> g
    void stopLoading() -> h
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.activity.ImageViewerActivity$ImageLoader -> com.pahans.kichibichiya.activity.ai:
    android.net.Uri uri -> f
    android.content.Context context -> g
    java.lang.String user_agent -> h
    twitter4j.http.HostAddressResolver resolver -> i
    java.io.File mCacheDir -> j
    com.pahans.kichibichiya.activity.ImageViewerActivity$ImageLoader$Result loadInBackground() -> f
    void onStartLoading() -> g
    android.graphics.Bitmap decodeFile(java.io.File) -> a
    java.lang.String getURLFilename(java.lang.String) -> a
    void init() -> v
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.activity.ImageViewerActivity$ImageLoader$Result -> com.pahans.kichibichiya.activity.aj:
    android.graphics.Bitmap bitmap -> a
    java.io.File file -> b
    java.lang.Exception exception -> c
com.pahans.kichibichiya.activity.InternalSettingsActivity -> com.pahans.kichibichiya.activity.InternalSettingsActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void setTheme() -> a
com.pahans.kichibichiya.activity.InternalSettingsDetailsActivity -> com.pahans.kichibichiya.activity.InternalSettingsDetailsActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onKeyUp(int,android.view.KeyEvent) -> onKeyUp
    void setTheme() -> a
com.pahans.kichibichiya.activity.LinkHandlerActivity -> com.pahans.kichibichiya.activity.LinkHandlerActivity:
    android.support.v4.app.Fragment mFragment -> m
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onStart() -> onStart
    boolean setFragment(android.net.Uri) -> a
com.pahans.kichibichiya.activity.MapViewerActivity -> com.pahans.kichibichiya.activity.MapViewerActivity:
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    boolean isNativeMapSupported() -> g
com.pahans.kichibichiya.activity.MultiSelectActivity -> com.pahans.kichibichiya.activity.ak:
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> m
    com.pahans.kichibichiya.util.ServiceInterface mService -> n
    org.mariotaku.actionbarcompat.ActionMode mActionMode -> o
    android.content.BroadcastReceiver mStateReceiver -> p
    boolean onActionItemClicked(org.mariotaku.actionbarcompat.ActionMode,android.view.MenuItem) -> a
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateActionMode(org.mariotaku.actionbarcompat.ActionMode,android.view.Menu) -> a
    void onDestroyActionMode(org.mariotaku.actionbarcompat.ActionMode) -> a
    boolean onPrepareActionMode(org.mariotaku.actionbarcompat.ActionMode,android.view.Menu) -> b
    void onStart() -> onStart
    void onStop() -> onStop
    void updateMultiSelectCount() -> u
    void updateMultiSelectState() -> x
    long getFirstSelectAccountId(com.pahans.kichibichiya.util.NoDuplicatesLinkedList) -> a
    long[] getSelectedUserIds(com.pahans.kichibichiya.util.NoDuplicatesLinkedList) -> b
    void access$0(com.pahans.kichibichiya.activity.MultiSelectActivity) -> a
    void access$1(com.pahans.kichibichiya.activity.MultiSelectActivity) -> b
com.pahans.kichibichiya.activity.MultiSelectActivity$1 -> com.pahans.kichibichiya.activity.al:
    com.pahans.kichibichiya.activity.MultiSelectActivity this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.activity.NativeMapActivity -> com.pahans.kichibichiya.activity.NativeMapActivity:
    com.google.android.maps.MapView mMapView -> a
    void center() -> a
    boolean isRouteDisplayed() -> isRouteDisplayed
    void onCreate(android.os.Bundle) -> onCreate
com.pahans.kichibichiya.activity.NativeMapActivity$Itemization -> com.pahans.kichibichiya.activity.am:
    java.util.ArrayList mOverlays -> a
    void addOverlay(com.google.android.maps.OverlayItem) -> a
    int size() -> size
    com.google.android.maps.OverlayItem createItem(int) -> createItem
    android.graphics.drawable.Drawable boundCenterBottom(android.graphics.drawable.Drawable) -> a
com.pahans.kichibichiya.activity.SearchActivity -> com.pahans.kichibichiya.activity.SearchActivity:
    org.mariotaku.actionbarcompat.ActionBar mActionBar -> m
    com.pahans.kichibichiya.adapter.TabsAdapter mAdapter -> n
    android.net.Uri mData -> o
    android.os.Bundle mArguments -> p
    com.pahans.kichibichiya.view.TabPageIndicator mIndicator -> q
    com.pahans.kichibichiya.view.ExtendedViewPager mViewPager -> r
    boolean mDisplayAppIcon -> s
    android.widget.ProgressBar mProgress -> t
    void onBackStackChanged() -> a
    void onContentChanged() -> onContentChanged
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void setSupportProgressBarIndeterminateVisibility(boolean) -> b
    void setPagingEnabled(boolean) -> c
    int getDualPaneLayoutRes() -> s
    int getNormalLayoutRes() -> t
com.pahans.kichibichiya.activity.SelectAccountActivity -> com.pahans.kichibichiya.activity.SelectAccountActivity:
    android.widget.ListView mListView -> m
    com.pahans.kichibichiya.adapter.AccountsAdapter mAdapter -> n
    java.util.List mSelectedIds -> o
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    boolean isThemeChanged() -> h
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void setHardwareAcceleration() -> j
    void restart() -> i
    void onResume() -> onResume
    void setTheme() -> k
    boolean isHardwareAccelerationChanged() -> g
com.pahans.kichibichiya.activity.SetColorActivity -> com.pahans.kichibichiya.activity.SetColorActivity:
    android.widget.GridView mColorsGrid -> o
    int mCustomizedColor -> p
    java.util.List mColors -> m
    com.pahans.kichibichiya.fragment.ColorPickerDialogFragment mFragment -> n
    void onColorSelected(int) -> b
    void onCreate(android.os.Bundle) -> onCreate
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void finishSelecting(int) -> c
    void showDialog() -> l
    boolean isThemeChanged() -> h
    void setHardwareAcceleration() -> j
    void restart() -> i
    void onResume() -> onResume
    void setTheme() -> k
    boolean isHardwareAccelerationChanged() -> g
    int access$7(com.pahans.kichibichiya.activity.SetColorActivity) -> a
com.pahans.kichibichiya.activity.SetColorActivity$ColorsAdapter -> com.pahans.kichibichiya.activity.an:
    android.content.Context mContext -> b
    com.pahans.kichibichiya.activity.SetColorActivity this$0 -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.pahans.kichibichiya.activity.SettingsActivity -> com.pahans.kichibichiya.activity.SettingsActivity:
    android.content.SharedPreferences mPreferences -> m
    com.pahans.kichibichiya.fragment.ActivityHostFragment mFragment -> n
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onPostCreate(android.os.Bundle) -> onPostCreate
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
com.pahans.kichibichiya.activity.SettingsDetailsActivity -> com.pahans.kichibichiya.activity.SettingsDetailsActivity:
    void onCreate(android.os.Bundle) -> onCreate
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    boolean isThemeChanged() -> a
    void setHardwareAcceleration() -> b
    void restart() -> c
    void onResume() -> onResume
    void setTheme() -> d
    boolean isHardwareAccelerationChanged() -> e
com.pahans.kichibichiya.activity.SignInActivity -> com.pahans.kichibichiya.activity.SignInActivity:
    java.lang.String mRESTBaseURL -> m
    java.lang.String mSigningRESTBaseURL -> n
    java.lang.String mOAuthBaseURL -> o
    java.lang.String mSigningOAuthBaseURL -> p
    java.lang.String mUsername -> q
    java.lang.String mPassword -> r
    int mAuthType -> s
    java.lang.Integer mUserColor -> t
    long mLoggedId -> u
    boolean mBackPressed -> v
    boolean mLoaderInitialized -> w
    android.widget.EditText mEditUsername -> x
    android.widget.EditText mEditPassword -> y
    android.widget.Button mSignInButton -> z
    android.widget.Button mSignUpButton -> A
    android.widget.Button mBrowserSignInButton -> B
    android.widget.LinearLayout mSigninSignup -> C
    android.widget.LinearLayout mUsernamePassword -> D
    android.widget.ImageButton mSetColorButton -> E
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> F
    android.content.SharedPreferences mPreferences -> G
    android.content.ContentResolver mResolver -> H
    android.os.Handler mBackPressedHandler -> I
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onActivityResult(int,int,android.content.Intent) -> onActivityResult
    void onBackPressed() -> onBackPressed
    void onClick(android.view.View) -> onClick
    void onContentChanged() -> onContentChanged
    void onCreate(android.os.Bundle) -> onCreate
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onDestroy() -> onDestroy
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.activity.SignInActivity$LoginResponse) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> onOptionsItemSelected
    void onSaveInstanceState(android.os.Bundle) -> onSaveInstanceState
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void doLogin(boolean,android.os.Bundle) -> a
    twitter4j.conf.Configuration getConfiguration() -> o
    void saveEditedText() -> p
    void setSignInButton() -> q
    void setUserColorButton() -> r
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void access$1(com.pahans.kichibichiya.activity.SignInActivity,boolean) -> a
com.pahans.kichibichiya.activity.SignInActivity$1 -> com.pahans.kichibichiya.activity.ao:
    com.pahans.kichibichiya.activity.SignInActivity this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.pahans.kichibichiya.activity.SignInActivity$AbstractUserCredentialsLoader -> com.pahans.kichibichiya.activity.ap:
    twitter4j.conf.Configuration conf -> f
    int analyseUserProfileColor(twitter4j.User) -> a
com.pahans.kichibichiya.activity.SignInActivity$BrowserSigninUserCredentialsLoader -> com.pahans.kichibichiya.activity.aq:
    twitter4j.conf.Configuration conf -> f
    java.lang.String request_token -> g
    java.lang.String request_token_secret -> h
    java.lang.String oauth_verifier -> i
    java.lang.Integer user_color -> j
    android.content.Context context -> k
    com.pahans.kichibichiya.activity.SignInActivity$LoginResponse loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.activity.SignInActivity$LoginResponse -> com.pahans.kichibichiya.activity.ar:
    boolean already_logged_in -> a
    boolean succeed -> b
    java.lang.Exception exception -> c
    twitter4j.conf.Configuration conf -> d
    java.lang.String basic_password -> e
    twitter4j.auth.AccessToken access_token -> f
    twitter4j.User user -> g
    int auth_type -> h
    int color -> i
com.pahans.kichibichiya.activity.SignInActivity$UserCredentialsLoader -> com.pahans.kichibichiya.activity.as:
    twitter4j.conf.Configuration conf -> f
    java.lang.String username -> g
    java.lang.String password -> h
    int auth_type -> i
    java.lang.Integer user_color -> j
    android.content.Context context -> k
    com.pahans.kichibichiya.activity.SignInActivity$LoginResponse loadInBackground() -> f
    void onStartLoading() -> g
    com.pahans.kichibichiya.activity.SignInActivity$LoginResponse authBasic() -> v
    com.pahans.kichibichiya.activity.SignInActivity$LoginResponse authOAuth() -> w
    com.pahans.kichibichiya.activity.SignInActivity$LoginResponse authTwipOMode() -> x
    com.pahans.kichibichiya.activity.SignInActivity$LoginResponse authxAuth() -> y
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.adapter.AccountsAdapter -> com.pahans.kichibichiya.a.a:
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> m
    android.content.SharedPreferences mPreferences -> n
    int mUserColorIdx -> o
    int mProfileImageIdx -> p
    int mScreenNameIdx -> q
    long mDefaultAccountId -> r
    boolean mDisplayHiResProfileImage -> s
    int mAccountIdIdx -> t
    boolean mMultiSelectEnabled -> u
    android.util.SparseBooleanArray mCheckedItems -> v
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    long getAccountIdAt(int) -> a
    boolean isChecked(int) -> b
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void notifyDataSetChanged() -> notifyDataSetChanged
    void setItemChecked(int,boolean) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
com.pahans.kichibichiya.adapter.CursorStatusesAdapter -> com.pahans.kichibichiya.a.b:
    boolean mDisplayProfileImage -> m
    boolean mDisplayImagePreview -> n
    boolean mShowAccountColor -> o
    boolean mShowAbsoluteTime -> p
    boolean mGapDisallowed -> q
    boolean mMultiSelectEnabled -> r
    boolean mMentionsHighlightDisabled -> s
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> t
    com.pahans.kichibichiya.util.LazyImageLoader mPreviewImageLoader -> u
    float mTextSize -> v
    android.content.Context mContext -> w
    com.pahans.kichibichiya.model.StatusCursorIndices mIndices -> x
    java.util.ArrayList mSelectedStatusIds -> y
    boolean mDisplayHiResProfileImage -> z
    int mNameDisplayOption -> A
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    long findItemIdByPosition(int) -> a
    int findItemPositionByStatusId(long) -> a
    android.database.Cursor getItem(int) -> b
    com.pahans.kichibichiya.model.ParcelableStatus getStatus(int) -> c
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void onClick(android.view.View) -> onClick
    void setDisplayImagePreview(boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setMentionsHightlightDisabled(boolean) -> c
    void setMultiSelectEnabled(boolean) -> d
    void setNameDisplayOption(java.lang.String) -> a
    void setShowAbsoluteTime(boolean) -> e
    void setShowAccountColor(boolean) -> f
    void setTextSize(float) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.adapter.DirectMessagesConversationAdapter -> com.pahans.kichibichiya.a.c:
    boolean mDisplayProfileImage -> m
    com.pahans.kichibichiya.util.LazyImageLoader mImageLoader -> n
    float mTextSize -> o
    android.content.Context mContext -> p
    com.pahans.kichibichiya.model.DirectMessageCursorIndices mIndices -> q
    boolean mDisplayHiResProfileImage -> r
    int mNameDisplayOption -> s
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    com.pahans.kichibichiya.model.ParcelableDirectMessage findItem(long) -> a
    com.pahans.kichibichiya.model.ParcelableDirectMessage getDirectMessage(int) -> a
    android.database.Cursor getItem(int) -> b
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void onClick(android.view.View) -> onClick
    void setDisplayProfileImage(boolean) -> b
    void setNameDisplayOption(java.lang.String) -> a
    void setTextSize(float) -> a
    android.database.Cursor swapCursor(android.database.Cursor) -> b
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.adapter.DirectMessagesEntryAdapter -> com.pahans.kichibichiya.a.d:
    boolean mDisplayProfileImage -> m
    boolean mShowAccountColor -> n
    boolean mShowAbsoluteTime -> o
    boolean mFastProcessingEnabled -> p
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> q
    float mTextSize -> r
    boolean mDisplayHiResProfileImage -> s
    int mNameDisplayOption -> t
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    long getAccountId(int) -> a
    long getConversationId(int) -> b
    android.view.View newView(android.content.Context,android.database.Cursor,android.view.ViewGroup) -> a
    void setDisplayProfileImage(boolean) -> b
    void setNameDisplayOption(java.lang.String) -> a
    void setShowAbsoluteTime(boolean) -> a
    void setShowAccountColor(boolean) -> c
    void setTextSize(float) -> a
com.pahans.kichibichiya.adapter.ExtensionsAdapter -> com.pahans.kichibichiya.a.e:
    android.content.pm.PackageManager pm -> a
    android.content.Context context -> b
    java.util.List mData -> c
    int getCount() -> getCount
    android.content.pm.ResolveInfo getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.adapter.ListActionAdapter -> com.pahans.kichibichiya.a.f:
    com.pahans.kichibichiya.model.ListAction findItem(long) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
com.pahans.kichibichiya.adapter.ParcelableStatusesAdapter -> com.pahans.kichibichiya.a.g:
    boolean mDisplayProfileImage -> a
    boolean mDisplayImagePreview -> b
    boolean mShowAccountColor -> c
    boolean mShowAbsoluteTime -> d
    boolean mGapDisallowed -> e
    boolean mMultiSelectEnabled -> f
    boolean mMentionsHighlightDisabled -> g
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> h
    com.pahans.kichibichiya.util.LazyImageLoader mPreviewImageLoader -> i
    float mTextSize -> j
    android.content.Context mContext -> k
    android.view.LayoutInflater mInflater -> l
    java.util.ArrayList mSelectedStatusIds -> m
    boolean mDisplayHiResProfileImage -> n
    com.pahans.kichibichiya.util.NoDuplicatesArrayList mData -> o
    int mNameDisplayOption -> p
    void add(com.pahans.kichibichiya.model.ParcelableStatus) -> a
    void clear() -> a
    long findItemIdByPosition(int) -> a
    int findItemPositionByStatusId(long) -> a
    int getCount() -> getCount
    com.pahans.kichibichiya.model.ParcelableStatus getItem(int) -> b
    long getItemId(int) -> getItemId
    com.pahans.kichibichiya.model.ParcelableStatus getStatus(int) -> c
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void onClick(android.view.View) -> onClick
    void setData(java.util.List) -> a
    void setDisplayImagePreview(boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setGapDisallowed(boolean) -> c
    void setMentionsHightlightDisabled(boolean) -> g
    void setMultiSelectEnabled(boolean) -> d
    void setNameDisplayOption(java.lang.String) -> a
    void setShowAbsoluteTime(boolean) -> e
    void setShowAccountColor(boolean) -> f
    void setTextSize(float) -> a
    void sort(java.util.Comparator) -> a
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.adapter.SeparatedListAdapter -> com.pahans.kichibichiya.a.h:
    java.util.Map mSections -> a
    android.widget.ArrayAdapter mHeaders -> b
    void addSection(java.lang.String,android.widget.Adapter) -> a
    java.util.ArrayList getAdapters() -> a
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getViewTypeCount() -> getViewTypeCount
    boolean isEnabled(int) -> isEnabled
    void notifyDataSetChanged() -> notifyDataSetChanged
com.pahans.kichibichiya.adapter.TabsAdapter -> com.pahans.kichibichiya.a.i:
    java.util.ArrayList mTabs -> a
    android.content.Context mContext -> b
    com.pahans.kichibichiya.view.TabPageIndicator mIndicator -> c
    boolean mDisplayLabel -> d
    void addTab(java.lang.Class,android.os.Bundle,java.lang.String,java.lang.Integer,int) -> a
    void addTab(com.pahans.kichibichiya.model.TabSpec) -> a
    void addTabs(java.util.Collection) -> a
    void clear() -> d
    int getCount() -> b
    android.graphics.drawable.Drawable getIcon(int) -> c
    android.support.v4.app.Fragment getItem(int) -> a
    java.lang.String getTitle(int) -> d
    void notifyDataSetChanged() -> c
    void onPageReselected(int) -> e
    void onPageSelected(int) -> f
    boolean onTabLongClick(int) -> g
    void setDisplayLabel(boolean) -> a
com.pahans.kichibichiya.adapter.UserAutoCompleteAdapter -> com.pahans.kichibichiya.a.j:
    android.database.Cursor mCursor -> m
    android.content.ContentResolver mResolver -> n
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> o
    android.content.SharedPreferences mPreferences -> p
    java.lang.String[] FROM -> q
    int[] TO -> r
    int mProfileImageUrlIdx -> s
    int mScreenNameIdx -> t
    boolean mCursorClosed -> u
    boolean mDisplayProfileImage -> v
    boolean mDisplayHiResProfileImage -> w
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    void closeCursor() -> d
    java.lang.CharSequence convertToString(android.database.Cursor) -> c
    boolean isCursorClosed() -> e
    android.database.Cursor runQueryOnBackgroundThread(java.lang.CharSequence) -> a
com.pahans.kichibichiya.adapter.UserListsAdapter -> com.pahans.kichibichiya.a.k:
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> a
    boolean mDisplayProfileImage -> b
    boolean mDisplayHiResProfileImage -> c
    float mTextSize -> d
    com.pahans.kichibichiya.model.ParcelableUserList findItemByUserId(int) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    void setData(java.util.List,boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setNameDisplayOption(java.lang.String) -> a
    void setTextSize(float) -> a
com.pahans.kichibichiya.adapter.UsersAdapter -> com.pahans.kichibichiya.a.l:
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> a
    boolean mDisplayProfileImage -> b
    boolean mShowAccountColor -> c
    boolean mMultiSelectEnabled -> d
    boolean mDisplayHiResProfileImage -> e
    float mTextSize -> f
    java.util.ArrayList mSelectedUserIds -> g
    android.content.Context mContext -> h
    int mNameDisplayOption -> i
    com.pahans.kichibichiya.model.ParcelableUser findItem(long) -> a
    com.pahans.kichibichiya.model.ParcelableUser findItemByUserId(long) -> b
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    void setData(java.util.List,boolean) -> a
    void setDisplayProfileImage(boolean) -> b
    void setMultiSelectEnabled(boolean) -> a
    void setNameDisplayOption(java.lang.String) -> a
    void setShowAccountColor(boolean) -> c
    void setTextSize(float) -> a
com.pahans.kichibichiya.app.TwidereApplication -> com.pahans.kichibichiya.app.TwidereApplication:
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> a
    com.pahans.kichibichiya.util.LazyImageLoader mPreviewImageLoader -> b
    com.pahans.kichibichiya.util.AsyncTaskManager mAsyncTaskManager -> c
    android.content.SharedPreferences mPreferences -> d
    com.pahans.kichibichiya.util.ServiceInterface mServiceInterface -> e
    boolean mMultiSelectActive -> f
    com.pahans.kichibichiya.app.TwidereApplication$ItemsList mSelectedItems -> g
    java.util.ArrayList mSelectedStatusIds -> h
    java.util.ArrayList mSelectedUserIds -> i
    twitter4j.http.HostAddressResolver mResolver -> j
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> a
    twitter4j.http.HostAddressResolver getHostAddressResolver() -> b
    com.pahans.kichibichiya.util.LazyImageLoader getPreviewImageLoader() -> c
    com.pahans.kichibichiya.util.LazyImageLoader getProfileImageLoader() -> d
    com.pahans.kichibichiya.app.TwidereApplication$ItemsList getSelectedItems() -> e
    java.util.ArrayList getSelectedStatusIds() -> f
    java.util.ArrayList getSelectedUserIds() -> g
    com.pahans.kichibichiya.util.ServiceInterface getServiceInterface() -> h
    boolean isMultiSelectActive() -> i
    void onCreate() -> onCreate
    void onLowMemory() -> onLowMemory
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    void reloadConnectivitySettings() -> j
    void startMultiSelect() -> k
    void stopMultiSelect() -> l
    com.pahans.kichibichiya.app.TwidereApplication getInstance(android.content.Context) -> a
    java.util.ArrayList access$0(com.pahans.kichibichiya.app.TwidereApplication) -> a
    java.util.ArrayList access$1(com.pahans.kichibichiya.app.TwidereApplication) -> b
com.pahans.kichibichiya.app.TwidereApplication$ItemsList -> com.pahans.kichibichiya.app.a:
    com.pahans.kichibichiya.app.TwidereApplication this$0 -> a
    boolean add(java.lang.Object) -> add
    void clear() -> clear
    boolean remove(java.lang.Object) -> remove
com.pahans.kichibichiya.fragment.APIUpgradeConfirmDialog -> com.pahans.kichibichiya.b.a:
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
com.pahans.kichibichiya.fragment.AccountsFragment -> com.pahans.kichibichiya.b.b:
    android.content.SharedPreferences mPreferences -> i
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> W
    android.content.ContentResolver mResolver -> X
    com.pahans.kichibichiya.adapter.AccountsAdapter mAdapter -> Y
    android.widget.ListView mListView -> Z
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> aa
    int mSelectedColor -> ab
    long mSelectedUserId -> ac
    android.database.Cursor mCursor -> ad
    boolean mActivityFirstCreated -> ae
    android.content.BroadcastReceiver mStatusReceiver -> af
    void onActivityCreated(android.os.Bundle) -> d
    void onActivityResult(int,int,android.content.Intent) -> a
    void onCreate(android.os.Bundle) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onDestroy() -> t
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onStart() -> d
    void onStop() -> e
    boolean isDefaultAccountValid() -> F
    void setDefaultAccount(long) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.AccountsFragment$1 -> com.pahans.kichibichiya.b.c:
    com.pahans.kichibichiya.fragment.AccountsFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.ActivitiesAboutMeFragment -> com.pahans.kichibichiya.b.d:
    com.pahans.kichibichiya.fragment.ActivitiesAboutMeFragment$ActivitiesAdapter mAdapter -> i
    android.content.SharedPreferences mPreferences -> W
    java.util.List mData -> X
    long mAccountId -> Y
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onDestroy() -> t
    void onDestroyView() -> f
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onPullDownToRefresh() -> b_
    void onPullUpToRefresh() -> c_
    void onResume() -> r
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.ActivitiesAboutMeFragment$ActivitiesAdapter -> com.pahans.kichibichiya.b.e:
    boolean mDisplayProfileImage -> a
    boolean mDisplayName -> b
    boolean mShowAbsoluteTime -> c
    boolean mDisplayHiResProfileImage -> d
    float mTextSize -> e
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> f
    android.view.LayoutInflater mInflater -> g
    android.content.Context mContext -> h
    java.util.List mData -> i
    int getCount() -> getCount
    twitter4j.Activity getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    void setDisplayProfileImage(boolean) -> b
    void setNameDisplayOption(java.lang.String) -> a
    void setShowAbsoluteTime(boolean) -> a
    void setTextSize(float) -> a
    void setProfileImage(java.net.URL,com.pahans.kichibichiya.model.ActivityViewHolder) -> a
    void setUserProfileImages(twitter4j.User[],com.pahans.kichibichiya.model.ActivityViewHolder) -> a
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.fragment.ActivityHostFragment -> com.pahans.kichibichiya.b.f:
    android.app.Activity mAttachedActivity -> a
    android.app.Activity getAttachedActivity() -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    java.lang.Class getActivityClass() -> b
com.pahans.kichibichiya.fragment.BaseDialogFragment -> com.pahans.kichibichiya.b.g:
    com.pahans.kichibichiya.app.TwidereApplication getApplication() -> A
    android.content.ContentResolver getContentResolver() -> B
    android.content.SharedPreferences getSharedPreferences(java.lang.String,int) -> a
com.pahans.kichibichiya.fragment.BaseFragment -> com.pahans.kichibichiya.b.h:
    com.pahans.kichibichiya.app.TwidereApplication getApplication() -> a
    com.pahans.kichibichiya.util.ServiceInterface getServiceInterface() -> b
    android.content.SharedPreferences getSharedPreferences(java.lang.String,int) -> a
    void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter) -> a
    void setProgressBarIndeterminateVisibility(boolean) -> a
    void unregisterReceiver(android.content.BroadcastReceiver) -> a
com.pahans.kichibichiya.fragment.BaseListFragment -> com.pahans.kichibichiya.b.i:
    boolean mActivityFirstCreated -> i
    android.content.BroadcastReceiver mStateReceiver -> W
    com.pahans.kichibichiya.app.TwidereApplication getApplication() -> A
    android.content.ContentResolver getContentResolver() -> B
    com.pahans.kichibichiya.util.ServiceInterface getServiceInterface() -> C
    android.content.SharedPreferences getSharedPreferences(java.lang.String,int) -> a
    boolean isActivityFirstCreated() -> D
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> t
    void onPostStart() -> E
    void onStart() -> d
    void onStop() -> e
    void registerReceiver(android.content.BroadcastReceiver,android.content.IntentFilter) -> a
    void setProgressBarIndeterminateVisibility(boolean) -> g
    void unregisterReceiver(android.content.BroadcastReceiver) -> a
com.pahans.kichibichiya.fragment.BaseListFragment$1 -> com.pahans.kichibichiya.b.j:
    com.pahans.kichibichiya.fragment.BaseListFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.BaseStatusesListFragment -> com.pahans.kichibichiya.b.k:
    com.pahans.kichibichiya.util.ServiceInterface mService -> i
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> W
    android.content.SharedPreferences mPreferences -> X
    com.pahans.kichibichiya.util.AsyncTaskManager mAsyncTaskManager -> Y
    android.os.Handler mHandler -> Z
    java.lang.Runnable mTicker -> aa
    android.widget.ListView mListView -> ab
    com.pahans.kichibichiya.util.StatusesAdapterInterface mAdapter -> ac
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> ad
    java.lang.Object mData -> ae
    com.pahans.kichibichiya.model.ParcelableStatus mSelectedStatus -> af
    boolean mLoadMoreAutomatically -> ag
    boolean mBusy -> ah
    boolean mTickerStopped -> ai
    boolean mReachedBottom -> aj
    boolean mNotReachedBottomBefore -> ak
    android.content.BroadcastReceiver mStateReceiver -> al
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    java.lang.Object getData() -> G
    com.pahans.kichibichiya.util.StatusesAdapterInterface getListAdapter() -> H
    android.content.SharedPreferences getSharedPreferences() -> I
    int getStatuses(long[],long[],long[]) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onCreate(android.os.Bundle) -> a
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onResume() -> r
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> d
    void onStop() -> e
    void openMenu(android.view.View,com.pahans.kichibichiya.model.ParcelableStatus) -> a
    void setListHeaderFooters(android.widget.ListView) -> a
    android.widget.ListAdapter getListAdapter() -> b
    com.pahans.kichibichiya.util.StatusesAdapterInterface access$1(com.pahans.kichibichiya.fragment.BaseStatusesListFragment) -> a
    com.pahans.kichibichiya.app.TwidereApplication access$2(com.pahans.kichibichiya.fragment.BaseStatusesListFragment) -> b
    boolean access$3(com.pahans.kichibichiya.fragment.BaseStatusesListFragment) -> c
    android.widget.ListView access$4(com.pahans.kichibichiya.fragment.BaseStatusesListFragment) -> d
    boolean access$5(com.pahans.kichibichiya.fragment.BaseStatusesListFragment) -> e
    android.os.Handler access$6(com.pahans.kichibichiya.fragment.BaseStatusesListFragment) -> f
    java.lang.Runnable access$7(com.pahans.kichibichiya.fragment.BaseStatusesListFragment) -> g
com.pahans.kichibichiya.fragment.BaseStatusesListFragment$1 -> com.pahans.kichibichiya.b.l:
    com.pahans.kichibichiya.fragment.BaseStatusesListFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.BaseStatusesListFragment$2 -> com.pahans.kichibichiya.b.m:
    com.pahans.kichibichiya.fragment.BaseStatusesListFragment this$0 -> a
    void run() -> run
com.pahans.kichibichiya.fragment.BaseUsersListFragment -> com.pahans.kichibichiya.b.n:
    android.content.SharedPreferences mPreferences -> i
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> W
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> X
    com.pahans.kichibichiya.adapter.UsersAdapter mAdapter -> Y
    boolean mLoadMoreAutomatically -> Z
    android.widget.ListView mListView -> aa
    long mAccountId -> ab
    java.util.ArrayList mData -> ac
    boolean mReachedBottom -> ad
    boolean mNotReachedBottomBefore -> ae
    android.support.v4.app.Fragment mDetailFragment -> af
    com.pahans.kichibichiya.model.ParcelableUser mSelectedUser -> ag
    android.content.BroadcastReceiver mStateReceiver -> ah
    long getAccountId() -> F
    java.util.ArrayList getData() -> G
    com.pahans.kichibichiya.adapter.UsersAdapter getListAdapter() -> H
    android.support.v4.content.Loader newLoaderInstance() -> I
    void onActivityCreated(android.os.Bundle) -> d
    void onCreate(android.os.Bundle) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onPullDownToRefresh() -> b_
    void onPullUpToRefresh() -> c_
    void onResume() -> r
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> d
    void onStop() -> e
    void openUserProfile(long,java.lang.String) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    android.widget.ListAdapter getListAdapter() -> b
    com.pahans.kichibichiya.adapter.UsersAdapter access$2(com.pahans.kichibichiya.fragment.BaseUsersListFragment) -> a
    com.pahans.kichibichiya.app.TwidereApplication access$3(com.pahans.kichibichiya.fragment.BaseUsersListFragment) -> b
com.pahans.kichibichiya.fragment.BaseUsersListFragment$1 -> com.pahans.kichibichiya.b.o:
    com.pahans.kichibichiya.fragment.BaseUsersListFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.ColorPickerDialogFragment -> com.pahans.kichibichiya.b.p:
    com.pahans.kichibichiya.fragment.ColorPickerDialogFragment$ColorPickerDialog mDialog -> W
    com.pahans.kichibichiya.fragment.ColorPickerDialogFragment$OnColorSelectedListener mListener -> X
    int mInitialColor -> Y
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onSaveInstanceState(android.os.Bundle) -> e
    void setInitialColor(int) -> c
    com.pahans.kichibichiya.fragment.ColorPickerDialogFragment$OnColorSelectedListener access$0(com.pahans.kichibichiya.fragment.ColorPickerDialogFragment) -> a
    void access$1(com.pahans.kichibichiya.fragment.ColorPickerDialogFragment,int) -> a
com.pahans.kichibichiya.fragment.ColorPickerDialogFragment$ColorPickerDialog -> com.pahans.kichibichiya.b.q:
    com.pahans.kichibichiya.view.ColorPickerView mColorPicker -> b
    com.pahans.kichibichiya.fragment.ColorPickerDialogFragment this$0 -> a
    void onClick(android.content.DialogInterface,int) -> onClick
    void onColorChanged(int) -> a
    android.graphics.Bitmap getPreviewBitmap(int) -> b
    void init(android.content.Context,int) -> a
com.pahans.kichibichiya.fragment.ColorPickerDialogFragment$OnColorSelectedListener -> com.pahans.kichibichiya.b.r:
    void onColorSelected(int) -> b
com.pahans.kichibichiya.fragment.CursorStatusesListFragment -> com.pahans.kichibichiya.b.s:
    com.pahans.kichibichiya.adapter.CursorStatusesAdapter mAdapter -> i
    android.content.BroadcastReceiver mStatusReceiver -> W
    android.net.Uri getContentUri() -> J
    com.pahans.kichibichiya.adapter.CursorStatusesAdapter getListAdapter() -> K
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onPostStart() -> E
    void onPullDownToRefresh() -> b_
    void onPullUpToRefresh() -> c_
    void onStart() -> d
    void onStop() -> e
    long[] getNewestStatusIds() -> L
    long[] getOldestStatusIds() -> M
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    com.pahans.kichibichiya.util.StatusesAdapterInterface getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.CursorStatusesListFragment$1 -> com.pahans.kichibichiya.b.t:
    com.pahans.kichibichiya.fragment.CursorStatusesListFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.CustomTabsFragment -> com.pahans.kichibichiya.b.u:
    android.content.ContentResolver mResolver -> i
    android.content.SharedPreferences mPreferences -> W
    android.widget.ListView mListView -> X
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> Y
    com.pahans.kichibichiya.adapter.SeparatedListAdapter mAdapter -> Z
    com.pahans.kichibichiya.fragment.CustomTabsFragment$DefaultTabsAdapter mDefaultTabsAdapter -> aa
    com.pahans.kichibichiya.fragment.CustomTabsFragment$CustomTabsAdapter mCustomTabsAdapter -> ab
    com.pahans.kichibichiya.fragment.CustomTabsFragment$CustomTabsAdapter$CustomTabSpec mSelectedTab -> ac
    android.content.BroadcastReceiver mStateReceiver -> ad
    void onActivityCreated(android.os.Bundle) -> d
    void onActivityResult(int,int,android.content.Intent) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onCreateOptionsMenu(android.view.Menu,android.view.MenuInflater) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> a_
    void onStart() -> d
    void onStop() -> e
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    void access$1(com.pahans.kichibichiya.fragment.CustomTabsFragment,com.pahans.kichibichiya.fragment.CustomTabsFragment$CustomTabsAdapter$CustomTabSpec) -> a
com.pahans.kichibichiya.fragment.CustomTabsFragment$1 -> com.pahans.kichibichiya.b.v:
    com.pahans.kichibichiya.fragment.CustomTabsFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.CustomTabsFragment$CustomTabsAdapter -> com.pahans.kichibichiya.b.w:
    com.pahans.kichibichiya.fragment.CustomTabsFragment$CustomTabsAdapter$CursorIndices mIndices -> m
    void bindView(android.view.View,android.content.Context,android.database.Cursor) -> a
    void changeCursor(android.database.Cursor) -> a
    com.pahans.kichibichiya.fragment.CustomTabsFragment$TabsAdapterInterface$TabSpec getItem(int) -> a
    com.pahans.kichibichiya.fragment.CustomTabsFragment$TabsAdapterInterface$TabSpec getTab(int) -> b
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.fragment.CustomTabsFragment$CustomTabsAdapter$CursorIndices -> com.pahans.kichibichiya.b.x:
    int _id -> a
    int name -> b
    int icon -> c
    int type -> d
    int arguments -> e
com.pahans.kichibichiya.fragment.CustomTabsFragment$CustomTabsAdapter$CustomTabSpec -> com.pahans.kichibichiya.b.y:
    android.database.Cursor cursor -> a
    com.pahans.kichibichiya.fragment.CustomTabsFragment$CustomTabsAdapter$CursorIndices indices -> b
    void close() -> close
    void copyStringToBuffer(int,android.database.CharArrayBuffer) -> copyStringToBuffer
    void deactivate() -> deactivate
    java.lang.String getArguments() -> a
    byte[] getBlob(int) -> getBlob
    int getColumnCount() -> getColumnCount
    int getColumnIndex(java.lang.String) -> getColumnIndex
    int getColumnIndexOrThrow(java.lang.String) -> getColumnIndexOrThrow
    java.lang.String getColumnName(int) -> getColumnName
    java.lang.String[] getColumnNames() -> getColumnNames
    int getCount() -> getCount
    double getDouble(int) -> getDouble
    android.os.Bundle getExtras() -> getExtras
    float getFloat(int) -> getFloat
    java.lang.String getIcon() -> b
    long getId() -> c
    int getInt(int) -> getInt
    long getLong(int) -> getLong
    java.lang.String getName() -> d
    int getPosition() -> getPosition
    short getShort(int) -> getShort
    java.lang.String getString(int) -> getString
    java.lang.String getType() -> e
    int getType(int) -> getType
    boolean getWantsAllOnMoveCalls() -> getWantsAllOnMoveCalls
    boolean isAfterLast() -> isAfterLast
    boolean isBeforeFirst() -> isBeforeFirst
    boolean isClosed() -> isClosed
    boolean isFirst() -> isFirst
    boolean isLast() -> isLast
    boolean isNull(int) -> isNull
    boolean move(int) -> move
    boolean moveToFirst() -> moveToFirst
    boolean moveToLast() -> moveToLast
    boolean moveToNext() -> moveToNext
    boolean moveToPosition(int) -> moveToPosition
    boolean moveToPrevious() -> moveToPrevious
    void registerContentObserver(android.database.ContentObserver) -> registerContentObserver
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    boolean requery() -> requery
    android.os.Bundle respond(android.os.Bundle) -> respond
    void setNotificationUri(android.content.ContentResolver,android.net.Uri) -> setNotificationUri
    java.lang.String toString() -> toString
    void unregisterContentObserver(android.database.ContentObserver) -> unregisterContentObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
com.pahans.kichibichiya.fragment.CustomTabsFragment$DefaultTabsAdapter -> com.pahans.kichibichiya.b.z:
    android.content.SharedPreferences prefs -> a
    android.content.Context context -> b
    com.pahans.kichibichiya.fragment.CustomTabsFragment$DefaultTabsAdapter$DefaultTabSpec getTab(int) -> a
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void reload() -> a
com.pahans.kichibichiya.fragment.CustomTabsFragment$DefaultTabsAdapter$DefaultTabSpec -> com.pahans.kichibichiya.b.aa:
    android.content.SharedPreferences prefs -> a
    java.lang.String name -> b
    java.lang.String icon -> c
    java.lang.String prefs_key -> d
    java.lang.String getArguments() -> a
    java.lang.String getIcon() -> b
    java.lang.String getName() -> d
    java.lang.String getPreferenceKey() -> c
    java.lang.String getType() -> e
    boolean isEnabled() -> f
    java.lang.String toString() -> toString
com.pahans.kichibichiya.fragment.CustomTabsFragment$TabsAdapterInterface -> com.pahans.kichibichiya.b.ab:
com.pahans.kichibichiya.fragment.CustomTabsFragment$TabsAdapterInterface$TabSpec -> com.pahans.kichibichiya.b.ac:
    java.lang.String getArguments() -> a
    java.lang.String getIcon() -> b
    java.lang.String getName() -> d
    java.lang.String getType() -> e
com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment -> com.pahans.kichibichiya.b.ad:
    com.twitter.Validator mValidator -> a
    com.pahans.kichibichiya.util.ServiceInterface mService -> b
    android.content.SharedPreferences mPreferences -> c
    android.widget.ListView mListView -> d
    android.widget.EditText mEditText -> e
    android.widget.AutoCompleteTextView mEditScreenName -> f
    android.widget.ImageButton mSendButton -> g
    android.widget.Button mScreenNameConfirmButton -> h
    android.view.View mConversationContainer -> i
    android.view.View mScreenNameContainer -> W
    android.widget.Spinner mAccountSelector -> X
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> Y
    com.pahans.kichibichiya.model.ParcelableDirectMessage mSelectedDirectMessage -> Z
    android.os.Bundle mArguments -> aa
    com.pahans.kichibichiya.model.Account mSelectedAccount -> ab
    com.pahans.kichibichiya.adapter.DirectMessagesConversationAdapter mAdapter -> ac
    com.pahans.kichibichiya.adapter.UserAutoCompleteAdapter mUserAutoCompleteAdapter -> ad
    com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment$AccountsAdapter mAccountsAdapter -> ae
    android.content.BroadcastReceiver mStatusReceiver -> af
    android.text.TextWatcher mScreenNameTextWatcher -> ag
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> ah
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onActivityCreated(android.os.Bundle) -> d
    void onClick(android.view.View) -> onClick
    void onCreate(android.os.Bundle) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onDestroy() -> t
    boolean onEditorAction(android.widget.TextView,int,android.view.KeyEvent) -> onEditorAction
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStart() -> d
    void onStop() -> e
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
    void showConversation(long,long) -> a
    void send() -> A
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    android.os.Bundle access$1(com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment) -> a
    com.pahans.kichibichiya.util.ServiceInterface access$2(com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment) -> b
    android.widget.Button access$3(com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment) -> c
com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment$1 -> com.pahans.kichibichiya.b.ae:
    com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment$2 -> com.pahans.kichibichiya.b.af:
    com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment this$0 -> a
    void afterTextChanged(android.text.Editable) -> afterTextChanged
    void beforeTextChanged(java.lang.CharSequence,int,int,int) -> beforeTextChanged
    void onTextChanged(java.lang.CharSequence,int,int,int) -> onTextChanged
com.pahans.kichibichiya.fragment.DirectMessagesConversationFragment$AccountsAdapter -> com.pahans.kichibichiya.b.ag:
com.pahans.kichibichiya.fragment.DirectMessagesFragment -> com.pahans.kichibichiya.b.ah:
    com.pahans.kichibichiya.util.ServiceInterface mService -> i
    android.content.SharedPreferences mPreferences -> W
    android.os.Handler mHandler -> X
    java.lang.Runnable mTicker -> Y
    android.widget.ListView mListView -> Z
    boolean mBusy -> aa
    boolean mTickerStopped -> ab
    boolean mReachedBottom -> ac
    boolean mNotReachedBottomBefore -> ad
    com.pahans.kichibichiya.adapter.DirectMessagesEntryAdapter mAdapter -> ae
    android.content.BroadcastReceiver mStatusReceiver -> af
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> ag
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> a_
    void onPostStart() -> E
    void onPullDownToRefresh() -> b_
    void onPullUpToRefresh() -> c_
    void onResume() -> r
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> d
    void onStop() -> e
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    com.pahans.kichibichiya.util.ServiceInterface access$1(com.pahans.kichibichiya.fragment.DirectMessagesFragment) -> a
    boolean access$2(com.pahans.kichibichiya.fragment.DirectMessagesFragment) -> b
    android.widget.ListView access$3(com.pahans.kichibichiya.fragment.DirectMessagesFragment) -> c
    boolean access$4(com.pahans.kichibichiya.fragment.DirectMessagesFragment) -> d
    com.pahans.kichibichiya.adapter.DirectMessagesEntryAdapter access$5(com.pahans.kichibichiya.fragment.DirectMessagesFragment) -> e
    android.os.Handler access$6(com.pahans.kichibichiya.fragment.DirectMessagesFragment) -> f
    java.lang.Runnable access$7(com.pahans.kichibichiya.fragment.DirectMessagesFragment) -> g
com.pahans.kichibichiya.fragment.DirectMessagesFragment$1 -> com.pahans.kichibichiya.b.ai:
    com.pahans.kichibichiya.fragment.DirectMessagesFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.DirectMessagesFragment$2 -> com.pahans.kichibichiya.b.aj:
    com.pahans.kichibichiya.fragment.DirectMessagesFragment this$0 -> a
    void run() -> run
com.pahans.kichibichiya.fragment.ExtensionsListFragment -> com.pahans.kichibichiya.b.ak:
    com.pahans.kichibichiya.adapter.ExtensionsAdapter mAdapter -> i
    android.content.pm.PackageManager mPackageManager -> W
    android.content.pm.ResolveInfo mSelectedResolveInfo -> X
    android.widget.ListView mListView -> Y
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> Z
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onStop() -> e
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.FiltersFragment -> com.pahans.kichibichiya.b.al:
    com.pahans.kichibichiya.fragment.FiltersFragment$FilterListAdapter mAdapter -> i
    com.pahans.kichibichiya.fragment.FiltersFragment$AddItemFragment mFragment -> W
    android.content.ContentResolver mResolver -> X
    java.lang.String[] getContentColumns() -> F
    android.net.Uri getContentUri() -> G
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    boolean onOptionsItemSelected(android.view.MenuItem) -> a_
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.FiltersFragment$AddItemFragment -> com.pahans.kichibichiya.b.am:
    android.widget.AutoCompleteTextView mEditText -> W
    com.pahans.kichibichiya.fragment.FiltersFragment mFragment -> X
    com.pahans.kichibichiya.adapter.UserAutoCompleteAdapter mUserAutoCompleteAdapter -> Y
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void setFiltersFragment(com.pahans.kichibichiya.fragment.FiltersFragment) -> a
com.pahans.kichibichiya.fragment.FiltersFragment$FilterListAdapter -> com.pahans.kichibichiya.b.an:
    java.lang.String[] from -> m
    int[] to -> n
com.pahans.kichibichiya.fragment.FiltersFragment$FilteredKeywordsFragment -> com.pahans.kichibichiya.b.ao:
    java.lang.String[] getContentColumns() -> F
    android.net.Uri getContentUri() -> G
com.pahans.kichibichiya.fragment.FiltersFragment$FilteredSourcesFragment -> com.pahans.kichibichiya.b.ap:
    java.lang.String[] getContentColumns() -> F
    android.net.Uri getContentUri() -> G
com.pahans.kichibichiya.fragment.FiltersFragment$FilteredUsersFragment -> com.pahans.kichibichiya.b.aq:
    java.lang.String[] getContentColumns() -> F
    android.net.Uri getContentUri() -> G
com.pahans.kichibichiya.fragment.HomeTimelineFragment -> com.pahans.kichibichiya.b.ar:
    android.content.SharedPreferences mPreferences -> i
    com.pahans.kichibichiya.util.ServiceInterface mService -> W
    android.widget.ListView mListView -> X
    com.pahans.kichibichiya.adapter.CursorStatusesAdapter mAdapter -> Y
    android.content.BroadcastReceiver mStatusReceiver -> Z
    android.net.Uri getContentUri() -> J
    int getStatuses(long[],long[],long[]) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> d
    void onStop() -> e
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    com.pahans.kichibichiya.util.ServiceInterface access$9(com.pahans.kichibichiya.fragment.HomeTimelineFragment) -> a
com.pahans.kichibichiya.fragment.HomeTimelineFragment$1 -> com.pahans.kichibichiya.b.as:
    com.pahans.kichibichiya.fragment.HomeTimelineFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.IncomingFriendshipsFragment -> com.pahans.kichibichiya.b.at:
    android.support.v4.content.Loader newLoaderInstance() -> I
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onResume() -> r
    void onStop() -> e
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onPullUpToRefresh() -> c_
    void onCreate(android.os.Bundle) -> a
    void onPullDownToRefresh() -> b_
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    com.pahans.kichibichiya.adapter.UsersAdapter getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> d
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    long getAccountId() -> F
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.InternalSettingsFragment -> com.pahans.kichibichiya.b.au:
    java.lang.Class getActivityClass() -> b
com.pahans.kichibichiya.fragment.LocalActivityManagerFragment -> com.pahans.kichibichiya.b.av:
    android.app.LocalActivityManager mLocalActivityManager -> a
    void onCreate(android.os.Bundle) -> a
    void onDestroy() -> t
    void onPause() -> s
    void onResume() -> r
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStop() -> e
    android.app.LocalActivityManager getLocalActivityManager() -> A
com.pahans.kichibichiya.fragment.MentionsFragment -> com.pahans.kichibichiya.b.aw:
    android.content.SharedPreferences mPreferences -> i
    com.pahans.kichibichiya.util.ServiceInterface mService -> W
    android.widget.ListView mListView -> X
    com.pahans.kichibichiya.adapter.CursorStatusesAdapter mAdapter -> Y
    android.content.BroadcastReceiver mStatusReceiver -> Z
    android.net.Uri getContentUri() -> J
    int getStatuses(long[],long[],long[]) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> d
    void onStop() -> e
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    com.pahans.kichibichiya.util.ServiceInterface access$9(com.pahans.kichibichiya.fragment.MentionsFragment) -> a
com.pahans.kichibichiya.fragment.MentionsFragment$1 -> com.pahans.kichibichiya.b.ax:
    com.pahans.kichibichiya.fragment.MentionsFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.NativeMapFragment -> com.pahans.kichibichiya.b.ay:
    void center() -> B
    java.lang.Class getActivityClass() -> b
com.pahans.kichibichiya.fragment.ParcelableStatusesListFragment -> com.pahans.kichibichiya.b.az:
    android.content.SharedPreferences mPreferences -> i
    java.util.List mData -> W
    com.pahans.kichibichiya.adapter.ParcelableStatusesAdapter mAdapter -> X
    android.widget.ListView mListView -> Y
    android.content.BroadcastReceiver mStateReceiver -> Z
    void deleteStatus(long) -> a
    com.pahans.kichibichiya.adapter.ParcelableStatusesAdapter getListAdapter() -> J
    int getStatuses(long[],long[],long[]) -> a
    boolean isLoaderUsed() -> K
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onDataLoaded(android.support.v4.content.Loader,com.pahans.kichibichiya.adapter.ParcelableStatusesAdapter) -> a
    void onDestroyView() -> f
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onPostStart() -> E
    void onPullDownToRefresh() -> b_
    void onPullUpToRefresh() -> c_
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStart() -> d
    void onStop() -> e
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    com.pahans.kichibichiya.util.StatusesAdapterInterface getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.ParcelableStatusesListFragment$1 -> com.pahans.kichibichiya.b.ba:
    com.pahans.kichibichiya.fragment.ParcelableStatusesListFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.PullToRefreshListFragment -> com.pahans.kichibichiya.b.bb:
    android.content.BroadcastReceiver mStateReceiver -> i
    com.handmark.pulltorefresh.library.PullToRefreshListView mPullToRefreshListView -> W
    boolean isRefreshing() -> N
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onRefreshComplete() -> O
    void onStart() -> d
    void onStop() -> e
    void setMode(com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> a
    void setPullLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> a
    void setPullToRefreshEnabled(boolean) -> h
    void setRefreshing(boolean) -> i
    void setReleaseLabel(java.lang.String,com.handmark.pulltorefresh.library.PullToRefreshBase$Mode) -> b
com.pahans.kichibichiya.fragment.PullToRefreshListFragment$1 -> com.pahans.kichibichiya.b.bc:
    com.pahans.kichibichiya.fragment.PullToRefreshListFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.SavedSearchesListFragment -> com.pahans.kichibichiya.b.bd:
    com.pahans.kichibichiya.fragment.SavedSearchesListFragment$SavedSearchesAdapter mAdapter -> i
    long mAccountId -> W
    android.widget.ListView mListView -> X
    java.util.Comparator POSITION_COMPARATOR -> Y
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,twitter4j.ResponseList) -> a
    void onPullDownToRefresh() -> b_
    void onPullUpToRefresh() -> c_
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.SavedSearchesListFragment$1 -> com.pahans.kichibichiya.b.be:
    int compare(twitter4j.SavedSearch,twitter4j.SavedSearch) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.fragment.SavedSearchesListFragment$SavedSearchesAdapter -> com.pahans.kichibichiya.b.bf:
    twitter4j.ResponseList mData -> a
    android.view.LayoutInflater mInflater -> b
    twitter4j.SavedSearch findItem(long) -> a
    int getCount() -> getCount
    twitter4j.SavedSearch getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(twitter4j.ResponseList) -> a
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.fragment.SearchTweetsFragment -> com.pahans.kichibichiya.b.bg:
    boolean mIsStatusesSaved -> W
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onDestroy() -> t
    void onDestroyView() -> f
    void saveStatuses() -> L
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.SearchUsersFragment -> com.pahans.kichibichiya.b.bh:
    int mPage -> i
    android.support.v4.content.Loader newLoaderInstance() -> I
    void onActivityCreated(android.os.Bundle) -> d
    void onDestroyView() -> f
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onSaveInstanceState(android.os.Bundle) -> e
    void onResume() -> r
    void onStop() -> e
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onPullUpToRefresh() -> c_
    void onCreate(android.os.Bundle) -> a
    void onPullDownToRefresh() -> b_
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    com.pahans.kichibichiya.adapter.UsersAdapter getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> d
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    long getAccountId() -> F
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.SettingsDetailsFragment -> com.pahans.kichibichiya.b.bi:
    java.lang.Class getActivityClass() -> b
com.pahans.kichibichiya.fragment.StatusFragment -> com.pahans.kichibichiya.b.bj:
    java.util.List mData -> W
    android.os.Handler mHandler -> X
    java.lang.Runnable mTicker -> Y
    long mAccountId -> Z
    long mStatusId -> aa
    boolean mLoadMoreAutomatically -> ab
    boolean mFollowInfoDisplayed -> ac
    boolean mLocationInfoDisplayed -> ad
    boolean mStatusLoaderInitialized -> ae
    boolean mLocationLoaderInitialized -> af
    boolean mConversationLoaderInitialized -> ag
    boolean mBusy -> ah
    boolean mTickerStopped -> ai
    boolean mFollowInfoLoaderInitialized -> aj
    boolean mShouldScroll -> ak
    com.pahans.kichibichiya.util.ServiceInterface mService -> al
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> am
    com.pahans.kichibichiya.fragment.StatusFragment$ImagesAdapter mImagePreviewAdapter -> an
    com.pahans.kichibichiya.adapter.ParcelableStatusesAdapter mAdapter -> ao
    android.widget.TextView mScreenNameView -> ap
    android.widget.TextView mTimeAndSourceView -> aq
    android.widget.TextView mInReplyToView -> ar
    android.widget.TextView mLocationView -> as
    android.widget.TextView mRetweetedStatusView -> at
    com.pahans.sinhala.droid.project.SCTextView mNameView -> au
    com.pahans.sinhala.droid.project.SCTextView mTextView -> av
    android.widget.ImageView mProfileImageView -> aw
    android.widget.Button mFollowButton -> ax
    android.view.View mMainContent -> ay
    android.view.View mFollowIndicator -> az
    android.view.View mImagesPreviewContainer -> aA
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout mProfileView -> aB
    org.mariotaku.menubar.MenuBar mMenuBar -> aC
    android.widget.ProgressBar mStatusLoadProgress -> aD
    android.widget.ProgressBar mFollowInfoProgress -> aE
    android.widget.Gallery mGallery -> aF
    android.view.View mStatusView -> aG
    android.view.View mLoadImagesIndicator -> aH
    android.widget.FrameLayout mStatusContainer -> aI
    android.widget.ListView mListView -> aJ
    com.pahans.kichibichiya.model.ParcelableStatus mStatus -> aK
    android.content.BroadcastReceiver mStatusReceiver -> aL
    android.support.v4.app.LoaderManager$LoaderCallbacks mConversationLoaderCallbacks -> aM
    android.support.v4.app.LoaderManager$LoaderCallbacks mStatusLoaderCallbacks -> aN
    android.support.v4.app.LoaderManager$LoaderCallbacks mLocationLoaderCallbacks -> aO
    android.support.v4.app.LoaderManager$LoaderCallbacks mFollowInfoLoaderCallbacks -> aP
    org.mariotaku.menubar.MenuBar$OnMenuItemClickListener mMenuItemClickListener -> aQ
    android.view.ViewTreeObserver$OnGlobalLayoutListener mOnGlobalLayoutListener -> aR
    void displayStatus(com.pahans.kichibichiya.model.ParcelableStatus) -> a
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onActivityCreated(android.os.Bundle) -> d
    void onActivityResult(int,int,android.content.Intent) -> a
    void onClick(android.view.View) -> onClick
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onDestroyView() -> f
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    void onPullDownToRefresh() -> b_
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    void onStart() -> d
    void onStop() -> e
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void clearPreviewImages() -> L
    void getStatus(boolean) -> j
    boolean loadPreviewImages(java.util.Collection) -> a
    void showConversation() -> M
    void showFollowInfo(boolean) -> k
    void showLocationInfo(boolean) -> l
    void showPreviewImages() -> P
    void updatePreviewImages() -> Q
    void updateUserColor() -> R
    void setListHeaderFooters(android.widget.ListView) -> a
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    com.pahans.kichibichiya.model.ParcelableStatus access$9(com.pahans.kichibichiya.fragment.StatusFragment) -> a
    void access$10(com.pahans.kichibichiya.fragment.StatusFragment,boolean) -> a
    long access$11(com.pahans.kichibichiya.fragment.StatusFragment) -> b
    void access$12(com.pahans.kichibichiya.fragment.StatusFragment,boolean) -> b
    com.pahans.kichibichiya.adapter.ParcelableStatusesAdapter access$13(com.pahans.kichibichiya.fragment.StatusFragment) -> c
    android.widget.ListView access$14(com.pahans.kichibichiya.fragment.StatusFragment) -> d
    android.widget.TextView access$15(com.pahans.kichibichiya.fragment.StatusFragment) -> e
    boolean access$16(com.pahans.kichibichiya.fragment.StatusFragment) -> f
    void access$17(com.pahans.kichibichiya.fragment.StatusFragment,boolean) -> c
    long access$18(com.pahans.kichibichiya.fragment.StatusFragment) -> g
    boolean access$19(com.pahans.kichibichiya.fragment.StatusFragment) -> h
    android.widget.ProgressBar access$20(com.pahans.kichibichiya.fragment.StatusFragment) -> i
    android.view.View access$21(com.pahans.kichibichiya.fragment.StatusFragment) -> j
    android.widget.TextView access$22(com.pahans.kichibichiya.fragment.StatusFragment) -> k
    void access$23(com.pahans.kichibichiya.fragment.StatusFragment,boolean) -> d
    android.view.View access$24(com.pahans.kichibichiya.fragment.StatusFragment) -> l
    android.widget.Button access$25(com.pahans.kichibichiya.fragment.StatusFragment) -> m
    android.widget.ProgressBar access$26(com.pahans.kichibichiya.fragment.StatusFragment) -> n
    void access$27(com.pahans.kichibichiya.fragment.StatusFragment,boolean) -> e
    com.pahans.kichibichiya.util.ServiceInterface access$28(com.pahans.kichibichiya.fragment.StatusFragment) -> o
    void access$29(com.pahans.kichibichiya.fragment.StatusFragment) -> p
    android.view.View access$30(com.pahans.kichibichiya.fragment.StatusFragment) -> q
    android.widget.FrameLayout access$31(com.pahans.kichibichiya.fragment.StatusFragment) -> r
    boolean access$32(com.pahans.kichibichiya.fragment.StatusFragment) -> s
    android.widget.Gallery access$33(com.pahans.kichibichiya.fragment.StatusFragment) -> t
    boolean access$34(com.pahans.kichibichiya.fragment.StatusFragment) -> u
    com.pahans.kichibichiya.fragment.StatusFragment$ImagesAdapter access$35(com.pahans.kichibichiya.fragment.StatusFragment) -> v
    android.os.Handler access$36(com.pahans.kichibichiya.fragment.StatusFragment) -> w
    java.lang.Runnable access$37(com.pahans.kichibichiya.fragment.StatusFragment) -> x
com.pahans.kichibichiya.fragment.StatusFragment$1 -> com.pahans.kichibichiya.b.bk:
    com.pahans.kichibichiya.fragment.StatusFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.StatusFragment$2 -> com.pahans.kichibichiya.b.bl:
    com.pahans.kichibichiya.fragment.StatusFragment this$0 -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.fragment.StatusFragment$Response) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.StatusFragment$3 -> com.pahans.kichibichiya.b.bm:
    com.pahans.kichibichiya.fragment.StatusFragment this$0 -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.fragment.StatusFragment$Response) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.StatusFragment$4 -> com.pahans.kichibichiya.b.bn:
    com.pahans.kichibichiya.fragment.StatusFragment this$0 -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.String) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.StatusFragment$5 -> com.pahans.kichibichiya.b.bo:
    com.pahans.kichibichiya.fragment.StatusFragment this$0 -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.fragment.StatusFragment$Response) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.StatusFragment$6 -> com.pahans.kichibichiya.b.bp:
    com.pahans.kichibichiya.fragment.StatusFragment this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
com.pahans.kichibichiya.fragment.StatusFragment$7 -> com.pahans.kichibichiya.b.bq:
    com.pahans.kichibichiya.fragment.StatusFragment this$0 -> a
    void onGlobalLayout() -> onGlobalLayout
com.pahans.kichibichiya.fragment.StatusFragment$8 -> com.pahans.kichibichiya.b.br:
    com.pahans.kichibichiya.fragment.StatusFragment this$0 -> a
    void run() -> run
com.pahans.kichibichiya.fragment.StatusFragment$FollowInfoLoader -> com.pahans.kichibichiya.b.bs:
    com.pahans.kichibichiya.model.ParcelableStatus status -> f
    android.content.Context context -> g
    com.pahans.kichibichiya.fragment.StatusFragment$Response loadInBackground() -> f
    void onStartLoading() -> g
    com.pahans.kichibichiya.fragment.StatusFragment$Response isAllFollowing() -> v
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.fragment.StatusFragment$ImagesAdapter -> com.pahans.kichibichiya.b.bt:
    java.util.List mImages -> a
    com.pahans.kichibichiya.util.LazyImageLoader mImageLoader -> b
    android.view.LayoutInflater mInflater -> c
    boolean addAll(java.util.Collection) -> a
    void clear() -> a
    int getCount() -> getCount
    com.pahans.kichibichiya.model.ImageSpec getItem(int) -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.fragment.StatusFragment$LocationInfoLoader -> com.pahans.kichibichiya.b.bu:
    android.content.Context context -> f
    com.pahans.kichibichiya.model.ParcelableLocation location -> g
    java.lang.String loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.fragment.StatusFragment$Response -> com.pahans.kichibichiya.b.bv:
    java.lang.Object value -> a
    twitter4j.TwitterException exception -> b
com.pahans.kichibichiya.fragment.StatusFragment$StatusLoader -> com.pahans.kichibichiya.b.bw:
    boolean omit_intent_extra -> f
    android.content.Context context -> g
    android.os.Bundle extras -> h
    long account_id -> i
    long status_id -> j
    com.pahans.kichibichiya.fragment.StatusFragment$Response loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.fragment.TrendsFragment -> com.pahans.kichibichiya.b.bx:
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> i
    com.pahans.kichibichiya.util.ServiceInterface mService -> W
    android.content.SharedPreferences mPreferences -> X
    com.pahans.kichibichiya.fragment.TrendsFragment$TrendsAdapter mTrendsAdapter -> Y
    long mAccountId -> Z
    android.content.BroadcastReceiver mStatusReceiver -> aa
    void onActivityCreated(android.os.Bundle) -> d
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.database.Cursor) -> a
    void onPullDownToRefresh() -> b_
    void onPullUpToRefresh() -> c_
    void onStart() -> d
    void onStop() -> e
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.TrendsFragment$1 -> com.pahans.kichibichiya.b.by:
    com.pahans.kichibichiya.fragment.TrendsFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.TrendsFragment$TrendsAdapter -> com.pahans.kichibichiya.b.bz:
com.pahans.kichibichiya.fragment.UserBlocksListFragment -> com.pahans.kichibichiya.b.ca:
    android.support.v4.content.Loader newLoaderInstance() -> I
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onResume() -> r
    void onStop() -> e
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onPullUpToRefresh() -> c_
    void onCreate(android.os.Bundle) -> a
    void onPullDownToRefresh() -> b_
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    com.pahans.kichibichiya.adapter.UsersAdapter getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> d
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    long getAccountId() -> F
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.UserFavoritesFragment -> com.pahans.kichibichiya.b.cb:
    long mUserId -> W
    android.content.BroadcastReceiver mStateReceiver -> X
    boolean mIsStatusesSaved -> Y
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onDestroy() -> t
    void onDestroyView() -> f
    void onStart() -> d
    void onStop() -> e
    void saveStatuses() -> L
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    long access$10(com.pahans.kichibichiya.fragment.UserFavoritesFragment) -> a
com.pahans.kichibichiya.fragment.UserFavoritesFragment$1 -> com.pahans.kichibichiya.b.cc:
    com.pahans.kichibichiya.fragment.UserFavoritesFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.UserFollowersFragment -> com.pahans.kichibichiya.b.cd:
    android.support.v4.content.Loader newLoaderInstance() -> I
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onResume() -> r
    void onStop() -> e
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onPullUpToRefresh() -> c_
    void onCreate(android.os.Bundle) -> a
    void onPullDownToRefresh() -> b_
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    com.pahans.kichibichiya.adapter.UsersAdapter getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> d
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    long getAccountId() -> F
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.UserFriendsFragment -> com.pahans.kichibichiya.b.ce:
    android.support.v4.content.Loader newLoaderInstance() -> I
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onResume() -> r
    void onStop() -> e
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onPullUpToRefresh() -> c_
    void onCreate(android.os.Bundle) -> a
    void onPullDownToRefresh() -> b_
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    com.pahans.kichibichiya.adapter.UsersAdapter getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> d
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    long getAccountId() -> F
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.UserListDetailsFragment -> com.pahans.kichibichiya.b.cf:
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> i
    com.pahans.kichibichiya.util.ServiceInterface mService -> W
    android.widget.ImageView mProfileImageView -> X
    android.widget.TextView mListNameView -> Y
    android.widget.TextView mUserNameView -> Z
    android.widget.TextView mDescriptionView -> aa
    android.widget.TextView mErrorMessageView -> ab
    android.view.View mListContainer -> ac
    android.view.View mErrorRetryContainer -> ad
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout mProfileContainer -> ae
    android.view.View mNameContainer -> af
    android.view.View mProfileImageContainer -> ag
    android.view.View mDescriptionContainer -> ah
    android.widget.Button mFollowMoreButton -> ai
    android.widget.Button mRetryButton -> aj
    android.widget.ListView mListView -> ak
    android.view.View mHeaderView -> al
    com.pahans.kichibichiya.adapter.ListActionAdapter mAdapter -> am
    long mAccountId -> an
    long mUserId -> ao
    android.support.v4.app.DialogFragment mAddMemberDialogFragment -> ap
    android.support.v4.app.DialogFragment mEditUserListDialogFragment -> aq
    twitter4j.UserList mUserList -> ar
    int mUserListId -> as
    java.lang.String mUserName -> at
    java.lang.String mUserScreenName -> au
    java.lang.String mListName -> av
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> aw
    android.content.BroadcastReceiver mStatusReceiver -> ax
    void changeUserList(long,twitter4j.UserList) -> a
    void getUserListInfo(boolean,long,int,java.lang.String,long,java.lang.String) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onClick(android.view.View) -> onClick
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onDestroyView() -> f
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLinkClick(java.lang.String,int) -> b
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.fragment.UserListDetailsFragment$Response) -> a
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onStart() -> d
    void onStop() -> e
    void reloadUserListInfo() -> F
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
    int access$1(com.pahans.kichibichiya.fragment.UserListDetailsFragment) -> a
    void access$2(com.pahans.kichibichiya.fragment.UserListDetailsFragment) -> b
    twitter4j.UserList access$3(com.pahans.kichibichiya.fragment.UserListDetailsFragment) -> c
    long access$4(com.pahans.kichibichiya.fragment.UserListDetailsFragment) -> d
    long access$5(com.pahans.kichibichiya.fragment.UserListDetailsFragment) -> e
    java.lang.String access$6(com.pahans.kichibichiya.fragment.UserListDetailsFragment) -> f
    java.lang.String access$7(com.pahans.kichibichiya.fragment.UserListDetailsFragment) -> g
    java.lang.String access$8(com.pahans.kichibichiya.fragment.UserListDetailsFragment) -> h
com.pahans.kichibichiya.fragment.UserListDetailsFragment$1 -> com.pahans.kichibichiya.b.cg:
    com.pahans.kichibichiya.fragment.UserListDetailsFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.UserListDetailsFragment$AddMemberDialogFragment -> com.pahans.kichibichiya.b.ch:
    android.widget.AutoCompleteTextView mEditText -> W
    java.lang.String mText -> X
    long mAccountId -> Y
    com.pahans.kichibichiya.util.ServiceInterface mService -> Z
    int mListId -> aa
    com.pahans.kichibichiya.adapter.UserAutoCompleteAdapter mUserAutoCompleteAdapter -> ab
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onSaveInstanceState(android.os.Bundle) -> e
com.pahans.kichibichiya.fragment.UserListDetailsFragment$EditUserListDialogFragment -> com.pahans.kichibichiya.b.ci:
    android.widget.EditText mEditName -> W
    android.widget.EditText mEditDescription -> X
    android.widget.CheckBox mPublicCheckBox -> Y
    java.lang.String mName -> Z
    java.lang.String mDescription -> aa
    long mAccountId -> ab
    int mListId -> ac
    boolean mIsPublic -> ad
    com.pahans.kichibichiya.util.ServiceInterface mService -> ae
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onSaveInstanceState(android.os.Bundle) -> e
com.pahans.kichibichiya.fragment.UserListDetailsFragment$ListInfoLoader -> com.pahans.kichibichiya.b.cj:
    twitter4j.Twitter twitter -> f
    long user_id -> g
    int list_id -> h
    java.lang.String screen_name -> i
    java.lang.String list_name -> j
    com.pahans.kichibichiya.fragment.UserListDetailsFragment$Response loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.fragment.UserListDetailsFragment$ListMembersAction -> com.pahans.kichibichiya.b.ck:
    com.pahans.kichibichiya.fragment.UserListDetailsFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    java.lang.String getSummary() -> c
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserListDetailsFragment$ListSubscribersAction -> com.pahans.kichibichiya.b.cl:
    com.pahans.kichibichiya.fragment.UserListDetailsFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    java.lang.String getSummary() -> c
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserListDetailsFragment$ListTimelineAction -> com.pahans.kichibichiya.b.cm:
    com.pahans.kichibichiya.fragment.UserListDetailsFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserListDetailsFragment$Response -> com.pahans.kichibichiya.b.cn:
    java.lang.Object value -> a
    twitter4j.TwitterException exception -> b
com.pahans.kichibichiya.fragment.UserListMembersFragment -> com.pahans.kichibichiya.b.co:
    long mCursor -> i
    long mOwnerId -> W
    int mUserListId -> X
    com.pahans.kichibichiya.model.ParcelableUser mSelectedUser -> Y
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> Z
    com.pahans.kichibichiya.util.ServiceInterface mService -> aa
    android.content.BroadcastReceiver mStatusReceiver -> ab
    android.support.v4.content.Loader newLoaderInstance() -> I
    void onActivityCreated(android.os.Bundle) -> d
    void onDestroyView() -> f
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onSaveInstanceState(android.os.Bundle) -> e
    void onStart() -> d
    void onStop() -> e
    void deleteItem(long) -> a
    void onResume() -> r
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onPullUpToRefresh() -> c_
    void onCreate(android.os.Bundle) -> a
    void onPullDownToRefresh() -> b_
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    com.pahans.kichibichiya.adapter.UsersAdapter getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    long getAccountId() -> F
    int access$11(com.pahans.kichibichiya.fragment.UserListMembersFragment) -> a
    void access$12(com.pahans.kichibichiya.fragment.UserListMembersFragment,long) -> a
com.pahans.kichibichiya.fragment.UserListMembersFragment$1 -> com.pahans.kichibichiya.b.cp:
    com.pahans.kichibichiya.fragment.UserListMembersFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.UserListSubscribersFragment -> com.pahans.kichibichiya.b.cq:
    long mCursor -> i
    android.support.v4.content.Loader newLoaderInstance() -> I
    void onActivityCreated(android.os.Bundle) -> d
    void onDestroyView() -> f
    void onLoadFinished(android.support.v4.content.Loader,java.util.List) -> a
    void onSaveInstanceState(android.os.Bundle) -> e
    void onResume() -> r
    void onStop() -> e
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onPullUpToRefresh() -> c_
    void onCreate(android.os.Bundle) -> a
    void onPullDownToRefresh() -> b_
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    com.pahans.kichibichiya.adapter.UsersAdapter getListAdapter() -> H
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onStart() -> d
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    long getAccountId() -> F
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.UserListTimelineFragment -> com.pahans.kichibichiya.b.cr:
    boolean mIsStatusesSaved -> W
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onDestroy() -> t
    void onDestroyView() -> f
    void saveStatuses() -> L
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.UserListsListFragment -> com.pahans.kichibichiya.b.cs:
    com.pahans.kichibichiya.adapter.SeparatedListAdapter mAdapter -> i
    com.pahans.kichibichiya.adapter.UserListsAdapter mUserListsAdapter -> W
    com.pahans.kichibichiya.adapter.UserListsAdapter mUserListMembershipsAdapter -> X
    android.content.SharedPreferences mPreferences -> Y
    android.widget.ListView mListView -> Z
    long mAccountId -> aa
    long mUserId -> ab
    java.lang.String mScreenName -> ac
    android.support.v4.app.Fragment mDetailFragment -> ad
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> ae
    com.pahans.kichibichiya.model.ParcelableUserList mSelectedUserList -> af
    com.pahans.kichibichiya.app.TwidereApplication mApplication -> ag
    void onActivityCreated(android.os.Bundle) -> d
    void onCreate(android.os.Bundle) -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.loader.UserListsLoader$UserListsData) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onStart() -> d
    void onStop() -> e
    void openUserListDetails(android.app.Activity,long,int,long,java.lang.String,java.lang.String) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.UserMentionsFragment -> com.pahans.kichibichiya.b.ct:
    boolean mIsStatusesSaved -> W
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onDestroy() -> t
    void onDestroyView() -> f
    void saveStatuses() -> L
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.UserProfileFragment -> com.pahans.kichibichiya.b.cu:
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> i
    android.widget.ImageView mProfileImageView -> W
    android.widget.TextView mNameView -> X
    android.widget.TextView mScreenNameView -> Y
    android.widget.TextView mDescriptionView -> Z
    android.widget.TextView mLocationView -> aa
    android.widget.TextView mURLView -> ab
    android.widget.TextView mCreatedAtView -> ac
    android.widget.TextView mTweetCount -> ad
    android.widget.TextView mFollowersCount -> ae
    android.widget.TextView mFriendsCount -> af
    android.widget.TextView mFollowingYouIndicator -> ag
    android.widget.TextView mErrorMessageView -> ah
    android.view.View mNameContainer -> ai
    android.view.View mProfileImageContainer -> aj
    android.view.View mDescriptionContainer -> ak
    android.view.View mLocationContainer -> al
    android.view.View mURLContainer -> am
    android.view.View mTweetsContainer -> an
    android.view.View mFollowersContainer -> ao
    android.view.View mFriendsContainer -> ap
    android.view.View mFollowContainer -> aq
    android.view.View mProfileNameBannerContainer -> ar
    android.widget.ProgressBar mFollowProgress -> as
    android.widget.ProgressBar mMoreOptionsProgress -> at
    android.widget.Button mFollowButton -> au
    android.widget.Button mMoreOptionsButton -> av
    android.widget.Button mRetryButton -> aw
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout mProfileNameContainer -> ax
    com.pahans.kichibichiya.adapter.ListActionAdapter mAdapter -> ay
    android.widget.ListView mListView -> az
    android.view.View mHeaderView -> aA
    long mAccountId -> aB
    twitter4j.Relationship mFriendship -> aC
    android.support.v4.app.DialogFragment mDialogFragment -> aD
    android.net.Uri mImageUri -> aE
    twitter4j.User mUser -> aF
    long mUserId -> aG
    java.lang.String mScreenName -> aH
    com.pahans.kichibichiya.util.ServiceInterface mService -> aI
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> aJ
    android.content.BroadcastReceiver mStatusReceiver -> aK
    android.view.View mListContainer -> aL
    android.view.View mErrorRetryContainer -> aM
    boolean mGetUserInfoLoaderInitialized -> aN
    boolean mGetFriendShipLoaderInitialized -> aO
    boolean mBannerImageLoaderInitialized -> aP
    android.support.v4.app.LoaderManager$LoaderCallbacks mUserInfoLoaderCallbacks -> aQ
    android.support.v4.app.LoaderManager$LoaderCallbacks mFriendshipLoaderCallbacks -> aR
    android.support.v4.app.LoaderManager$LoaderCallbacks mBannerImageCallback -> aS
    void changeUser(long,twitter4j.User) -> a
    void getUserInfo(long,long,java.lang.String) -> a
    void onActivityCreated(android.os.Bundle) -> d
    void onActivityResult(int,int,android.content.Intent) -> a
    void onClick(android.view.View) -> onClick
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void onDestroyView() -> f
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
    void onLinkClick(java.lang.String,int) -> b
    boolean onLongClick(android.view.View) -> onLongClick
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onStart() -> d
    void onStop() -> e
    void getBannerImage() -> F
    void getFriendship() -> G
    void pickImage() -> H
    void reloadUserInfo() -> I
    void takePhoto() -> J
    twitter4j.User access$0(com.pahans.kichibichiya.fragment.UserProfileFragment) -> a
    void access$1(com.pahans.kichibichiya.fragment.UserProfileFragment) -> b
    void access$2(com.pahans.kichibichiya.fragment.UserProfileFragment) -> c
    android.view.View access$3(com.pahans.kichibichiya.fragment.UserProfileFragment) -> d
    android.view.View access$4(com.pahans.kichibichiya.fragment.UserProfileFragment) -> e
    android.widget.TextView access$5(com.pahans.kichibichiya.fragment.UserProfileFragment) -> f
    long access$6(com.pahans.kichibichiya.fragment.UserProfileFragment) -> g
    long access$7(com.pahans.kichibichiya.fragment.UserProfileFragment) -> h
    java.lang.String access$8(com.pahans.kichibichiya.fragment.UserProfileFragment) -> i
    android.widget.TextView access$9(com.pahans.kichibichiya.fragment.UserProfileFragment) -> j
    android.view.View access$10(com.pahans.kichibichiya.fragment.UserProfileFragment) -> k
    android.widget.Button access$11(com.pahans.kichibichiya.fragment.UserProfileFragment) -> l
    android.widget.ProgressBar access$12(com.pahans.kichibichiya.fragment.UserProfileFragment) -> m
    android.widget.Button access$13(com.pahans.kichibichiya.fragment.UserProfileFragment) -> n
    android.widget.ProgressBar access$14(com.pahans.kichibichiya.fragment.UserProfileFragment) -> o
    void access$15(com.pahans.kichibichiya.fragment.UserProfileFragment,twitter4j.Relationship) -> a
    android.view.View access$16(com.pahans.kichibichiya.fragment.UserProfileFragment) -> p
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout access$17(com.pahans.kichibichiya.fragment.UserProfileFragment) -> q
    com.pahans.kichibichiya.util.ServiceInterface access$18(com.pahans.kichibichiya.fragment.UserProfileFragment) -> r
com.pahans.kichibichiya.fragment.UserProfileFragment$1 -> com.pahans.kichibichiya.b.cv:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.fragment.UserProfileFragment$2 -> com.pahans.kichibichiya.b.cw:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.fragment.UserProfileFragment$Response) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.UserProfileFragment$3 -> com.pahans.kichibichiya.b.cx:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,com.pahans.kichibichiya.fragment.UserProfileFragment$Response) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.UserProfileFragment$4 -> com.pahans.kichibichiya.b.cy:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    android.support.v4.content.Loader onCreateLoader(int,android.os.Bundle) -> a
    void onLoaderReset(android.support.v4.content.Loader) -> a
    void onLoadFinished(android.support.v4.content.Loader,android.graphics.Bitmap) -> a
    void onLoadFinished(android.support.v4.content.Loader,java.lang.Object) -> a
com.pahans.kichibichiya.fragment.UserProfileFragment$5 -> com.pahans.kichibichiya.b.cz:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
com.pahans.kichibichiya.fragment.UserProfileFragment$BannerImageLoader -> com.pahans.kichibichiya.b.da:
    twitter4j.User user -> f
    java.lang.String type -> g
    android.content.Context context -> h
    twitter4j.http.HostAddressResolver resolver -> i
    boolean scale_down -> j
    int connection_timeout -> k
    android.graphics.Bitmap loadInBackground() -> f
    void onStartLoading() -> g
    java.io.File getCacheDir() -> v
    java.lang.String getURLFilename(java.lang.String) -> a
    android.graphics.Bitmap createAlphaGradientBanner(android.graphics.Bitmap) -> a
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.fragment.UserProfileFragment$EditTextDialogFragment -> com.pahans.kichibichiya.b.db:
    android.widget.EditText mEditText -> W
    java.lang.String mText -> X
    int mType -> Y
    java.lang.String mTitle -> Z
    long mAccountId -> aa
    com.pahans.kichibichiya.util.ServiceInterface mService -> ab
    void onClick(android.content.DialogInterface,int) -> onClick
    android.app.Dialog onCreateDialog(android.os.Bundle) -> c
    void onSaveInstanceState(android.os.Bundle) -> e
com.pahans.kichibichiya.fragment.UserProfileFragment$FavoritesAction -> com.pahans.kichibichiya.b.dc:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    java.lang.String getSummary() -> c
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserProfileFragment$FriendshipLoader -> com.pahans.kichibichiya.b.dd:
    android.content.Context context -> f
    long account_id -> g
    long user_id -> h
    com.pahans.kichibichiya.fragment.UserProfileFragment$Response loadInBackground() -> f
    void onStartLoading() -> g
    com.pahans.kichibichiya.fragment.UserProfileFragment$Response getFriendship() -> v
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.fragment.UserProfileFragment$IncomingFriendshipsAction -> com.pahans.kichibichiya.b.de:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserProfileFragment$Response -> com.pahans.kichibichiya.b.df:
    java.lang.Object value -> a
    java.lang.Exception exception -> b
com.pahans.kichibichiya.fragment.UserProfileFragment$SavedSearchesAction -> com.pahans.kichibichiya.b.dg:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserProfileFragment$UserBlocksAction -> com.pahans.kichibichiya.b.dh:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserProfileFragment$UserInfoLoader -> com.pahans.kichibichiya.b.di:
    twitter4j.Twitter twitter -> f
    long user_id -> g
    java.lang.String screen_name -> h
    com.pahans.kichibichiya.fragment.UserProfileFragment$Response loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.fragment.UserProfileFragment$UserListsAction -> com.pahans.kichibichiya.b.dj:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserProfileFragment$UserMentionsAction -> com.pahans.kichibichiya.b.dk:
    com.pahans.kichibichiya.fragment.UserProfileFragment this$0 -> a
    long getId() -> a
    java.lang.String getName() -> b
    void onClick() -> onClick
com.pahans.kichibichiya.fragment.UserTimelineFragment -> com.pahans.kichibichiya.b.dl:
    boolean mIsStatusesSaved -> W
    android.support.v4.content.Loader newLoaderInstance(android.os.Bundle) -> c
    void onDestroy() -> t
    void onDestroyView() -> f
    void saveStatuses() -> L
    com.pahans.kichibichiya.util.AsyncTaskManager getAsyncTaskManager() -> F
    void onResume() -> r
    void onListItemClick(android.widget.ListView,android.view.View,int,long) -> a
    void onCreate(android.os.Bundle) -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void onScroll(android.widget.AbsListView,int,int,int) -> onScroll
    void onScrollStateChanged(android.widget.AbsListView,int) -> onScrollStateChanged
    android.content.SharedPreferences getSharedPreferences() -> I
    boolean onItemLongClick(android.widget.AdapterView,android.view.View,int,long) -> onItemLongClick
com.pahans.kichibichiya.fragment.WebMapFragment -> com.pahans.kichibichiya.b.dm:
    android.net.Uri mUri -> a
    double latitude -> b
    double longitude -> c
    void center() -> B
    void onActivityCreated(android.os.Bundle) -> d
    void getLocation() -> C
    void setupWebView() -> D
    android.net.Uri access$2(com.pahans.kichibichiya.fragment.WebMapFragment) -> a
com.pahans.kichibichiya.fragment.WebMapFragment$JavaScriptInterface -> com.pahans.kichibichiya.b.dn:
    com.pahans.kichibichiya.fragment.WebMapFragment this$0 -> a
com.pahans.kichibichiya.fragment.WebMapFragment$MapWebViewClient -> com.pahans.kichibichiya.b.do:
    com.pahans.kichibichiya.fragment.WebMapFragment this$0 -> a
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.pahans.kichibichiya.fragment.WebViewFragment -> com.pahans.kichibichiya.b.dp:
    android.webkit.WebView mWebView -> a
    android.webkit.WebView getWebView() -> A
    void loadUrl(java.lang.String) -> a
    void onActivityCreated(android.os.Bundle) -> d
    android.view.View onCreateView(android.view.LayoutInflater,android.view.ViewGroup,android.os.Bundle) -> a
    void setWebViewClient(android.webkit.WebViewClient) -> a
com.pahans.kichibichiya.fragment.WebViewFragment$DefaultWebViewClient -> com.pahans.kichibichiya.b.dq:
    android.support.v4.app.FragmentActivity mActivity -> a
    android.content.SharedPreferences mPreferences -> b
    void onPageFinished(android.webkit.WebView,java.lang.String) -> onPageFinished
    void onPageStarted(android.webkit.WebView,java.lang.String,android.graphics.Bitmap) -> onPageStarted
    void onReceivedSslError(android.webkit.WebView,android.webkit.SslErrorHandler,android.net.http.SslError) -> onReceivedSslError
    boolean shouldOverrideUrlLoading(android.webkit.WebView,java.lang.String) -> shouldOverrideUrlLoading
com.pahans.kichibichiya.graphic.AlphaPatternDrawable -> com.pahans.kichibichiya.c.a:
    int mRectangleSize -> a
    int numRectanglesHorizontal -> b
    int numRectanglesVertical -> c
    android.graphics.Bitmap mBitmap -> d
    void draw(android.graphics.Canvas) -> draw
    int getOpacity() -> getOpacity
    void setAlpha(int) -> setAlpha
    void setColorFilter(android.graphics.ColorFilter) -> setColorFilter
    void onBoundsChange(android.graphics.Rect) -> onBoundsChange
    void generatePatternBitmap() -> a
com.pahans.kichibichiya.loader.ActivitiesAboutMeLoader -> com.pahans.kichibichiya.d.a:
    twitter4j.ResponseList getActivities(twitter4j.Paging) -> a
com.pahans.kichibichiya.loader.DummyParcelableStatusesLoader -> com.pahans.kichibichiya.d.b:
    java.util.List loadInBackground() -> f
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.loader.ExtensionsListLoader -> com.pahans.kichibichiya.d.c:
    com.pahans.kichibichiya.loader.ExtensionsListLoader$PackageIntentReceiver mPackageObserver -> f
    com.pahans.kichibichiya.loader.ExtensionsListLoader$InterestingConfigChanges mLastConfig -> g
    android.content.pm.PackageManager mPackageManager -> h
    java.util.List loadInBackground() -> f
    void onReset() -> i
    void onStartLoading() -> g
    void onStopLoading() -> h
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.loader.ExtensionsListLoader$InterestingConfigChanges -> com.pahans.kichibichiya.d.d:
    android.content.res.Configuration mLastConfiguration -> a
    int mLastDensity -> b
    boolean applyNewConfig(android.content.res.Resources) -> a
com.pahans.kichibichiya.loader.ExtensionsListLoader$PackageIntentReceiver -> com.pahans.kichibichiya.d.e:
    com.pahans.kichibichiya.loader.ExtensionsListLoader mLoader -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.loader.IDsUsersLoader -> com.pahans.kichibichiya.d.f:
    long mMaxId -> f
    long mAccountId -> g
    twitter4j.IDs mIDs -> h
    android.content.SharedPreferences mPreferences -> i
    int mLoadItemLimit -> j
    twitter4j.IDs getIDs() -> f
    java.util.List getUsers() -> v
com.pahans.kichibichiya.loader.IncomingFriendshipsLoader -> com.pahans.kichibichiya.d.g:
    twitter4j.IDs getIDs() -> f
com.pahans.kichibichiya.loader.ParcelableStatusesLoader -> com.pahans.kichibichiya.d.h:
    twitter4j.Twitter mTwitter -> f
    long mAccountId -> g
    java.lang.String mClassName -> h
    java.util.List mData -> i
    boolean mFirstLoad -> j
    boolean mIsHomeTab -> k
    java.lang.Long mLastViewedId -> l
    java.lang.Long getLastViewedId() -> v
    boolean deleteStatus(long) -> a
    long getAccountId() -> w
    java.lang.String getClassName() -> x
    java.util.List getData() -> y
    twitter4j.Twitter getTwitter() -> z
    boolean isFirstLoad() -> A
    boolean isHomeTab() -> B
    void onStartLoading() -> g
    void setLastViewedId(java.lang.Long) -> a
com.pahans.kichibichiya.loader.ParcelableUsersLoader -> com.pahans.kichibichiya.d.i:
    twitter4j.Twitter mTwitter -> f
    java.util.List mUsersList -> g
    long mAccountId -> h
    twitter4j.Twitter getTwitter() -> w
    java.util.List getUsers() -> v
    java.util.List loadInBackground() -> x
    void onStartLoading() -> g
    boolean hasId(long) -> a
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.loader.SavedSearchesLoader -> com.pahans.kichibichiya.d.j:
    twitter4j.Twitter twitter -> f
    twitter4j.ResponseList loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.loader.TweetSearchLoader -> com.pahans.kichibichiya.d.k:
    java.lang.String mQuery -> f
    java.util.List getStatuses(twitter4j.Paging) -> a
    java.util.List loadInBackground() -> f
    void writeSerializableStatuses(java.lang.Object,android.content.Context,java.util.List,long,android.os.Bundle) -> a
com.pahans.kichibichiya.loader.Twitter4JActivitiesLoader -> com.pahans.kichibichiya.d.l:
    twitter4j.Twitter mTwitter -> f
    long mAccountId -> g
    java.util.List mData -> h
    boolean mIsFirstLoad -> i
    boolean mIsHomeTab -> j
    java.lang.String mClassName -> k
    long getAccountId() -> f
    twitter4j.Twitter getTwitter() -> v
    java.util.List loadInBackground() -> w
    void onStartLoading() -> g
    twitter4j.ResponseList getActivities(twitter4j.Paging) -> a
    void writeSerializableStatuses(java.lang.Object,android.content.Context,java.util.List,android.os.Bundle) -> a
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.loader.Twitter4JStatusLoader -> com.pahans.kichibichiya.d.m:
    long mMaxId -> f
    long mSinceId -> g
    java.util.List getStatuses(twitter4j.Paging) -> a
    java.util.List loadInBackground() -> f
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.loader.UserBlocksLoader -> com.pahans.kichibichiya.d.n:
    twitter4j.IDs getIDs() -> f
com.pahans.kichibichiya.loader.UserFavoritesLoader -> com.pahans.kichibichiya.d.o:
    long mUserId -> f
    java.lang.String mUserScreenName -> g
    twitter4j.ResponseList getStatuses(twitter4j.Paging) -> b
    java.util.List loadInBackground() -> f
    void writeSerializableStatuses(java.lang.Object,android.content.Context,java.util.List,long,android.os.Bundle) -> a
    java.util.List getStatuses(twitter4j.Paging) -> a
com.pahans.kichibichiya.loader.UserFollowersLoader -> com.pahans.kichibichiya.d.p:
    long mUserId -> f
    java.lang.String mScreenName -> g
    twitter4j.IDs getIDs() -> f
com.pahans.kichibichiya.loader.UserFriendsLoader -> com.pahans.kichibichiya.d.q:
    long mUserId -> f
    java.lang.String mScreenName -> g
    twitter4j.IDs getIDs() -> f
com.pahans.kichibichiya.loader.UserListMembersLoader -> com.pahans.kichibichiya.d.r:
    int mListId -> f
    long mAccountId -> g
    long mUserId -> h
    long mCursor -> i
    java.lang.String mScreenName -> j
    java.lang.String mListName -> k
    long mOwnerId -> l
    int mUserListId -> t
    long mNextCursor -> u
    long mPrevCursor -> v
    long getNextCursor() -> f
    long getOwnerId() -> y
    int getUserListId() -> z
    java.util.List getUsers() -> v
com.pahans.kichibichiya.loader.UserListSubscribersLoader -> com.pahans.kichibichiya.d.s:
    int mListId -> f
    long mAccountId -> g
    long mUserId -> h
    long mCursor -> i
    java.lang.String mScreenName -> j
    java.lang.String mListName -> k
    long mNextCursor -> l
    long mPrevCursor -> t
    long getNextCursor() -> f
    java.util.List getUsers() -> v
com.pahans.kichibichiya.loader.UserListTimelineLoader -> com.pahans.kichibichiya.d.t:
    long mUserId -> f
    java.lang.String mScreenName -> g
    java.lang.String mListName -> h
    int mListId -> i
    android.content.Context mContext -> j
    twitter4j.ResponseList getStatuses(twitter4j.Paging) -> b
    java.util.List loadInBackground() -> f
    void writeSerializableStatuses(java.lang.Object,android.content.Context,java.util.List,long,android.os.Bundle) -> a
    java.util.List getStatuses(twitter4j.Paging) -> a
com.pahans.kichibichiya.loader.UserListsLoader -> com.pahans.kichibichiya.d.u:
    twitter4j.Twitter mTwitter -> f
    long mAccountId -> g
    long mUserId -> h
    java.lang.String mScreenName -> i
    com.pahans.kichibichiya.loader.UserListsLoader$UserListsData loadInBackground() -> f
    void onStartLoading() -> g
    java.lang.Object loadInBackground() -> d
com.pahans.kichibichiya.loader.UserListsLoader$UserListsData -> com.pahans.kichibichiya.d.v:
    java.util.List lists -> a
    java.util.List memberships -> b
    java.util.List getLists() -> a
    java.util.List getMemberships() -> b
    java.util.List access$0(com.pahans.kichibichiya.loader.UserListsLoader$UserListsData) -> a
    java.util.List access$1(com.pahans.kichibichiya.loader.UserListsLoader$UserListsData) -> b
com.pahans.kichibichiya.loader.UserSearchLoader -> com.pahans.kichibichiya.d.w:
    java.lang.String mQuery -> f
    int mPage -> g
    long mAccountId -> h
    java.util.List getUsers() -> v
com.pahans.kichibichiya.loader.UserTimelineLoader -> com.pahans.kichibichiya.d.x:
    long mUserId -> f
    java.lang.String mUserScreenName -> g
    int mTotalItemsCount -> h
    twitter4j.ResponseList getStatuses(twitter4j.Paging) -> b
    java.util.List loadInBackground() -> f
    void writeSerializableStatuses(java.lang.Object,android.content.Context,java.util.List,long,android.os.Bundle) -> a
    java.util.List getStatuses(twitter4j.Paging) -> a
com.pahans.kichibichiya.model.Account -> com.pahans.kichibichiya.model.a:
    java.lang.String username -> a
    long account_id -> b
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
    java.util.List getAccounts(android.content.Context,boolean) -> a
com.pahans.kichibichiya.model.Account$Indices -> com.pahans.kichibichiya.model.b:
    int username -> a
    int account_id -> b
com.pahans.kichibichiya.model.AccountViewHolder -> com.pahans.kichibichiya.model.c:
    android.widget.ImageView profile_image -> a
    android.widget.TextView name -> b
    android.widget.TextView screen_name -> c
    android.widget.CheckBox checkbox -> d
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout content -> e
    android.view.View default_indicator -> f
    void setAccountColor(int) -> a
    void setIsDefault(boolean) -> a
com.pahans.kichibichiya.model.ActivityViewHolder -> com.pahans.kichibichiya.model.d:
    android.widget.ImageView profile_image -> a
    android.widget.ImageView activity_profile_image_1 -> b
    android.widget.ImageView activity_profile_image_2 -> c
    android.widget.ImageView activity_profile_image_3 -> d
    android.widget.ImageView activity_profile_image_4 -> e
    android.widget.ImageView activity_profile_image_5 -> f
    android.widget.TextView title -> g
    android.widget.TextView text -> h
    android.widget.TextView time -> i
    android.widget.TextView reply_status -> j
    android.view.ViewGroup activity_profile_image_container -> k
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout content -> l
    float text_size -> m
    void reset() -> a
    void setTextSize(float) -> a
com.pahans.kichibichiya.model.DirectMessageConversationViewHolder -> com.pahans.kichibichiya.model.e:
    android.widget.ImageView profile_image_left -> a
    android.widget.ImageView profile_image_right -> b
    android.widget.TextView screen_name -> c
    android.widget.TextView time -> d
    android.widget.TextView text -> e
    com.pahans.sinhala.droid.project.SCTextView name -> f
    android.widget.LinearLayout name_container -> g
    float text_size -> h
    void setTextSize(float) -> a
com.pahans.kichibichiya.model.DirectMessageCursorIndices -> com.pahans.kichibichiya.model.f:
    int account_id -> a
    int message_id -> b
    int message_timestamp -> c
    int sender_name -> d
    int sender_screen_name -> e
    int text -> f
    int recipient_name -> g
    int recipient_screen_name -> h
    int sender_profile_image_url -> i
    int is_outgoing -> j
    int recipient_profile_image_url -> k
    int sender_id -> l
    int recipient_id -> m
com.pahans.kichibichiya.model.DirectMessageEntryViewHolder -> com.pahans.kichibichiya.model.g:
    android.widget.ImageView profile_image -> a
    android.widget.TextView name -> b
    android.widget.TextView screen_name -> c
    android.widget.TextView text -> d
    android.widget.TextView time -> e
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout content -> f
    float text_size -> g
    boolean account_color_enabled -> h
    void setAccountColor(int) -> a
    void setAccountColorEnabled(boolean) -> a
    void setTextSize(float) -> a
    void setUserColor(int) -> b
com.pahans.kichibichiya.model.DraftItem -> com.pahans.kichibichiya.model.h:
    long[] account_ids -> a
    long _id -> b
    long in_reply_to_status_id -> c
    java.lang.String text -> d
    java.lang.String media_uri -> e
    java.lang.String in_reply_to_name -> f
    java.lang.String in_reply_to_screen_name -> g
    boolean is_quote -> h
    boolean is_image_attached -> i
    boolean is_photo_attached -> j
com.pahans.kichibichiya.model.ExtensionsViewHolder -> com.pahans.kichibichiya.model.i:
    android.widget.ImageView icon -> a
    android.widget.TextView text1 -> b
    android.widget.TextView text2 -> c
com.pahans.kichibichiya.model.ImageSpec -> com.pahans.kichibichiya.model.j:
    java.lang.String thumbnail_link -> a
    java.lang.String image_link -> b
    java.lang.String toString() -> toString
com.pahans.kichibichiya.model.ListAction -> com.pahans.kichibichiya.model.k:
    long getId() -> a
    java.lang.String getName() -> b
    java.lang.String getSummary() -> c
    void onClick() -> onClick
    boolean onLongClick() -> d
    java.lang.String toString() -> toString
com.pahans.kichibichiya.model.Panes -> com.pahans.kichibichiya.model.l:
com.pahans.kichibichiya.model.Panes$Left -> com.pahans.kichibichiya.model.m:
com.pahans.kichibichiya.model.Panes$Right -> com.pahans.kichibichiya.model.n:
com.pahans.kichibichiya.model.ParcelableDirectMessage -> com.pahans.kichibichiya.model.ParcelableDirectMessage:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    java.util.Comparator MESSAGE_ID_COMPARATOR -> a
    long account_id -> b
    long message_id -> c
    long message_timestamp -> d
    long sender_id -> e
    long recipient_id -> f
    boolean is_out_going -> g
    java.lang.String text -> h
    java.lang.String sender_name -> i
    java.lang.String recipient_name -> j
    java.lang.String sender_screen_name -> k
    java.lang.String recipient_screen_name -> l
    java.net.URL sender_profile_image_url -> m
    java.net.URL recipient_profile_image_url -> n
    int describeContents() -> describeContents
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
com.pahans.kichibichiya.model.ParcelableDirectMessage$1 -> com.pahans.kichibichiya.model.o:
    com.pahans.kichibichiya.model.ParcelableDirectMessage createFromParcel(android.os.Parcel) -> a
    com.pahans.kichibichiya.model.ParcelableDirectMessage[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.pahans.kichibichiya.model.ParcelableDirectMessage$2 -> com.pahans.kichibichiya.model.p:
    int compare(com.pahans.kichibichiya.model.ParcelableDirectMessage,com.pahans.kichibichiya.model.ParcelableDirectMessage) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.model.ParcelableLocation -> com.pahans.kichibichiya.model.ParcelableLocation:
    double latitude -> a
    double longitude -> b
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int describeContents() -> describeContents
    boolean isValid() -> a
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    boolean isValidLocation(com.pahans.kichibichiya.model.ParcelableLocation) -> a
com.pahans.kichibichiya.model.ParcelableLocation$1 -> com.pahans.kichibichiya.model.q:
    com.pahans.kichibichiya.model.ParcelableUserList createFromParcel(android.os.Parcel) -> a
    com.pahans.kichibichiya.model.ParcelableUserList[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.pahans.kichibichiya.model.ParcelableStatus -> com.pahans.kichibichiya.model.ParcelableStatus:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long retweet_id -> a
    long retweeted_by_id -> b
    long status_id -> c
    long account_id -> d
    long user_id -> e
    long status_timestamp -> f
    long retweet_count -> g
    long in_reply_to_status_id -> h
    long my_retweet_id -> i
    boolean is_gap -> j
    boolean is_retweet -> k
    boolean is_favorite -> l
    boolean is_protected -> m
    boolean is_verified -> n
    boolean has_media -> o
    java.lang.String retweeted_by_name -> p
    java.lang.String retweeted_by_screen_name -> q
    java.lang.String text_html -> r
    java.lang.String text_plain -> s
    java.lang.String name -> t
    java.lang.String screen_name -> u
    java.lang.String in_reply_to_screen_name -> v
    java.lang.String source -> w
    java.lang.String profile_image_url_string -> x
    java.lang.String image_preview_url_string -> y
    java.lang.String image_orig_url_string -> z
    java.lang.String location_string -> A
    java.lang.String text_unescaped -> B
    com.pahans.kichibichiya.model.ParcelableLocation location -> C
    android.text.Spanned text -> D
    java.net.URL profile_image_url -> E
    java.net.URL image_preview_url -> F
    java.util.Comparator TIMESTAMP_COMPARATOR -> G
    java.util.Comparator REVERSE_ID_COMPARATOR -> H
    int compareTo(com.pahans.kichibichiya.model.ParcelableStatus) -> a
    int describeContents() -> describeContents
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    long getTime(java.util.Date) -> a
    int compareTo(java.lang.Object) -> compareTo
com.pahans.kichibichiya.model.ParcelableStatus$1 -> com.pahans.kichibichiya.model.r:
    com.pahans.kichibichiya.model.ParcelableStatus createFromParcel(android.os.Parcel) -> a
    com.pahans.kichibichiya.model.ParcelableStatus[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.pahans.kichibichiya.model.ParcelableStatus$2 -> com.pahans.kichibichiya.model.s:
    int compare(com.pahans.kichibichiya.model.ParcelableStatus,com.pahans.kichibichiya.model.ParcelableStatus) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.model.ParcelableStatus$3 -> com.pahans.kichibichiya.model.t:
    int compare(com.pahans.kichibichiya.model.ParcelableStatus,com.pahans.kichibichiya.model.ParcelableStatus) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.model.ParcelableUser -> com.pahans.kichibichiya.model.ParcelableUser:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    long account_id -> a
    long user_id -> b
    long created_at -> c
    long position -> d
    boolean is_protected -> e
    boolean is_verified -> f
    java.lang.String description -> g
    java.lang.String name -> h
    java.lang.String screen_name -> i
    java.lang.String location -> j
    java.lang.String profile_image_url_string -> k
    java.net.URL profile_image_url -> l
    java.util.Comparator POSITION_COMPARATOR -> m
    int describeContents() -> describeContents
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    long getTime(java.util.Date) -> a
com.pahans.kichibichiya.model.ParcelableUser$1 -> com.pahans.kichibichiya.model.u:
    com.pahans.kichibichiya.model.ParcelableUser createFromParcel(android.os.Parcel) -> a
    com.pahans.kichibichiya.model.ParcelableUser[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.pahans.kichibichiya.model.ParcelableUser$2 -> com.pahans.kichibichiya.model.v:
    int compare(com.pahans.kichibichiya.model.ParcelableUser,com.pahans.kichibichiya.model.ParcelableUser) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.model.ParcelableUserList -> com.pahans.kichibichiya.model.ParcelableUserList:
    android.os.Parcelable$Creator CREATOR -> CREATOR
    int list_id -> a
    long account_id -> b
    long user_id -> c
    long position -> d
    boolean is_public -> e
    boolean is_following -> f
    java.lang.String description -> g
    java.lang.String name -> h
    java.lang.String user_screen_name -> i
    java.lang.String user_name -> j
    java.lang.String user_profile_image_url_string -> k
    java.net.URL user_profile_image_url -> l
    int compareTo(com.pahans.kichibichiya.model.ParcelableUserList) -> a
    int describeContents() -> describeContents
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void writeToParcel(android.os.Parcel,int) -> writeToParcel
    int compareTo(java.lang.Object) -> compareTo
com.pahans.kichibichiya.model.ParcelableUserList$1 -> com.pahans.kichibichiya.model.w:
    com.pahans.kichibichiya.model.ParcelableUserList createFromParcel(android.os.Parcel) -> a
    com.pahans.kichibichiya.model.ParcelableUserList[] newArray(int) -> a
    java.lang.Object createFromParcel(android.os.Parcel) -> createFromParcel
    java.lang.Object[] newArray(int) -> newArray
com.pahans.kichibichiya.model.PreviewImage -> com.pahans.kichibichiya.model.x:
    boolean has_image -> a
    java.lang.String matched_url -> b
    java.lang.String orig_url -> c
com.pahans.kichibichiya.model.SerializableStatus -> com.pahans.kichibichiya.model.y:
    long retweet_id -> a
    long retweeted_by_id -> b
    long status_id -> c
    long account_id -> d
    long user_id -> e
    long status_timestamp -> f
    long retweet_count -> g
    long in_reply_to_status_id -> h
    long my_retweet_id -> i
    boolean is_gap -> j
    boolean is_retweet -> k
    boolean is_favorite -> l
    boolean is_protected -> m
    boolean is_verified -> n
    boolean has_media -> o
    java.lang.String retweeted_by_name -> p
    java.lang.String retweeted_by_screen_name -> q
    java.lang.String text_html -> r
    java.lang.String text_plain -> s
    java.lang.String name -> t
    java.lang.String screen_name -> u
    java.lang.String in_reply_to_screen_name -> v
    java.lang.String source -> w
    java.lang.String profile_image_url_string -> x
    java.lang.String image_preview_url_string -> y
    java.lang.String image_orig_url_string -> z
    java.lang.String location_string -> A
    java.lang.String location -> B
    java.net.URL profile_image_url -> C
    java.net.URL image_preview_url -> D
    boolean equals(java.lang.Object) -> equals
    java.lang.String toString() -> toString
com.pahans.kichibichiya.model.StatusCursorIndices -> com.pahans.kichibichiya.model.z:
    int account_id -> a
    int status_id -> b
    int status_timestamp -> c
    int name -> d
    int screen_name -> e
    int text -> f
    int text_plain -> g
    int profile_image_url -> h
    int is_retweet -> i
    int is_favorite -> j
    int is_gap -> k
    int location -> l
    int is_protected -> m
    int is_verified -> n
    int in_reply_to_status_id -> o
    int in_reply_to_screen_name -> p
    int my_retweet_id -> q
    int retweeted_by_name -> r
    int retweeted_by_screen_name -> s
    int retweet_id -> t
    int retweeted_by_id -> u
    int user_id -> v
    int source -> w
    int retweet_count -> x
com.pahans.kichibichiya.model.StatusViewHolder -> com.pahans.kichibichiya.model.aa:
    android.widget.ImageView profile_image -> a
    android.widget.ImageView image_preview -> b
    android.widget.TextView name -> c
    android.widget.TextView screen_name -> d
    android.widget.TextView text -> e
    android.widget.TextView time -> f
    android.widget.TextView reply_retweet_status -> g
    android.view.View gap_indicator -> i
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout content -> j
    boolean show_as_gap -> h
    boolean account_color_enabled -> k
    float text_size -> l
    void setAccountColor(int) -> a
    void setAccountColorEnabled(boolean) -> a
    void setHighlightColor(int) -> b
    void setSelected(boolean) -> b
    void setShowAsGap(boolean) -> c
    void setTextSize(float) -> a
    void setUserColor(int) -> c
com.pahans.kichibichiya.model.TabSpec -> com.pahans.kichibichiya.model.ab:
    java.lang.String name -> a
    java.lang.Object icon -> b
    java.lang.Class cls -> c
    android.os.Bundle args -> d
    int position -> e
    boolean equals(java.lang.Object) -> equals
com.pahans.kichibichiya.model.UserListViewHolder -> com.pahans.kichibichiya.model.ac:
    android.widget.ImageView profile_image -> a
    android.widget.TextView name -> b
    android.widget.TextView description -> c
    android.widget.TextView owner -> d
    float text_size -> e
    void setTextSize(float) -> a
com.pahans.kichibichiya.model.UserViewHolder -> com.pahans.kichibichiya.model.ad:
    android.widget.ImageView profile_image -> a
    android.widget.TextView name -> b
    android.widget.TextView screen_name -> c
    android.widget.TextView description -> d
    com.pahans.kichibichiya.view.ColorLabelRelativeLayout content -> e
    boolean account_color_enabled -> f
    float text_size -> g
    void setAccountColor(int) -> a
    void setAccountColorEnabled(boolean) -> a
    void setSelected(boolean) -> b
    void setTextSize(float) -> a
    void setUserColor(int) -> b
com.pahans.kichibichiya.preference.AutoRefreshContentPreference -> com.pahans.kichibichiya.preference.AutoRefreshContentPreference:
    boolean[] getDefaults() -> a
    java.lang.String[] getKeys() -> b
    java.lang.String[] getNames() -> c
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
    void onClick(android.content.DialogInterface,int) -> onClick
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
com.pahans.kichibichiya.preference.ClearCachePreference -> com.pahans.kichibichiya.preference.ClearCachePreference:
    com.pahans.kichibichiya.preference.ClearCachePreference$ClearCacheTask mClearCacheTask -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.pahans.kichibichiya.preference.ClearCachePreference$ClearCacheTask -> com.pahans.kichibichiya.preference.a:
    android.content.Context context -> a
    android.app.ProgressDialog mProgress -> b
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPreExecute() -> onPreExecute
    void deleteRecursive(java.io.File) -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.preference.ClearDatabasesPreference -> com.pahans.kichibichiya.preference.ClearDatabasesPreference:
    com.pahans.kichibichiya.preference.ClearDatabasesPreference$ClearCacheTask mClearCacheTask -> a
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
com.pahans.kichibichiya.preference.ClearDatabasesPreference$ClearCacheTask -> com.pahans.kichibichiya.preference.b:
    android.content.Context context -> a
    android.app.ProgressDialog mProgress -> b
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.lang.Void) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.preference.ColorPickerPreference -> com.pahans.kichibichiya.preference.ColorPickerPreference:
    android.view.View mView -> a
    int mDefaultValue -> b
    int mValue -> c
    float mDensity -> d
    boolean mAlphaSliderEnabled -> e
    com.pahans.kichibichiya.view.ColorPickerView mColorPicker -> f
    void onClick(android.content.DialogInterface,int) -> onClick
    void onColorChanged(int) -> a
    void onBindView(android.view.View) -> onBindView
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    void onSetInitialValue(boolean,java.lang.Object) -> onSetInitialValue
    int getValue() -> a
    void init(android.content.Context,android.util.AttributeSet) -> a
    void setPreviewColor() -> b
com.pahans.kichibichiya.preference.HomeRefreshContentPreference -> com.pahans.kichibichiya.preference.HomeRefreshContentPreference:
    boolean[] getDefaults() -> a
    java.lang.String[] getKeys() -> b
    java.lang.String[] getNames() -> c
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
    void onClick(android.content.DialogInterface,int) -> onClick
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
com.pahans.kichibichiya.preference.ImageUploaderPickerPreference -> com.pahans.kichibichiya.preference.ImageUploaderPickerPreference:
    android.content.SharedPreferences mPreferences -> a
    android.content.pm.PackageManager mPackageManager -> b
    com.pahans.kichibichiya.preference.ImageUploaderPickerPreference$ImageUploaderSpec[] mAvailableImageUploaders -> c
    void onClick(android.content.DialogInterface,int) -> onClick
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    int getIndex(java.lang.String) -> a
com.pahans.kichibichiya.preference.ImageUploaderPickerPreference$ImageUploaderSpec -> com.pahans.kichibichiya.preference.c:
    java.lang.String name -> a
    java.lang.String cls -> b
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
    java.lang.String access$0(com.pahans.kichibichiya.preference.ImageUploaderPickerPreference$ImageUploaderSpec) -> a
com.pahans.kichibichiya.preference.MultiSelectListPreference -> com.pahans.kichibichiya.preference.d:
    boolean[] mValues -> a
    boolean[] mDefaultValues -> b
    android.content.SharedPreferences prefs -> c
    java.lang.String[] mNames -> d
    java.lang.String[] mKeys -> e
    android.os.Handler mDialogWorkaroundHandler -> f
    void onClick(android.content.DialogInterface,int) -> onClick
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    boolean[] getDefaults() -> a
    java.lang.String[] getKeys() -> b
    java.lang.String[] getNames() -> c
    android.widget.ListView findListView(android.view.View) -> b
    android.widget.ListView access$0(android.view.View) -> a
    android.os.Handler access$1(com.pahans.kichibichiya.preference.MultiSelectListPreference) -> a
com.pahans.kichibichiya.preference.MultiSelectListPreference$1 -> com.pahans.kichibichiya.preference.e:
    com.pahans.kichibichiya.preference.MultiSelectListPreference this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.pahans.kichibichiya.preference.MultiSelectListPreference$2 -> com.pahans.kichibichiya.preference.f:
    com.pahans.kichibichiya.preference.MultiSelectListPreference this$0 -> a
    void run() -> run
com.pahans.kichibichiya.preference.MultiSelectListPreference$WrapperAdapter -> com.pahans.kichibichiya.preference.g:
    android.widget.ListAdapter wrapped -> a
    boolean areAllItemsEnabled() -> areAllItemsEnabled
    int getCount() -> getCount
    java.lang.Object getItem(int) -> getItem
    long getItemId(int) -> getItemId
    int getItemViewType(int) -> getItemViewType
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    int getViewTypeCount() -> getViewTypeCount
    boolean hasStableIds() -> hasStableIds
    boolean isEmpty() -> isEmpty
    boolean isEnabled(int) -> isEnabled
    void registerDataSetObserver(android.database.DataSetObserver) -> registerDataSetObserver
    void unregisterDataSetObserver(android.database.DataSetObserver) -> unregisterDataSetObserver
    android.widget.TextView findTextView(android.view.View) -> a
com.pahans.kichibichiya.preference.NotificationContentPreference -> com.pahans.kichibichiya.preference.NotificationContentPreference:
    boolean[] getDefaults() -> a
    java.lang.String[] getKeys() -> b
    java.lang.String[] getNames() -> c
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
    void onClick(android.content.DialogInterface,int) -> onClick
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
com.pahans.kichibichiya.preference.NotificationTypePreference -> com.pahans.kichibichiya.preference.NotificationTypePreference:
    boolean[] getDefaults() -> a
    java.lang.String[] getKeys() -> b
    java.lang.String[] getNames() -> c
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
    void onClick(android.content.DialogInterface,int) -> onClick
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
com.pahans.kichibichiya.preference.SlientNotificationsPreference -> com.pahans.kichibichiya.preference.SlientNotificationsPreference:
    boolean[] getDefaults() -> a
    java.lang.String[] getKeys() -> b
    java.lang.String[] getNames() -> c
    void onClick(android.content.DialogInterface,int,boolean) -> onClick
    void onClick(android.content.DialogInterface,int) -> onClick
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
com.pahans.kichibichiya.preference.StatusPreviewPreference -> com.pahans.kichibichiya.preference.StatusPreviewPreference:
    android.view.LayoutInflater mInflater -> a
    com.pahans.kichibichiya.model.StatusViewHolder mHolder -> b
    android.content.SharedPreferences mPreferences -> c
    void onSharedPreferenceChanged(android.content.SharedPreferences,java.lang.String) -> onSharedPreferenceChanged
    void onBindView(android.view.View) -> onBindView
    android.view.View onCreateView(android.view.ViewGroup) -> onCreateView
    void setImagePreview() -> a
    void setName() -> b
    void setProfileImage() -> c
    void setTextSize() -> d
    void setTime() -> e
com.pahans.kichibichiya.preference.TrendsLocationPreference -> com.pahans.kichibichiya.preference.TrendsLocationPreference:
    android.content.SharedPreferences mPreferences -> a
    int mCheckedWoeId -> b
    com.pahans.kichibichiya.preference.TrendsLocationPreference$GetAvailableTrendsTask mGetAvailableTrendsTask -> c
    com.pahans.kichibichiya.preference.TrendsLocationPreference$AvailableTrendsAdapter mAdapter -> d
    java.util.Comparator LOCATION_COMPATATOR -> e
    android.app.AlertDialog mDialog -> f
    void onClick(android.content.DialogInterface,int) -> onClick
    boolean onPreferenceClick(android.preference.Preference) -> onPreferenceClick
    java.util.Comparator access$0() -> a
    com.pahans.kichibichiya.preference.TrendsLocationPreference$AvailableTrendsAdapter access$1(com.pahans.kichibichiya.preference.TrendsLocationPreference) -> a
    int access$2(com.pahans.kichibichiya.preference.TrendsLocationPreference) -> b
    void access$3(com.pahans.kichibichiya.preference.TrendsLocationPreference,android.app.AlertDialog) -> a
com.pahans.kichibichiya.preference.TrendsLocationPreference$1 -> com.pahans.kichibichiya.preference.h:
    int compare(twitter4j.Location,twitter4j.Location) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.preference.TrendsLocationPreference$AvailableTrendsAdapter -> com.pahans.kichibichiya.preference.i:
    java.util.ArrayList mData -> b
    android.view.LayoutInflater mInflater -> c
    com.pahans.kichibichiya.preference.TrendsLocationPreference this$0 -> a
    int findItemPosition(int) -> a
    int getCount() -> getCount
    twitter4j.Location getItem(int) -> b
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setData(java.util.List) -> a
    java.lang.Object getItem(int) -> getItem
com.pahans.kichibichiya.preference.TrendsLocationPreference$GetAvailableTrendsTask -> com.pahans.kichibichiya.preference.j:
    android.app.ProgressDialog mProgress -> b
    com.pahans.kichibichiya.preference.TrendsLocationPreference this$0 -> a
    void onCancel(android.content.DialogInterface) -> onCancel
    twitter4j.ResponseList doInBackground(java.lang.Void[]) -> a
    void onPostExecute(twitter4j.ResponseList) -> a
    void onPreExecute() -> onPreExecute
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.preference.TweetShortenerPickerPreference -> com.pahans.kichibichiya.preference.TweetShortenerPickerPreference:
    android.content.SharedPreferences mPreferences -> a
    android.content.pm.PackageManager mPackageManager -> b
    com.pahans.kichibichiya.preference.TweetShortenerPickerPreference$TweetShortenerSpec[] mAvailableTweetShorteners -> c
    void onClick(android.content.DialogInterface,int) -> onClick
    void onPrepareDialogBuilder(android.app.AlertDialog$Builder) -> onPrepareDialogBuilder
    int getIndex(java.lang.String) -> a
com.pahans.kichibichiya.preference.TweetShortenerPickerPreference$TweetShortenerSpec -> com.pahans.kichibichiya.preference.k:
    java.lang.String name -> a
    java.lang.String cls -> b
    char charAt(int) -> charAt
    int length() -> length
    java.lang.CharSequence subSequence(int,int) -> subSequence
    java.lang.String toString() -> toString
    java.lang.String access$0(com.pahans.kichibichiya.preference.TweetShortenerPickerPreference$TweetShortenerSpec) -> a
com.pahans.kichibichiya.provider.RecentSearchProvider -> com.pahans.kichibichiya.provider.RecentSearchProvider:
com.pahans.kichibichiya.provider.TweetStore -> com.pahans.kichibichiya.provider.a:
    android.net.Uri[] STATUSES_URIS -> a
    android.net.Uri[] CACHE_URIS -> b
    android.net.Uri[] DIRECT_MESSAGES_URIS -> c
    android.net.Uri NULL_CONTENT_URI -> d
    android.net.Uri NOTOFICATIONS_CONTENT_URI -> e
com.pahans.kichibichiya.provider.TweetStore$Accounts -> com.pahans.kichibichiya.provider.b:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
com.pahans.kichibichiya.provider.TweetStore$CachedStatuses -> com.pahans.kichibichiya.provider.c:
    android.net.Uri CONTENT_URI -> a
com.pahans.kichibichiya.provider.TweetStore$CachedTrends -> com.pahans.kichibichiya.provider.d:
    java.lang.String[] COLUMNS -> a
    java.lang.String[] TYPES -> b
com.pahans.kichibichiya.provider.TweetStore$CachedTrends$Local -> com.pahans.kichibichiya.provider.e:
    android.net.Uri CONTENT_URI -> c
com.pahans.kichibichiya.provider.TweetStore$CachedUsers -> com.pahans.kichibichiya.provider.f:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
com.pahans.kichibichiya.provider.TweetStore$DirectMessages -> com.pahans.kichibichiya.provider.g:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
com.pahans.kichibichiya.provider.TweetStore$DirectMessages$Conversation -> com.pahans.kichibichiya.provider.h:
    android.net.Uri CONTENT_URI -> d
    android.net.Uri CONTENT_URI_SCREEN_NAME -> e
com.pahans.kichibichiya.provider.TweetStore$DirectMessages$Conversation$QueryBuilder -> com.pahans.kichibichiya.provider.i:
    java.lang.String buildByConversationId(java.lang.String[],long,long,java.lang.String,java.lang.String) -> a
    java.lang.String buildByScreenName(java.lang.String[],long,java.lang.String,java.lang.String,java.lang.String) -> a
com.pahans.kichibichiya.provider.TweetStore$DirectMessages$ConversationsEntry -> com.pahans.kichibichiya.provider.j:
    android.net.Uri CONTENT_URI -> a
com.pahans.kichibichiya.provider.TweetStore$DirectMessages$ConversationsEntry$QueryBuilder -> com.pahans.kichibichiya.provider.k:
    java.lang.String build(java.lang.String) -> a
com.pahans.kichibichiya.provider.TweetStore$DirectMessages$Inbox -> com.pahans.kichibichiya.provider.l:
    android.net.Uri CONTENT_URI -> d
com.pahans.kichibichiya.provider.TweetStore$DirectMessages$Outbox -> com.pahans.kichibichiya.provider.m:
    android.net.Uri CONTENT_URI -> d
com.pahans.kichibichiya.provider.TweetStore$DirectMessages$QueryBuilder -> com.pahans.kichibichiya.provider.n:
    java.lang.String build(java.lang.String[],java.lang.String,java.lang.String) -> a
com.pahans.kichibichiya.provider.TweetStore$Drafts -> com.pahans.kichibichiya.provider.o:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
com.pahans.kichibichiya.provider.TweetStore$Filters -> com.pahans.kichibichiya.provider.p:
    java.lang.String[] COLUMNS -> a
    java.lang.String[] TYPES -> b
com.pahans.kichibichiya.provider.TweetStore$Filters$Keywords -> com.pahans.kichibichiya.provider.q:
    android.net.Uri CONTENT_URI -> c
com.pahans.kichibichiya.provider.TweetStore$Filters$Sources -> com.pahans.kichibichiya.provider.r:
    android.net.Uri CONTENT_URI -> c
com.pahans.kichibichiya.provider.TweetStore$Filters$Users -> com.pahans.kichibichiya.provider.s:
    android.net.Uri CONTENT_URI -> c
com.pahans.kichibichiya.provider.TweetStore$Mentions -> com.pahans.kichibichiya.provider.t:
    android.net.Uri CONTENT_URI -> a
com.pahans.kichibichiya.provider.TweetStore$Statuses -> com.pahans.kichibichiya.provider.u:
    android.net.Uri CONTENT_URI -> b
    java.lang.String[] COLUMNS -> c
    java.lang.String[] TYPES -> d
com.pahans.kichibichiya.provider.TweetStore$Tabs -> com.pahans.kichibichiya.provider.v:
    android.net.Uri CONTENT_URI -> a
    java.lang.String[] COLUMNS -> b
    java.lang.String[] TYPES -> c
com.pahans.kichibichiya.provider.TweetStoreProvider -> com.pahans.kichibichiya.provider.TweetStoreProvider:
    android.database.sqlite.SQLiteDatabase mDatabase -> a
    int mNewMessagesCount -> b
    int mNewMentionsCount -> c
    int mNewStatusesCount -> d
    boolean mNotificationIsAudible -> e
    android.content.BroadcastReceiver mHomeActivityStateReceiver -> f
    android.app.NotificationManager mNotificationManager -> g
    android.content.SharedPreferences mPreferences -> h
    com.pahans.kichibichiya.util.LazyImageLoader mProfileImageLoader -> i
    int bulkInsert(android.net.Uri,android.content.ContentValues[]) -> bulkInsert
    int delete(android.net.Uri,java.lang.String,java.lang.String[]) -> delete
    java.lang.String getType(android.net.Uri) -> getType
    android.net.Uri insert(android.net.Uri,android.content.ContentValues) -> insert
    boolean onCreate() -> onCreate
    android.database.Cursor query(android.net.Uri,java.lang.String[],java.lang.String,java.lang.String[],java.lang.String) -> query
    int update(android.net.Uri,android.content.ContentValues,java.lang.String,java.lang.String[]) -> update
    android.app.Notification buildNotification(android.support.v4.app.NotificationCompat$Builder,java.lang.String,java.lang.String,java.lang.String,int,android.graphics.Bitmap,android.content.Intent,android.content.Intent) -> a
    void clearNotification(int) -> a
    void onDatabaseUpdated(android.net.Uri) -> a
    void onNewItemsInserted(android.net.Uri,int,android.content.ContentValues[]) -> a
    void access$0(com.pahans.kichibichiya.provider.TweetStoreProvider,boolean) -> a
com.pahans.kichibichiya.provider.TweetStoreProvider$1 -> com.pahans.kichibichiya.provider.w:
    com.pahans.kichibichiya.provider.TweetStoreProvider this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.receiver.BootCompletedReceiver -> com.pahans.kichibichiya.receiver.BootCompletedReceiver:
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.service.TwidereService -> com.pahans.kichibichiya.service.TwidereService:
    com.pahans.kichibichiya.service.TwidereService$ServiceStub mBinder -> a
    com.pahans.kichibichiya.util.AsyncTaskManager mAsyncTaskManager -> b
    android.content.SharedPreferences mPreferences -> c
    android.app.NotificationManager mNotificationManager -> d
    android.app.AlarmManager mAlarmManager -> e
    android.content.ContentResolver mResolver -> f
    int mGetHomeTimelineTaskId -> g
    int mGetMentionsTaskId -> h
    int mStoreStatusesTaskId -> i
    int mStoreMentionsTaskId -> j
    int mGetReceivedDirectMessagesTaskId -> k
    int mGetSentDirectMessagesTaskId -> l
    int mStoreReceivedDirectMessagesTaskId -> m
    int mStoreSentDirectMessagesTaskId -> n
    int mGetLocalTrendsTaskId -> o
    int mStoreLocalTrendsTaskId -> p
    boolean mShouldShutdown -> q
    boolean mBatteryLow -> r
    android.app.PendingIntent mPendingRefreshHomeTimelineIntent -> s
    android.app.PendingIntent mPendingRefreshMentionsIntent -> t
    android.app.PendingIntent mPendingRefreshDirectMessagesIntent -> u
    android.content.BroadcastReceiver mStateReceiver -> v
    int addUserListMember(long,int,long,java.lang.String) -> a
    void cancelShutdown() -> a
    void clearNotification(int) -> a
    int createBlock(long,long) -> a
    int createFavorite(long,long) -> b
    int createFriendship(long,long) -> c
    int createMultiBlock(long,long[]) -> a
    int createUserList(long,java.lang.String,boolean,java.lang.String) -> a
    int createUserListSubscription(long,int) -> a
    int deleteUserListMember(long,int,long) -> a
    int destroyBlock(long,long) -> d
    int destroyDirectMessage(long,long) -> e
    int destroyFavorite(long,long) -> f
    int destroyFriendship(long,long) -> g
    int destroyStatus(long,long) -> h
    int destroyUserList(long,int) -> b
    int destroyUserListSubscription(long,int) -> c
    int getHomeTimeline(long[],long[],long[]) -> a
    int getLocalTrends(long,int) -> d
    int getSentDirectMessages(long[],long[],long[]) -> b
    boolean hasActivatedTask() -> b
    boolean isHomeTimelineRefreshing() -> c
    boolean isLocalTrendsRefreshing() -> d
    boolean isMentionsRefreshing() -> e
    boolean isReceivedDirectMessagesRefreshing() -> f
    boolean isSentDirectMessagesRefreshing() -> g
    android.os.IBinder onBind(android.content.Intent) -> onBind
    void onCreate() -> onCreate
    void onDestroy() -> onDestroy
    int refreshAll() -> h
    int reportMultiSpam(long,long[]) -> b
    int reportSpam(long,long) -> i
    int retweetStatus(long,long) -> j
    int sendDirectMessage(long,java.lang.String,long,java.lang.String) -> a
    void shutdownService() -> i
    boolean startAutoRefresh() -> j
    void stopAutoRefresh() -> k
    boolean test() -> l
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    int updateUserListDetails(long,int,boolean,java.lang.String,java.lang.String) -> a
    android.app.Notification buildNotification(java.lang.String,java.lang.String,int,android.content.Intent,android.content.Intent) -> a
    int getMentions(long[],long[],long[]) -> c
    int getReceivedDirectMessages(long[],long[],long[]) -> d
    void showErrorToast(int,java.lang.Exception,boolean) -> a
    com.pahans.kichibichiya.util.AsyncTaskManager access$0(com.pahans.kichibichiya.service.TwidereService) -> a
    boolean access$1(com.pahans.kichibichiya.service.TwidereService) -> b
    void access$2(com.pahans.kichibichiya.service.TwidereService,boolean) -> a
    boolean access$3(com.pahans.kichibichiya.service.TwidereService) -> c
    android.content.SharedPreferences access$4(com.pahans.kichibichiya.service.TwidereService) -> d
    int access$5(com.pahans.kichibichiya.service.TwidereService,long[],long[],long[]) -> a
    int access$6(com.pahans.kichibichiya.service.TwidereService,long[],long[],long[]) -> b
    void access$7(com.pahans.kichibichiya.service.TwidereService,int,java.lang.Exception,boolean) -> a
    android.content.ContentResolver access$8(com.pahans.kichibichiya.service.TwidereService) -> e
    void access$9(com.pahans.kichibichiya.service.TwidereService,int) -> a
    void access$10(com.pahans.kichibichiya.service.TwidereService,int) -> b
    android.app.AlarmManager access$11(com.pahans.kichibichiya.service.TwidereService) -> f
    android.app.PendingIntent access$12(com.pahans.kichibichiya.service.TwidereService) -> g
    void access$13(com.pahans.kichibichiya.service.TwidereService,int) -> c
    void access$14(com.pahans.kichibichiya.service.TwidereService,int) -> d
    void access$15(com.pahans.kichibichiya.service.TwidereService,int) -> e
    android.app.PendingIntent access$16(com.pahans.kichibichiya.service.TwidereService) -> h
    void access$17(com.pahans.kichibichiya.service.TwidereService,int) -> f
    void access$18(com.pahans.kichibichiya.service.TwidereService,int) -> g
    android.app.PendingIntent access$19(com.pahans.kichibichiya.service.TwidereService) -> i
    void access$20(com.pahans.kichibichiya.service.TwidereService,int) -> h
    void access$21(com.pahans.kichibichiya.service.TwidereService,int) -> i
    android.app.Notification access$22(com.pahans.kichibichiya.service.TwidereService,java.lang.String,java.lang.String,int,android.content.Intent,android.content.Intent) -> a
    android.app.NotificationManager access$23(com.pahans.kichibichiya.service.TwidereService) -> j
com.pahans.kichibichiya.service.TwidereService$1 -> com.pahans.kichibichiya.service.a:
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    void onReceive(android.content.Context,android.content.Intent) -> onReceive
com.pahans.kichibichiya.service.TwidereService$AddUserListMemberTask -> com.pahans.kichibichiya.service.b:
    long account_id -> b
    long user_id -> c
    int list_id -> d
    java.lang.String screen_name -> e
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$CreateBlockTask -> com.pahans.kichibichiya.service.c:
    long account_id -> b
    long user_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$CreateFavoriteTask -> com.pahans.kichibichiya.service.d:
    long account_id -> b
    long status_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$CreateFriendshipTask -> com.pahans.kichibichiya.service.e:
    long account_id -> b
    long user_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$CreateMultiBlockTask -> com.pahans.kichibichiya.service.f:
    long account_id -> b
    long[] user_ids -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$ListResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$ListResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$CreateUserListSubscriptionTask -> com.pahans.kichibichiya.service.g:
    long account_id -> b
    int list_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$CreateUserListTask -> com.pahans.kichibichiya.service.h:
    long account_id -> b
    java.lang.String list_name -> c
    java.lang.String description -> d
    boolean is_public -> e
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$DeleteUserListMemberTask -> com.pahans.kichibichiya.service.i:
    long account_id -> b
    long user_id -> c
    int list_id -> d
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$DestroyBlockTask -> com.pahans.kichibichiya.service.j:
    long account_id -> b
    long user_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$DestroyDirectMessageTask -> com.pahans.kichibichiya.service.k:
    twitter4j.Twitter twitter -> b
    long message_id -> c
    long account_id -> d
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$DestroyFavoriteTask -> com.pahans.kichibichiya.service.l:
    long account_id -> b
    long status_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$DestroyFriendshipTask -> com.pahans.kichibichiya.service.m:
    long account_id -> b
    long user_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$DestroyStatusTask -> com.pahans.kichibichiya.service.n:
    long account_id -> b
    long status_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$DestroyUserListSubscriptionTask -> com.pahans.kichibichiya.service.o:
    long account_id -> b
    int list_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$DestroyUserListTask -> com.pahans.kichibichiya.service.p:
    long account_id -> b
    int list_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$GetDirectMessagesTask -> com.pahans.kichibichiya.service.q:
    long[] account_ids -> b
    long[] max_ids -> c
    long[] since_ids -> d
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    twitter4j.ResponseList getDirectMessages(twitter4j.Twitter,twitter4j.Paging) -> a
    int hashCode() -> hashCode
    java.util.List doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.util.List) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> c
    boolean isMaxIdsValid() -> a
    boolean isSinceIdsValid() -> b
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$GetHomeTimelineTask -> com.pahans.kichibichiya.service.r:
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    twitter4j.ResponseList getStatuses(twitter4j.Twitter,twitter4j.Paging) -> a
    twitter4j.Twitter getTwitter(long) -> a
    int hashCode() -> hashCode
    void onPostExecute(java.util.List) -> a
    void onPreExecute() -> onPreExecute
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> d
com.pahans.kichibichiya.service.TwidereService$GetLocalTrendsTask -> com.pahans.kichibichiya.service.s:
    int woeid -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    java.util.List getTrends(twitter4j.Twitter) -> a
    int hashCode() -> hashCode
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$ListResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
com.pahans.kichibichiya.service.TwidereService$GetMentionsTask -> com.pahans.kichibichiya.service.t:
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    twitter4j.ResponseList getStatuses(twitter4j.Twitter,twitter4j.Paging) -> a
    twitter4j.Twitter getTwitter(long) -> a
    int hashCode() -> hashCode
    void onPostExecute(java.util.List) -> a
    void onPreExecute() -> onPreExecute
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> d
com.pahans.kichibichiya.service.TwidereService$GetReceivedDirectMessagesTask -> com.pahans.kichibichiya.service.u:
    com.pahans.kichibichiya.service.TwidereService this$0 -> b
    boolean equals(java.lang.Object) -> equals
    twitter4j.ResponseList getDirectMessages(twitter4j.Twitter,twitter4j.Paging) -> a
    int hashCode() -> hashCode
    void onPostExecute(java.util.List) -> a
    void onPreExecute() -> onPreExecute
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> c
com.pahans.kichibichiya.service.TwidereService$GetSentDirectMessagesTask -> com.pahans.kichibichiya.service.v:
    com.pahans.kichibichiya.service.TwidereService this$0 -> b
    twitter4j.ResponseList getDirectMessages(twitter4j.Twitter,twitter4j.Paging) -> a
    void onPostExecute(java.util.List) -> a
com.pahans.kichibichiya.service.TwidereService$GetStatusesTask -> com.pahans.kichibichiya.service.w:
    long[] account_ids -> a
    long[] max_ids -> c
    long[] since_ids -> d
    com.pahans.kichibichiya.service.TwidereService this$0 -> b
    boolean equals(java.lang.Object) -> equals
    twitter4j.ResponseList getStatuses(twitter4j.Twitter,twitter4j.Paging) -> a
    twitter4j.Twitter getTwitter(long) -> a
    int hashCode() -> hashCode
    java.util.List doInBackground(java.lang.Void[]) -> a
    void onPostExecute(java.util.List) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> d
    boolean isMaxIdsValid() -> a
    boolean isSinceIdsValid() -> b
    boolean shouldSetMinId() -> c
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$GetTrendsTask -> com.pahans.kichibichiya.service.x:
    long account_id -> a
    com.pahans.kichibichiya.service.TwidereService this$0 -> b
    boolean equals(java.lang.Object) -> equals
    java.util.List getTrends(twitter4j.Twitter) -> a
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$ListResponse doInBackground(java.lang.Void[]) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$ListResponse -> com.pahans.kichibichiya.service.y:
    long account_id -> a
    java.util.List list -> b
    java.lang.Exception exception -> c
com.pahans.kichibichiya.service.TwidereService$ReportMultiSpamTask -> com.pahans.kichibichiya.service.z:
    long account_id -> b
    long[] user_ids -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$ListResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$ListResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$ReportSpamTask -> com.pahans.kichibichiya.service.aa:
    long account_id -> b
    long user_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$RetweetStatusTask -> com.pahans.kichibichiya.service.ab:
    long account_id -> b
    long status_id -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$SendDirectMessageTask -> com.pahans.kichibichiya.service.ac:
    twitter4j.Twitter twitter -> b
    long user_id -> c
    java.lang.String screen_name -> d
    java.lang.String message -> e
    long account_id -> f
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$ServiceStub -> com.pahans.kichibichiya.service.ad:
    java.lang.ref.WeakReference mService -> a
    int addUserListMember(long,int,long,java.lang.String) -> a
    void cancelShutdown() -> l
    void clearNotification(int) -> a
    int createBlock(long,long) -> h
    int createFavorite(long,long) -> d
    int createFriendship(long,long) -> f
    int createMultiBlock(long,long[]) -> a
    int createUserList(long,java.lang.String,boolean,java.lang.String) -> a
    int createUserListSubscription(long,int) -> b
    int deleteUserListMember(long,int,long) -> a
    int destroyBlock(long,long) -> i
    int destroyDirectMessage(long,long) -> b
    int destroyFavorite(long,long) -> e
    int destroyFriendship(long,long) -> g
    int destroyStatus(long,long) -> a
    int destroyUserList(long,int) -> d
    int destroyUserListSubscription(long,int) -> c
    int getHomeTimeline(long[],long[]) -> a
    int getHomeTimelineWithSinceIds(long[],long[],long[]) -> a
    int getLocalTrends(long,int) -> a
    int getMentions(long[],long[]) -> b
    int getMentionsWithSinceIds(long[],long[],long[]) -> b
    int getReceivedDirectMessages(long[],long[]) -> c
    int getReceivedDirectMessagesWithSinceIds(long[],long[],long[]) -> c
    int getSentDirectMessages(long[],long[]) -> d
    int getSentDirectMessagesWithSinceIds(long[],long[],long[]) -> d
    boolean hasActivatedTask() -> g
    boolean isHomeTimelineRefreshing() -> b
    boolean isLocalTrendsRefreshing() -> f
    boolean isMentionsRefreshing() -> c
    boolean isReceivedDirectMessagesRefreshing() -> d
    boolean isSentDirectMessagesRefreshing() -> e
    int refreshAll() -> a
    int reportMultiSpam(long,long[]) -> b
    int reportSpam(long,long) -> j
    int retweetStatus(long,long) -> c
    int sendDirectMessage(long,java.lang.String,long,java.lang.String) -> a
    void shutdownService() -> k
    boolean startAutoRefresh() -> i
    void stopAutoRefresh() -> j
    boolean test() -> h
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    int updateUserListDetails(long,int,boolean,java.lang.String,java.lang.String) -> a
com.pahans.kichibichiya.service.TwidereService$SingleResponse -> com.pahans.kichibichiya.service.ae:
    java.lang.Exception exception -> a
    java.lang.Object data -> b
    long account_id -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
com.pahans.kichibichiya.service.TwidereService$StatusesListResponse -> com.pahans.kichibichiya.service.af:
    long max_id -> d
    long since_id -> e
    int load_item_limit -> f
com.pahans.kichibichiya.service.TwidereService$StoreDirectMessagesTask -> com.pahans.kichibichiya.service.ag:
    java.util.List responses -> b
    android.net.Uri uri -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> b
    boolean isOutgoing() -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$StoreHomeTimelineTask -> com.pahans.kichibichiya.service.ah:
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> b
com.pahans.kichibichiya.service.TwidereService$StoreLocalTrendsTask -> com.pahans.kichibichiya.service.ai:
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
com.pahans.kichibichiya.service.TwidereService$StoreMentionsTask -> com.pahans.kichibichiya.service.aj:
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> b
com.pahans.kichibichiya.service.TwidereService$StoreReceivedDirectMessagesTask -> com.pahans.kichibichiya.service.ak:
    com.pahans.kichibichiya.service.TwidereService this$0 -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> b
    boolean isOutgoing() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
com.pahans.kichibichiya.service.TwidereService$StoreSentDirectMessagesTask -> com.pahans.kichibichiya.service.al:
    com.pahans.kichibichiya.service.TwidereService this$0 -> b
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    boolean isOutgoing() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
com.pahans.kichibichiya.service.TwidereService$StoreStatusesTask -> com.pahans.kichibichiya.service.am:
    java.util.List responses -> a
    android.net.Uri uri -> c
    boolean should_set_min_id -> d
    java.util.ArrayList all_statuses -> e
    com.pahans.kichibichiya.service.TwidereService this$0 -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean shouldSetMinId() -> a
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> b
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$StoreTrendsTask -> com.pahans.kichibichiya.service.an:
    com.pahans.kichibichiya.service.TwidereService$ListResponse response -> a
    android.net.Uri uri -> c
    com.pahans.kichibichiya.service.TwidereService this$0 -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$UpdateProfileImageTask -> com.pahans.kichibichiya.service.ao:
    long account_id -> b
    android.net.Uri image_uri -> c
    boolean delete_image -> d
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$UpdateProfileTask -> com.pahans.kichibichiya.service.ap:
    long account_id -> b
    java.lang.String name -> c
    java.lang.String url -> d
    java.lang.String location -> e
    java.lang.String description -> f
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask -> com.pahans.kichibichiya.service.aq:
    com.pahans.kichibichiya.util.ImageUploaderInterface uploader -> b
    com.pahans.kichibichiya.util.TweetShortenerInterface shortener -> c
    com.twitter.Validator validator -> d
    long[] account_ids -> e
    java.lang.String content -> f
    android.location.Location location -> g
    android.net.Uri image_uri -> h
    long in_reply_to -> i
    boolean use_uploader -> j
    boolean use_shortener -> k
    boolean delete_image -> l
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.util.List doInBackground(java.lang.Void[]) -> a
    void onCancelled() -> onCancelled
    void onPostExecute(java.util.List) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void saveDrafts(java.util.List) -> b
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
    com.pahans.kichibichiya.service.TwidereService access$2(com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask) -> a
com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask$ImageUploadException -> com.pahans.kichibichiya.service.ar:
    com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask this$1 -> a
com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask$ImageUploaderNotFoundException -> com.pahans.kichibichiya.service.as:
    com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask this$1 -> a
com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask$StatusTooLongException -> com.pahans.kichibichiya.service.at:
    com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask this$1 -> a
com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask$TweetShortenException -> com.pahans.kichibichiya.service.au:
    com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask this$1 -> a
com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask$TweetShortenerNotFoundException -> com.pahans.kichibichiya.service.av:
    com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask this$1 -> a
com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask$UpdateStatusException -> com.pahans.kichibichiya.service.aw:
    com.pahans.kichibichiya.service.TwidereService$UpdateStatusTask this$1 -> b
com.pahans.kichibichiya.service.TwidereService$UpdateUserListDetailsTask -> com.pahans.kichibichiya.service.ax:
    long account_id -> b
    int list_id -> c
    boolean is_public -> d
    java.lang.String name -> e
    java.lang.String description -> f
    com.pahans.kichibichiya.service.TwidereService this$0 -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    com.pahans.kichibichiya.service.TwidereService$SingleResponse doInBackground(java.lang.Void[]) -> a
    void onPostExecute(com.pahans.kichibichiya.service.TwidereService$SingleResponse) -> a
    com.pahans.kichibichiya.service.TwidereService getOuterType() -> a
    void onPostExecute(java.lang.Object) -> onPostExecute
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.util.ArrayUtils -> com.pahans.kichibichiya.util.a:
    boolean contains(long[],long) -> a
    boolean contains(java.lang.Object[],java.lang.Object) -> a
    boolean contentMatch(java.lang.Object[],java.lang.Object[]) -> a
    long[] fromList(java.util.List) -> a
    long[] fromString(java.lang.String,char) -> a
    int indexOf(long[],long) -> b
    int indexOf(java.lang.Object[],java.lang.Object) -> b
    long[] intersection(long[],long[]) -> a
    java.lang.String toString(long[],char,boolean) -> a
    java.lang.String toString(java.lang.Object[],char,boolean) -> a
com.pahans.kichibichiya.util.AsyncTaskManager -> com.pahans.kichibichiya.util.b:
    java.util.ArrayList mTasks -> a
    com.pahans.kichibichiya.util.AsyncTaskManager sInstance -> b
    int add(com.pahans.kichibichiya.util.ManagedAsyncTask,boolean,java.lang.Object[]) -> a
    boolean cancel(int) -> a
    boolean cancel(int,boolean) -> a
    boolean execute(int,java.lang.Object[]) -> a
    java.util.ArrayList getTaskList() -> a
    boolean hasRunningTask() -> b
    boolean isExcuting(int) -> b
    void remove(int) -> c
    com.pahans.kichibichiya.util.ManagedAsyncTask findTask(int) -> d
    com.pahans.kichibichiya.util.AsyncTaskManager getInstance() -> c
com.pahans.kichibichiya.util.BaseAdapterInterface -> com.pahans.kichibichiya.util.c:
    void notifyDataSetChanged() -> notifyDataSetChanged
    void setDisplayProfileImage(boolean) -> b
    void setNameDisplayOption(java.lang.String) -> a
    void setTextSize(float) -> a
com.pahans.kichibichiya.util.BitmapDecodeHelper -> com.pahans.kichibichiya.util.d:
    android.graphics.Bitmap decode(java.lang.String,android.graphics.BitmapFactory$Options) -> a
com.pahans.kichibichiya.util.BitmapDecodeHelper$DecodeMethodEclair -> com.pahans.kichibichiya.util.e:
    android.graphics.Bitmap decode(java.lang.String,android.graphics.BitmapFactory$Options) -> b
    android.graphics.Bitmap access$0(java.lang.String,android.graphics.BitmapFactory$Options) -> a
com.pahans.kichibichiya.util.CacheUsersStatusesTask -> com.pahans.kichibichiya.util.f:
    java.util.ArrayList all_statuses -> a
    android.content.ContentResolver resolver -> b
    java.lang.Void doInBackground(java.lang.Void[]) -> a
    java.lang.Runnable getRunnable(android.content.Context,java.util.List,long) -> a
    java.lang.Object doInBackground(java.lang.Object[]) -> doInBackground
com.pahans.kichibichiya.util.CacheUsersStatusesTask$1 -> com.pahans.kichibichiya.util.g:
    android.content.Context val$context -> a
    java.util.List val$statuses -> b
    long val$account_id -> c
    void run() -> run
com.pahans.kichibichiya.util.ClipboardUtils -> com.pahans.kichibichiya.util.h:
    void setText(android.content.Context,java.lang.CharSequence) -> a
com.pahans.kichibichiya.util.ColorAnalyser -> com.pahans.kichibichiya.util.i:
    int analyse(android.graphics.Bitmap) -> a
    int analyse(android.graphics.Bitmap,int,int) -> a
    int analyse(android.graphics.Bitmap,int,int,int) -> a
com.pahans.kichibichiya.util.DatabaseHelper -> com.pahans.kichibichiya.util.j:
    void onCreate(android.database.sqlite.SQLiteDatabase) -> onCreate
    void onDowngrade(android.database.sqlite.SQLiteDatabase,int,int) -> onDowngrade
    void onUpgrade(android.database.sqlite.SQLiteDatabase,int,int) -> onUpgrade
    java.lang.String createTable(java.lang.String,java.lang.String[],java.lang.String[],boolean) -> a
    void handleVersionChange(android.database.sqlite.SQLiteDatabase) -> a
com.pahans.kichibichiya.util.DatabaseUpgradeHelper -> com.pahans.kichibichiya.util.k:
    void safeUpgrade(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[],java.lang.String[],boolean,boolean,java.util.HashMap) -> a
    java.lang.String createTable(java.lang.String,java.lang.String[],java.lang.String[],boolean) -> a
    java.lang.String[] getBatchTypeString(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String[]) -> a
    int getTypeInt(java.lang.String) -> a
    java.lang.String getTypeString(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String) -> a
    boolean isTypeCompatible(java.lang.String,java.lang.String,boolean) -> a
    boolean shouldUpgrade(java.lang.String[],java.lang.String[],java.lang.String[],java.lang.String[]) -> a
com.pahans.kichibichiya.util.DirectMessagesAdapterInterface -> com.pahans.kichibichiya.util.l:
com.pahans.kichibichiya.util.FileUtils -> com.pahans.kichibichiya.util.m:
    void copyFile(java.io.File,java.io.File) -> a
    void copyFileToDirectory(java.io.File,java.io.File) -> b
    void closeQuietly(java.io.Closeable) -> a
    void closeQuietly(java.io.InputStream) -> a
    void closeQuietly(java.io.OutputStream) -> a
    void doCopyFile(java.io.File,java.io.File,boolean) -> a
com.pahans.kichibichiya.util.GetExternalCacheDirAccessor -> com.pahans.kichibichiya.util.n:
    java.io.File getExternalCacheDir(android.content.Context) -> a
com.pahans.kichibichiya.util.HtmlBuilder -> com.pahans.kichibichiya.util.o:
    java.lang.String string -> a
    int string_length -> b
    boolean strict -> c
    java.util.List links -> d
    boolean addLink(java.lang.String,java.lang.String,int,int) -> a
    java.lang.String build(boolean) -> a
com.pahans.kichibichiya.util.HtmlBuilder$LinkSpec -> com.pahans.kichibichiya.util.p:
    java.util.Comparator COMPARATOR -> e
    java.lang.String link -> a
    java.lang.String display -> b
    int start -> c
    int end -> d
    java.lang.String toString() -> toString
    java.util.Comparator access$0() -> a
com.pahans.kichibichiya.util.HtmlBuilder$LinkSpec$1 -> com.pahans.kichibichiya.util.q:
    int compare(com.pahans.kichibichiya.util.HtmlBuilder$LinkSpec,com.pahans.kichibichiya.util.HtmlBuilder$LinkSpec) -> a
    int compare(java.lang.Object,java.lang.Object) -> compare
com.pahans.kichibichiya.util.HtmlEscapeHelper -> com.pahans.kichibichiya.util.r:
    java.util.HashMap htmlEntities -> a
    java.lang.String escape(java.lang.String) -> a
    java.lang.String unescape(java.lang.String) -> b
com.pahans.kichibichiya.util.HtmlEscapeHelper$1 -> com.pahans.kichibichiya.util.s:
com.pahans.kichibichiya.util.ImageUploaderInterface -> com.pahans.kichibichiya.util.t:
    com.pahans.kichibichiya.IImageUploader mService -> a
    android.content.ServiceConnection mConntecion -> b
    android.os.IBinder asBinder() -> asBinder
    android.net.Uri upload(android.net.Uri,java.lang.String) -> a
    void waitForService() -> a
    com.pahans.kichibichiya.util.ImageUploaderInterface getInstance(android.app.Application,java.lang.String) -> a
    void access$0(com.pahans.kichibichiya.util.ImageUploaderInterface,com.pahans.kichibichiya.IImageUploader) -> a
com.pahans.kichibichiya.util.ImageUploaderInterface$1 -> com.pahans.kichibichiya.util.u:
    com.pahans.kichibichiya.util.ImageUploaderInterface this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.pahans.kichibichiya.util.LazyImageLoader -> com.pahans.kichibichiya.util.v:
    com.pahans.kichibichiya.util.LazyImageLoader$MemoryCache mMemoryCache -> a
    android.content.Context mContext -> b
    com.pahans.kichibichiya.util.LazyImageLoader$FileCache mFileCache -> c
    java.util.Map mImageViews -> d
    java.util.concurrent.ExecutorService mExecutorService -> e
    int mFallbackRes -> f
    int mRequiredWidth -> g
    int mRequiredHeight -> h
    java.lang.String mUserAgent -> i
    twitter4j.http.HostAddressResolver mResolver -> j
    java.net.Proxy mProxy -> k
    int mConnectionTimeout -> l
    twitter4j.http.HttpClientWrapper mClient -> m
    void clearMemoryCache() -> a
    void displayImage(java.net.URL,android.widget.ImageView) -> a
    java.lang.String getCachedImagePath(java.net.URL) -> a
    void reloadConnectivitySettings() -> b
    android.graphics.Bitmap decodeFile(java.io.File) -> a
    void queuePhoto(java.net.URL,android.widget.ImageView) -> b
    boolean imageViewReused(com.pahans.kichibichiya.util.LazyImageLoader$ImageToLoad) -> a
    int access$0(com.pahans.kichibichiya.util.LazyImageLoader) -> a
    com.pahans.kichibichiya.util.LazyImageLoader$FileCache access$1(com.pahans.kichibichiya.util.LazyImageLoader) -> b
    android.graphics.Bitmap access$2(com.pahans.kichibichiya.util.LazyImageLoader,java.io.File) -> a
    twitter4j.http.HttpClientWrapper access$3(com.pahans.kichibichiya.util.LazyImageLoader) -> c
    com.pahans.kichibichiya.util.LazyImageLoader$MemoryCache access$4(com.pahans.kichibichiya.util.LazyImageLoader) -> d
com.pahans.kichibichiya.util.LazyImageLoader$BitmapDisplayer -> com.pahans.kichibichiya.util.w:
    android.graphics.Bitmap bitmap -> a
    com.pahans.kichibichiya.util.LazyImageLoader$ImageToLoad imagetoload -> b
    com.pahans.kichibichiya.util.LazyImageLoader this$0 -> c
    void run() -> run
com.pahans.kichibichiya.util.LazyImageLoader$FileCache -> com.pahans.kichibichiya.util.x:
    java.lang.String mCacheDirName -> a
    java.io.File mCacheDir -> b
    android.content.Context mContext -> c
    java.io.File getFile(java.net.URL) -> a
    void init() -> a
    java.lang.String getURLFilename(java.net.URL) -> b
com.pahans.kichibichiya.util.LazyImageLoader$ImageLoader -> com.pahans.kichibichiya.util.y:
    com.pahans.kichibichiya.util.LazyImageLoader$ImageToLoad imagetoload -> b
    com.pahans.kichibichiya.util.LazyImageLoader this$0 -> a
    android.graphics.Bitmap getBitmap(java.net.URL) -> a
    void run() -> run
com.pahans.kichibichiya.util.LazyImageLoader$ImageToLoad -> com.pahans.kichibichiya.util.z:
    java.net.URL source -> a
    android.widget.ImageView imageview -> b
com.pahans.kichibichiya.util.LazyImageLoader$MemoryCache -> com.pahans.kichibichiya.util.aa:
    int mMaxCapacity -> a
    java.util.Map mSoftCache -> b
    java.util.Map mHardCache -> c
    void clear() -> a
    android.graphics.Bitmap get(java.net.URL) -> a
    void put(java.net.URL,android.graphics.Bitmap) -> a
    int access$0(com.pahans.kichibichiya.util.LazyImageLoader$MemoryCache) -> a
    java.util.Map access$1(com.pahans.kichibichiya.util.LazyImageLoader$MemoryCache) -> b
com.pahans.kichibichiya.util.LazyImageLoader$MemoryCache$1 -> com.pahans.kichibichiya.util.ab:
    com.pahans.kichibichiya.util.LazyImageLoader$MemoryCache this$1 -> a
    boolean removeEldestEntry(java.util.Map$Entry) -> removeEldestEntry
com.pahans.kichibichiya.util.ListUtils -> com.pahans.kichibichiya.util.ac:
    java.util.List fromArray(long[]) -> a
    java.lang.String toString(java.util.List,char,boolean) -> a
    java.lang.String toStringForSQL(java.util.List) -> a
com.pahans.kichibichiya.util.ManagedAsyncTask -> com.pahans.kichibichiya.util.ad:
    com.pahans.kichibichiya.util.AsyncTaskManager manager -> a
    android.content.Context context -> b
    void finalize() -> finalize
    void onCancelled() -> onCancelled
    void onPostExecute(java.lang.Object) -> onPostExecute
    void onPreExecute() -> onPreExecute
com.pahans.kichibichiya.util.MapInterface -> com.pahans.kichibichiya.util.ae:
    void center() -> B
com.pahans.kichibichiya.util.NameValuePairImpl -> com.pahans.kichibichiya.util.af:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> getName
    java.lang.String getValue() -> getValue
com.pahans.kichibichiya.util.NoDuplicatesArrayList -> com.pahans.kichibichiya.util.ag:
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
com.pahans.kichibichiya.util.NoDuplicatesLinkedList -> com.pahans.kichibichiya.util.ah:
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
com.pahans.kichibichiya.util.NoDuplicatesStateSavedList -> com.pahans.kichibichiya.util.ai:
    java.lang.Object state -> a
    java.lang.Object getState() -> a
    void setState(java.lang.Object) -> a
com.pahans.kichibichiya.util.OAuthPasswordAuthenticator -> com.pahans.kichibichiya.util.aj:
    twitter4j.Twitter twitter -> a
    twitter4j.http.HttpClient client -> b
    java.lang.String authenticity_token -> c
    java.lang.String callback_url -> d
    org.xml.sax.ContentHandler mAuthenticityTokenHandler -> e
    org.xml.sax.ContentHandler mCallbackURLHandler -> f
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> a
    java.io.InputStream getHTTPContent(java.lang.String,boolean,twitter4j.http.HttpParameter[]) -> a
    void readAuthenticityToken(java.io.InputStream) -> a
    void readCallbackURL(java.io.InputStream) -> b
    void setAuthenticityToken(java.lang.String) -> a
    java.util.Map parseParameters(java.lang.String) -> b
    void access$0(com.pahans.kichibichiya.util.OAuthPasswordAuthenticator,java.lang.String) -> a
    void access$1(com.pahans.kichibichiya.util.OAuthPasswordAuthenticator,java.lang.String) -> b
com.pahans.kichibichiya.util.OAuthPasswordAuthenticator$1 -> com.pahans.kichibichiya.util.ak:
    com.pahans.kichibichiya.util.OAuthPasswordAuthenticator this$0 -> a
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
com.pahans.kichibichiya.util.OAuthPasswordAuthenticator$2 -> com.pahans.kichibichiya.util.al:
    com.pahans.kichibichiya.util.OAuthPasswordAuthenticator this$0 -> a
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
com.pahans.kichibichiya.util.OAuthPasswordAuthenticator$AuthenticationException -> com.pahans.kichibichiya.util.am:
com.pahans.kichibichiya.util.OAuthPasswordAuthenticator$CallbackURLException -> com.pahans.kichibichiya.util.an:
com.pahans.kichibichiya.util.OAuthPasswordAuthenticator$DummyContentHandler -> com.pahans.kichibichiya.util.ao:
    void characters(char[],int,int) -> characters
    void endDocument() -> endDocument
    void endElement(java.lang.String,java.lang.String,java.lang.String) -> endElement
    void endPrefixMapping(java.lang.String) -> endPrefixMapping
    void ignorableWhitespace(char[],int,int) -> ignorableWhitespace
    void processingInstruction(java.lang.String,java.lang.String) -> processingInstruction
    void setDocumentLocator(org.xml.sax.Locator) -> setDocumentLocator
    void skippedEntity(java.lang.String) -> skippedEntity
    void startDocument() -> startDocument
    void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes) -> startElement
    void startPrefixMapping(java.lang.String,java.lang.String) -> startPrefixMapping
com.pahans.kichibichiya.util.OAuthPasswordAuthenticator$HtmlParser -> com.pahans.kichibichiya.util.ap:
    org.ccil.cowan.tagsoup.HTMLSchema schema -> a
    org.ccil.cowan.tagsoup.HTMLSchema access$0() -> a
com.pahans.kichibichiya.util.OnBackPressedAccessor -> com.pahans.kichibichiya.util.aq:
    void onBackPressed(android.app.Activity) -> a
com.pahans.kichibichiya.util.OnLinkClickHandler -> com.pahans.kichibichiya.util.ar:
    android.app.Activity activity -> a
    long account_id -> b
    void onLinkClick(java.lang.String,int) -> b
com.pahans.kichibichiya.util.OverridePendingTransitionAccessor -> com.pahans.kichibichiya.util.as:
    void overridePendingTransition(android.app.Activity,int,int) -> a
com.pahans.kichibichiya.util.SerializationUtil -> com.pahans.kichibichiya.util.at:
    java.lang.String getSerializationFilePath(android.content.Context,java.lang.Object[]) -> a
    java.lang.Object read(java.lang.String) -> a
    void write(java.lang.Object,java.lang.String) -> a
com.pahans.kichibichiya.util.ServiceInterface -> com.pahans.kichibichiya.util.au:
    com.pahans.kichibichiya.ITwidereService mService -> a
    android.content.ServiceConnection mConntecion -> b
    com.pahans.kichibichiya.util.ServiceInterface sInstance -> c
    int addUserListMember(long,int,long,java.lang.String) -> a
    android.os.IBinder asBinder() -> asBinder
    void cancelShutdown() -> l
    void clearNotification(int) -> a
    int createBlock(long,long) -> h
    int createFavorite(long,long) -> d
    int createFriendship(long,long) -> f
    int createMultiBlock(long,long[]) -> a
    int createUserList(long,java.lang.String,boolean,java.lang.String) -> a
    int createUserListSubscription(long,int) -> b
    int deleteUserListMember(long,int,long) -> a
    int destroyBlock(long,long) -> i
    int destroyDirectMessage(long,long) -> b
    int destroyFavorite(long,long) -> e
    int destroyFriendship(long,long) -> g
    int destroyStatus(long,long) -> a
    int destroyUserList(long,int) -> d
    int destroyUserListSubscription(long,int) -> c
    int getHomeTimeline(long[],long[]) -> a
    int getHomeTimelineWithSinceIds(long[],long[],long[]) -> a
    int getLocalTrends(long,int) -> a
    int getMentions(long[],long[]) -> b
    int getMentionsWithSinceIds(long[],long[],long[]) -> b
    int getReceivedDirectMessages(long[],long[]) -> c
    int getReceivedDirectMessagesWithSinceIds(long[],long[],long[]) -> c
    int getSentDirectMessages(long[],long[]) -> d
    int getSentDirectMessagesWithSinceIds(long[],long[],long[]) -> d
    boolean hasActivatedTask() -> g
    boolean isHomeTimelineRefreshing() -> b
    boolean isLocalTrendsRefreshing() -> f
    boolean isMentionsRefreshing() -> c
    boolean isReceivedDirectMessagesRefreshing() -> d
    boolean isSentDirectMessagesRefreshing() -> e
    int refreshAll() -> a
    int reportMultiSpam(long,long[]) -> b
    int reportSpam(long,long) -> j
    int retweetStatus(long,long) -> c
    int sendDirectMessage(long,java.lang.String,long,java.lang.String) -> a
    void shutdownService() -> k
    boolean startAutoRefresh() -> i
    void stopAutoRefresh() -> j
    boolean test() -> h
    int updateProfile(long,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    int updateProfileImage(long,android.net.Uri,boolean) -> a
    int updateStatus(long[],java.lang.String,android.location.Location,android.net.Uri,long,boolean) -> a
    int updateUserListDetails(long,int,boolean,java.lang.String,java.lang.String) -> a
    com.pahans.kichibichiya.util.ServiceInterface getInstance(android.app.Application) -> a
    void access$0(com.pahans.kichibichiya.util.ServiceInterface,com.pahans.kichibichiya.ITwidereService) -> a
    com.pahans.kichibichiya.ITwidereService access$1(com.pahans.kichibichiya.util.ServiceInterface) -> a
com.pahans.kichibichiya.util.ServiceInterface$1 -> com.pahans.kichibichiya.util.av:
    com.pahans.kichibichiya.util.ServiceInterface this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.pahans.kichibichiya.util.ServiceUtils -> com.pahans.kichibichiya.util.aw:
    java.util.HashMap sConnectionMap -> a
    com.pahans.kichibichiya.util.ServiceUtils$ServiceToken bindToService(android.content.Context,android.content.Intent,android.content.ServiceConnection) -> a
com.pahans.kichibichiya.util.ServiceUtils$ServiceBinder -> com.pahans.kichibichiya.util.ax:
    android.content.ServiceConnection mCallback -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.pahans.kichibichiya.util.ServiceUtils$ServiceToken -> com.pahans.kichibichiya.util.ay:
    android.content.ContextWrapper wrapped_context -> a
com.pahans.kichibichiya.util.SetHomeButtonEnabledAccessor -> com.pahans.kichibichiya.util.az:
    void setHomeButtonEnabled(android.app.Activity,boolean) -> a
com.pahans.kichibichiya.util.SetLayerTypeAccessor -> com.pahans.kichibichiya.util.ba:
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
com.pahans.kichibichiya.util.StatusesAdapterInterface -> com.pahans.kichibichiya.util.bb:
    com.pahans.kichibichiya.model.ParcelableStatus getStatus(int) -> c
    void setDisplayImagePreview(boolean) -> a
    void setMultiSelectEnabled(boolean) -> d
    void setShowAbsoluteTime(boolean) -> e
    void setShowAccountColor(boolean) -> f
com.pahans.kichibichiya.util.TweetShortenerInterface -> com.pahans.kichibichiya.util.bc:
    com.pahans.kichibichiya.ITweetShortener mService -> a
    android.content.ServiceConnection mConntecion -> b
    android.os.IBinder asBinder() -> asBinder
    java.lang.String shorten(java.lang.String,java.lang.String,long) -> a
    void waitForService() -> a
    com.pahans.kichibichiya.util.TweetShortenerInterface getInstance(android.app.Application,java.lang.String) -> a
    void access$0(com.pahans.kichibichiya.util.TweetShortenerInterface,com.pahans.kichibichiya.ITweetShortener) -> a
com.pahans.kichibichiya.util.TweetShortenerInterface$1 -> com.pahans.kichibichiya.util.bd:
    com.pahans.kichibichiya.util.TweetShortenerInterface this$0 -> a
    void onServiceConnected(android.content.ComponentName,android.os.IBinder) -> onServiceConnected
    void onServiceDisconnected(android.content.ComponentName) -> onServiceDisconnected
com.pahans.kichibichiya.util.TwidereHostAddressResolver -> com.pahans.kichibichiya.util.be:
    org.xbill.DNS.Resolver mResolver -> a
    android.content.SharedPreferences mHostMapping -> b
    android.content.SharedPreferences mPreferences -> c
    java.util.LinkedHashMap mHostCache -> d
    java.lang.String resolve(java.lang.String) -> a
com.pahans.kichibichiya.util.TwidereLinkify -> com.pahans.kichibichiya.util.TwidereLinkify:
    int[] ALL_LINK_TYPES -> a
    java.util.regex.Pattern PATTERN_ALL_AVAILABLE_IMAGES -> b
    java.util.regex.Pattern PATTERN_INLINE_PREVIEW_AVAILABLE_IMAGES_MATCH_ONLY -> c
    java.util.regex.Pattern PATTERN_PREVIEW_AVAILABLE_IMAGES_IN_HTML -> d
    java.util.regex.Pattern PATTERN_IMAGES -> e
    java.util.regex.Pattern PATTERN_TWITTER_IMAGES -> f
    java.util.regex.Pattern PATTERN_SINA_WEIBO_IMAGES -> g
    java.util.regex.Pattern PATTERN_LOCKERZ_AND_PLIXI -> h
    java.util.regex.Pattern PATTERN_INSTAGRAM -> i
    java.util.regex.Pattern PATTERN_TWITPIC -> j
    java.util.regex.Pattern PATTERN_IMGLY -> k
    java.util.regex.Pattern PATTERN_YFROG -> l
    java.util.regex.Pattern PATTERN_TWITGOO -> m
    java.util.regex.Pattern PATTERN_MOBYPICTURE -> n
    java.util.regex.Pattern PATTERN_IMGUR -> o
    java.util.regex.Pattern PATTERN_PHOTOZOU -> p
    java.util.regex.Pattern PATTERN_TWITTER_PROFILE_IMAGES -> q
    android.widget.TextView view -> r
    com.pahans.kichibichiya.util.TwidereLinkify$OnLinkClickListener mOnLinkClickListener -> s
    void addAllLinks() -> a
    void addLinks(int) -> a
    void setOnLinkClickListener(com.pahans.kichibichiya.util.TwidereLinkify$OnLinkClickListener) -> a
    boolean addCashtagLinks(android.text.Spannable) -> a
    boolean addHashtagLinks(android.text.Spannable) -> b
    boolean addMentionOrListLinks(android.text.Spannable) -> c
    void applyLink(java.lang.String,int,int,android.text.Spannable,int) -> a
    void addLinkMovementMethod(android.widget.TextView) -> a
com.pahans.kichibichiya.util.TwidereLinkify$LinkSpan -> com.pahans.kichibichiya.util.TwidereLinkify$LinkSpan:
    int type -> a
    com.pahans.kichibichiya.util.TwidereLinkify$OnLinkClickListener listener -> b
    void onClick(android.view.View) -> onClick
com.pahans.kichibichiya.util.TwidereLinkify$OnLinkClickListener -> com.pahans.kichibichiya.util.bf:
    void onLinkClick(java.lang.String,int) -> b
com.pahans.kichibichiya.util.Utils -> com.pahans.kichibichiya.util.bg:
    android.content.UriMatcher CONTENT_PROVIDER_URI_MATCHER -> d
    android.content.UriMatcher LINK_HANDLER_URI_MATCHER -> e
    java.util.HashMap CUSTOM_TABS_FRAGMENT_MAP -> a
    java.util.HashMap CUSTOM_TABS_TYPE_NAME_MAP -> b
    java.util.HashMap CUSTOM_TABS_ICON_NAME_MAP -> c
    java.util.Map sAccountColors -> f
    java.util.Map sUserColors -> g
    java.util.Map sAccountNames -> h
    android.net.Uri appendQueryParameters(android.net.Uri,org.apache.http.NameValuePair[]) -> a
    java.lang.String buildActivatedStatsWhereClause(android.content.Context,java.lang.String) -> a
    java.lang.String buildArguments(android.os.Bundle) -> a
    android.net.Uri buildDirectMessageConversationUri(long,long,java.lang.String) -> a
    java.lang.String buildStatusFilterWhereClause(java.lang.String,java.lang.String) -> a
    boolean bundleEquals(android.os.Bundle,android.os.Bundle) -> a
    int cancelRetweet(com.pahans.kichibichiya.util.ServiceInterface,com.pahans.kichibichiya.model.ParcelableStatus) -> a
    boolean classEquals(java.lang.Class,java.lang.Class) -> a
    void cleanDatabasesByItemLimit(android.content.Context) -> a
    void clearAccountColor() -> a
    void clearAccountName() -> b
    void clearUserColor(android.content.Context,long) -> a
    void copyStream(java.io.InputStream,java.io.OutputStream) -> a
    boolean equals(java.lang.Object,java.lang.Object) -> a
    com.pahans.kichibichiya.model.ParcelableDirectMessage findDirectMessageInDatabases(android.content.Context,long,long) -> a
    com.pahans.kichibichiya.model.ParcelableStatus findStatus(android.content.Context,long,long) -> b
    com.pahans.kichibichiya.model.ParcelableStatus findStatusInDatabases(android.content.Context,long,long) -> c
    twitter4j.UserList findUserList(twitter4j.Twitter,long,java.lang.String) -> a
    twitter4j.UserList findUserList(twitter4j.Twitter,long,java.lang.String,java.lang.String) -> a
    twitter4j.UserList findUserList(twitter4j.Twitter,java.lang.String,java.lang.String) -> a
    java.lang.String formatDirectMessageText(twitter4j.DirectMessage) -> a
    java.lang.String formatSameDayTime(android.content.Context,long) -> b
    java.lang.String formatStatusText(twitter4j.Status) -> a
    java.lang.String formatToLongTimeString(android.content.Context,long) -> c
    int getAccountColor(android.content.Context,long) -> d
    int[] getAccountColors(android.content.Context,long[]) -> a
    long getAccountId(android.content.Context,java.lang.String) -> b
    long[] getAccountIds(android.content.Context) -> b
    java.lang.String getAccountScreenName(android.content.Context,long) -> e
    java.lang.String[] getAccountScreenNames(android.content.Context) -> c
    long[] getActivatedAccountIds(android.content.Context) -> d
    com.pahans.kichibichiya.model.ImageSpec getAllAvailableImage(java.lang.String) -> a
    int getAllStatusesCount(android.content.Context,android.net.Uri) -> a
    long[] getAllStatusesIds(android.content.Context,android.net.Uri) -> b
    java.lang.String getBiggerTwitterProfileImage(java.lang.String) -> b
    java.lang.String getBrowserUserAgent(android.content.Context) -> e
    android.graphics.Bitmap getColorPreviewBitmap(android.content.Context,int) -> a
    long getDefaultAccountId(android.content.Context) -> f
    twitter4j.Twitter getDefaultTwitterInstance(android.content.Context,boolean) -> a
    twitter4j.Twitter getDefaultTwitterInstance(android.content.Context,boolean,boolean) -> a
    twitter4j.http.HttpClientWrapper getHttpClient(int,boolean,java.net.Proxy,twitter4j.http.HostAddressResolver,java.lang.String) -> a
    java.lang.String getImagePathFromUri(android.content.Context,android.net.Uri) -> c
    java.util.List getImagesInStatus(java.lang.String) -> c
    java.lang.String getImageUploadStatus(android.content.Context,java.lang.String,java.lang.String) -> a
    com.pahans.kichibichiya.model.ImageSpec getImglyImage(java.lang.String) -> d
    com.pahans.kichibichiya.model.ImageSpec getImgurImage(java.lang.String) -> e
    com.pahans.kichibichiya.model.ImageSpec getInstagramImage(java.lang.String) -> f
    com.pahans.kichibichiya.model.ImageSpec getLockerzAndPlixiImage(java.lang.String) -> g
    com.pahans.kichibichiya.model.ImageSpec getMobyPictureImage(java.lang.String) -> h
    long[] getNewestMessageIdsFromDatabase(android.content.Context,android.net.Uri) -> d
    long[] getNewestStatusIdsFromDatabase(android.content.Context,android.net.Uri) -> e
    long[] getOldestMessageIdsFromDatabase(android.content.Context,android.net.Uri) -> f
    long[] getOldestStatusIdsFromDatabase(android.content.Context,android.net.Uri) -> g
    java.lang.String getOriginalTwitterProfileImage(java.lang.String) -> i
    com.pahans.kichibichiya.model.ImageSpec getPhotozouImage(java.lang.String) -> j
    com.pahans.kichibichiya.model.PreviewImage getPreviewImage(java.lang.String,boolean) -> a
    java.net.Proxy getProxy(android.content.Context) -> g
    java.lang.String getQuoteStatus(android.content.Context,java.lang.String,java.lang.String) -> b
    java.lang.String getShareStatus(android.content.Context,java.lang.String,java.lang.String) -> c
    com.pahans.kichibichiya.model.ImageSpec getSinaWeiboImage(java.lang.String) -> k
    int getStatusBackground(boolean,boolean,boolean) -> a
    java.util.ArrayList getStatusIdsInDatabase(android.content.Context,android.net.Uri,long) -> a
    int getStatusTypeIconRes(boolean,boolean,boolean) -> b
    android.graphics.drawable.Drawable getTabIconDrawable(android.content.Context,java.lang.Object) -> a
    java.lang.Object getTabIconObject(java.lang.String) -> l
    int getTableId(android.net.Uri) -> a
    java.lang.String getTableNameForContentUri(android.net.Uri) -> b
    java.util.List getTabs(android.content.Context) -> h
    java.lang.String getTabTypeName(android.content.Context,java.lang.String) -> c
    long getTimestampFromDate(java.util.Date) -> a
    com.pahans.kichibichiya.model.ImageSpec getTwitgooImage(java.lang.String) -> m
    com.pahans.kichibichiya.model.ImageSpec getTwitpicImage(java.lang.String) -> n
    com.pahans.kichibichiya.model.ImageSpec getTwitterImage(java.lang.String) -> o
    twitter4j.Twitter getTwitterInstance(android.content.Context,long,boolean) -> a
    twitter4j.Twitter getTwitterInstance(android.content.Context,long,boolean,boolean) -> a
    int getUserColor(android.content.Context,long) -> f
    int getUserTypeIconRes(boolean,boolean) -> a
    com.pahans.kichibichiya.model.ImageSpec getYfrogImage(java.lang.String) -> p
    boolean hasActiveConnection(android.content.Context) -> i
    boolean isFiltered(android.database.sqlite.SQLiteDatabase,java.lang.String,java.lang.String,java.lang.String) -> a
    boolean isMyAccount(android.content.Context,long) -> g
    boolean isMyActivatedAccount(android.content.Context,long) -> h
    boolean isMyRetweet(com.pahans.kichibichiya.model.ParcelableStatus) -> a
    boolean isUserLoggedIn(android.content.Context,long) -> i
    android.content.ContentValues makeAccountContentValues(twitter4j.conf.Configuration,java.lang.String,twitter4j.auth.AccessToken,twitter4j.User,int,int) -> a
    android.content.ContentValues makeCachedUserContentValues(android.content.ContentValues) -> a
    android.content.ContentValues makeCachedUserContentValues(twitter4j.User) -> a
    android.content.ContentValues makeDirectMessageContentValues(twitter4j.DirectMessage,long,boolean) -> a
    android.content.ContentValues makeStatusContentValues(twitter4j.Status,long) -> a
    android.content.ContentValues[] makeTrendsContentValues(java.util.List) -> a
    int matcherEnd(java.util.regex.Matcher,int) -> a
    java.lang.String matcherGroup(java.util.regex.Matcher,int) -> b
    int matcherStart(java.util.regex.Matcher,int) -> c
    int matchLinkId(android.net.Uri) -> c
    void notifyForUpdatedUri(android.content.Context,android.net.Uri) -> h
    boolean objectEquals(java.lang.Object,java.lang.Object) -> b
    void openDirectMessagesConversation(android.app.Activity,long,long) -> a
    void openIncomingFriendships(android.app.Activity,long) -> a
    void openSavedSearches(android.app.Activity,long) -> b
    void openStatus(android.app.Activity,com.pahans.kichibichiya.model.ParcelableStatus) -> a
    void openTweetSearch(android.app.Activity,long,java.lang.String) -> a
    void openUserBlocks(android.app.Activity,long) -> c
    void openUserFavorites(android.app.Activity,long,long,java.lang.String) -> a
    void openUserFollowers(android.app.Activity,long,long,java.lang.String) -> b
    void openUserFriends(android.app.Activity,long,long,java.lang.String) -> c
    void openUserListDetails(android.app.Activity,long,int,long,java.lang.String,java.lang.String) -> a
    void openUserListMembers(android.app.Activity,long,int,long,java.lang.String,java.lang.String) -> b
    void openUserLists(android.app.Activity,long,long,java.lang.String) -> d
    void openUserListSubscribers(android.app.Activity,long,int,long,java.lang.String,java.lang.String) -> c
    void openUserListTimeline(android.app.Activity,long,int,long,java.lang.String,java.lang.String) -> d
    void openUserMentions(android.app.Activity,long,java.lang.String) -> b
    void openUserProfile(android.app.Activity,long,long,java.lang.String) -> e
    void openUserTimeline(android.app.Activity,long,long,java.lang.String) -> f
    android.os.Bundle parseArguments(java.lang.String) -> q
    double parseDouble(java.lang.String) -> r
    int parseInt(java.lang.String) -> s
    long parseLong(java.lang.String) -> t
    java.lang.String parseString(java.lang.Object) -> a
    java.net.URL parseURL(java.lang.String) -> u
    java.lang.String replaceLast(java.lang.String,java.lang.String,java.lang.String) -> a
    void restartActivity(android.app.Activity,boolean) -> a
    void setMenuForStatus(android.content.Context,android.view.Menu,com.pahans.kichibichiya.model.ParcelableStatus) -> a
    void setUserAgent(android.content.Context,twitter4j.conf.ConfigurationBuilder) -> a
    void setUserColor(android.content.Context,long,int) -> a
    void showErrorToast(android.content.Context,java.lang.String,boolean) -> a
    void showErrorToast(android.content.Context,java.lang.String,java.lang.Throwable,boolean) -> a
    java.lang.String trimLineBreak(java.lang.String) -> v
    android.graphics.Bitmap getTabIconFromFile(java.io.File,android.content.res.Resources) -> a
    void parseEntities(com.pahans.kichibichiya.util.HtmlBuilder,twitter4j.EntitySupport) -> a
com.pahans.kichibichiya.util.http.ApacheHttpClientHttpResponseImpl -> com.pahans.kichibichiya.util.a.a:
    org.apache.http.HttpResponse res -> e
    void disconnect() -> a
    java.lang.String getResponseHeader(java.lang.String) -> a
com.pahans.kichibichiya.util.http.HttpClientImpl -> com.pahans.kichibichiya.util.a.b:
    twitter4j.internal.logging.Logger logger -> a
    twitter4j.http.HttpClientConfiguration conf -> b
    org.apache.http.client.HttpClient client -> c
    org.apache.http.conn.ssl.SSLSocketFactory TRUST_ALL_SSL_SOCKET_FACTORY -> d
    twitter4j.http.HttpResponse request(twitter4j.http.HttpRequest) -> a
com.pahans.kichibichiya.util.http.HttpClientImpl$TrustAllSSLSocketFactory -> com.pahans.kichibichiya.util.a.c:
    javax.net.ssl.SSLContext sslContext -> a
    java.net.Socket createSocket() -> createSocket
    java.net.Socket createSocket(java.net.Socket,java.lang.String,int,boolean) -> createSocket
    org.apache.http.conn.ssl.SSLSocketFactory getInstance() -> a
com.pahans.kichibichiya.util.http.HttpClientImpl$TrustAllSSLSocketFactory$1 -> com.pahans.kichibichiya.util.a.d:
    com.pahans.kichibichiya.util.http.HttpClientImpl$TrustAllSSLSocketFactory this$1 -> a
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
com.pahans.kichibichiya.view.ColorLabelRelativeLayout -> com.pahans.kichibichiya.view.ColorLabelRelativeLayout:
    android.graphics.Paint mPaintLeft -> a
    android.graphics.Paint mPaintRight -> b
    android.graphics.Paint mPaintBackground -> c
    android.graphics.Rect mRectLeft -> d
    android.graphics.Rect mRectRight -> e
    android.graphics.Rect mRectBackground -> f
    float mDensity -> g
    boolean mIsRTL -> h
    void drawBackground(int) -> a
    void drawLabel(int,int,int) -> a
    void drawLeft(int) -> b
    void drawRight(int) -> c
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSizeChanged(int,int,int,int) -> onSizeChanged
com.pahans.kichibichiya.view.ColorPickerView -> com.pahans.kichibichiya.view.a:
    float HUE_PANEL_WIDTH -> a
    float ALPHA_PANEL_HEIGHT -> b
    float PANEL_SPACING -> c
    float PALETTE_CIRCLE_TRACKER_RADIUS -> d
    float RECTANGLE_TRACKER_OFFSET -> e
    float mDensity -> f
    com.pahans.kichibichiya.view.ColorPickerView$OnColorChangedListener mListener -> g
    android.graphics.Paint mSatValPaint -> h
    android.graphics.Paint mSatValTrackerPaint -> i
    android.graphics.Paint mHuePaint -> j
    android.graphics.Paint mHueTrackerPaint -> k
    android.graphics.Paint mAlphaPaint -> l
    android.graphics.Paint mAlphaTextPaint -> m
    android.graphics.Paint mBorderPaint -> n
    android.graphics.Shader mValShader -> o
    android.graphics.Shader mSatShader -> p
    android.graphics.Shader mHueShader -> q
    android.graphics.Shader mAlphaShader -> r
    int mAlpha -> s
    float mHue -> t
    float mSat -> u
    float mVal -> v
    java.lang.String mAlphaSliderText -> w
    int mSliderTrackerColor -> x
    int mBorderColor -> y
    boolean mShowAlphaPanel -> z
    int mLastTouchedPanel -> A
    float mDrawingOffset -> B
    android.graphics.RectF mDrawingRect -> C
    android.graphics.RectF mSatValRect -> D
    android.graphics.RectF mHueRect -> E
    android.graphics.RectF mAlphaRect -> F
    com.pahans.kichibichiya.graphic.AlphaPatternDrawable mAlphaPattern -> G
    android.graphics.Point mStartTouchPoint -> H
    java.lang.String getAlphaSliderText() -> getAlphaSliderText
    int getBorderColor() -> getBorderColor
    int getColor() -> getColor
    float getDrawingOffset() -> getDrawingOffset
    int getSliderTrackerColor() -> getSliderTrackerColor
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    boolean onTrackballEvent(android.view.MotionEvent) -> onTrackballEvent
    void setAlphaSliderText(int) -> setAlphaSliderText
    void setAlphaSliderText(java.lang.String) -> setAlphaSliderText
    void setAlphaSliderVisible(boolean) -> setAlphaSliderVisible
    void setBorderColor(int) -> setBorderColor
    void setColor(int) -> setColor
    void setColor(int,boolean) -> a
    void setOnColorChangedListener(com.pahans.kichibichiya.view.ColorPickerView$OnColorChangedListener) -> setOnColorChangedListener
    void setSliderTrackerColor(int) -> setSliderTrackerColor
    void onDraw(android.graphics.Canvas) -> onDraw
    void onMeasure(int,int) -> onMeasure
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    android.graphics.Point alphaToPoint(int) -> a
    int[] buildHueColorArray() -> a
    float calculateRequiredOffset() -> b
    int chooseHeight(int,int) -> a
    int chooseWidth(int,int) -> b
    void drawAlphaPanel(android.graphics.Canvas) -> a
    void drawHuePanel(android.graphics.Canvas) -> b
    void drawSatValPanel(android.graphics.Canvas) -> c
    int getPrefferedHeight() -> getPrefferedHeight
    int getPrefferedWidth() -> getPrefferedWidth
    android.graphics.Point hueToPoint(float) -> a
    void init() -> c
    void initPaintTools() -> d
    boolean moveTrackersIfNeeded(android.view.MotionEvent) -> a
    int pointToAlpha(int) -> b
    float pointToHue(float) -> b
    float[] pointToSatVal(float,float) -> a
    android.graphics.Point satValToPoint(float,float) -> b
    void setUpAlphaRect() -> e
    void setUpHueRect() -> f
    void setUpSatValRect() -> g
com.pahans.kichibichiya.view.ColorPickerView$OnColorChangedListener -> com.pahans.kichibichiya.view.b:
    void onColorChanged(int) -> a
com.pahans.kichibichiya.view.ColorView -> com.pahans.kichibichiya.view.ColorView:
    int mOrientation -> a
    int[] mColors -> b
    android.graphics.Paint mPaint -> c
    void setColor(int[]) -> setColor
    void setOrientation(int) -> setOrientation
    void onDraw(android.graphics.Canvas) -> onDraw
com.pahans.kichibichiya.view.ExtendedFrameLayout -> com.pahans.kichibichiya.view.ExtendedFrameLayout:
    com.pahans.kichibichiya.view.ExtendedFrameLayout$TouchInterceptor mTouchInterceptor -> a
    com.pahans.kichibichiya.view.ExtendedFrameLayout$OnSizeChangedListener mOnSizeChangedListener -> b
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setOnSizeChangedListener(com.pahans.kichibichiya.view.ExtendedFrameLayout$OnSizeChangedListener) -> setOnSizeChangedListener
    void setTouchInterceptor(com.pahans.kichibichiya.view.ExtendedFrameLayout$TouchInterceptor) -> setTouchInterceptor
    void onSizeChanged(int,int,int,int) -> onSizeChanged
com.pahans.kichibichiya.view.ExtendedFrameLayout$OnSizeChangedListener -> com.pahans.kichibichiya.view.c:
    void onSizeChanged(android.widget.FrameLayout,int,int,int,int) -> a
com.pahans.kichibichiya.view.ExtendedFrameLayout$TouchInterceptor -> com.pahans.kichibichiya.view.d:
    void onInterceptTouchEvent(android.view.MotionEvent) -> a
com.pahans.kichibichiya.view.ExtendedViewPager -> com.pahans.kichibichiya.view.ExtendedViewPager:
    boolean mPagingEnabled -> a
    boolean onInterceptTouchEvent(android.view.MotionEvent) -> onInterceptTouchEvent
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void setPagingEnabled(boolean) -> setPagingEnabled
com.pahans.kichibichiya.view.HandleSpanClickTextView -> com.pahans.kichibichiya.view.HandleSpanClickTextView:
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void init() -> a
com.pahans.kichibichiya.view.ImageViewer -> com.pahans.kichibichiya.view.ImageViewer:
    android.graphics.Bitmap mBitmap -> a
    android.graphics.Paint mPaint -> b
    android.graphics.Paint mBackgroundPaint -> c
    int mDx -> d
    int mDy -> e
    float mZoomFactor -> f
    float mMinZoomFactor -> g
    boolean mMotionControl -> h
    int mSavedX -> i
    int mSavedY -> j
    float mStartPinchDistance2 -> k
    float mStartZoomFactor -> l
    boolean isWaitingForDoubleTap -> m
    android.os.Handler mHandler -> n
    boolean onTouchEvent(android.view.MotionEvent) -> onTouchEvent
    void recycle() -> a
    void setBitmap(android.graphics.Bitmap) -> setBitmap
    void onDraw(android.graphics.Canvas) -> onDraw
    float getMinZoom(android.graphics.Bitmap) -> a
    boolean onSingleTouchEvent(android.view.MotionEvent) -> a
    void shift(int,int) -> a
    android.os.Handler access$0(com.pahans.kichibichiya.view.ImageViewer) -> a
    float access$1(com.pahans.kichibichiya.view.ImageViewer) -> b
    float access$2(com.pahans.kichibichiya.view.ImageViewer) -> c
    void access$3(com.pahans.kichibichiya.view.ImageViewer,float) -> a
    void access$4(com.pahans.kichibichiya.view.ImageViewer,boolean) -> a
    void access$5(com.pahans.kichibichiya.view.ImageViewer,float) -> b
    void access$6(com.pahans.kichibichiya.view.ImageViewer,boolean) -> b
    void access$7(com.pahans.kichibichiya.view.ImageViewer,int) -> a
    void access$8(com.pahans.kichibichiya.view.ImageViewer,int) -> b
    void access$9(com.pahans.kichibichiya.view.ImageViewer,float) -> c
    boolean access$10(com.pahans.kichibichiya.view.ImageViewer) -> d
    int access$11(com.pahans.kichibichiya.view.ImageViewer) -> e
    int access$12(com.pahans.kichibichiya.view.ImageViewer) -> f
    void access$13(com.pahans.kichibichiya.view.ImageViewer,int,int) -> a
    float access$14(com.pahans.kichibichiya.view.ImageViewer) -> g
    float access$15(com.pahans.kichibichiya.view.ImageViewer) -> h
com.pahans.kichibichiya.view.ImageViewer$1 -> com.pahans.kichibichiya.view.e:
    com.pahans.kichibichiya.view.ImageViewer this$0 -> a
    void handleMessage(android.os.Message) -> handleMessage
com.pahans.kichibichiya.view.ImageViewer$GetPointerCountAccessor -> com.pahans.kichibichiya.view.f:
    int getPointerCount(android.view.MotionEvent) -> a
com.pahans.kichibichiya.view.ImageViewer$OnMultiTouchEventCompat -> com.pahans.kichibichiya.view.g:
    boolean onMultiTouchEvent(com.pahans.kichibichiya.view.ImageViewer,android.view.MotionEvent) -> b
    boolean access$0(com.pahans.kichibichiya.view.ImageViewer,android.view.MotionEvent) -> a
com.pahans.kichibichiya.view.RoundCorneredImageView -> com.pahans.kichibichiya.view.RoundCorneredImageView:
    float mRadius -> a
    android.graphics.Path mPath -> b
    android.graphics.Bitmap mRounder -> c
    android.graphics.Paint mPaint -> d
    void onDraw(android.graphics.Canvas) -> onDraw
    void onSizeChanged(int,int,int,int) -> onSizeChanged
    void createPath() -> a
com.pahans.kichibichiya.view.RoundCorneredImageView$SetLayerTypeAccessor -> com.pahans.kichibichiya.view.h:
    void setLayerType(android.view.View,int,android.graphics.Paint) -> a
com.pahans.kichibichiya.view.StatusComposeEditText -> com.pahans.kichibichiya.view.StatusComposeEditText:
    com.pahans.kichibichiya.adapter.UserAutoCompleteAdapter mAdapter -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
com.pahans.kichibichiya.view.StatusComposeEditText$ScreenNameTokenizer -> com.pahans.kichibichiya.view.i:
    int findTokenEnd(java.lang.CharSequence,int) -> findTokenEnd
    int findTokenStart(java.lang.CharSequence,int) -> findTokenStart
    java.lang.CharSequence terminateToken(java.lang.CharSequence) -> terminateToken
com.pahans.kichibichiya.view.TabPageIndicator -> com.pahans.kichibichiya.view.TabPageIndicator:
    java.lang.Runnable mTabSelector -> b
    int mCurrentItem -> c
    com.pahans.kichibichiya.view.TabPageIndicator$TitleProvider mAdapter -> d
    android.view.View$OnClickListener mTabClickListener -> e
    android.view.View$OnLongClickListener mTabLongClickListener -> f
    android.widget.LinearLayout mTabLayout -> g
    com.pahans.kichibichiya.view.ExtendedViewPager mViewPager -> h
    android.support.v4.view.ViewPager$OnPageChangeListener mListener -> i
    android.view.LayoutInflater mInflater -> j
    int mMaxTabWidth -> a
    int mSelectedTabIndex -> k
    boolean mPagingEnabled -> l
    void notifyDataSetChanged() -> a
    void onAttachedToWindow() -> onAttachedToWindow
    void onDetachedFromWindow() -> onDetachedFromWindow
    void onMeasure(int,int) -> onMeasure
    void onPageScrolled(int,float,int) -> a
    void onPageScrollStateChanged(int) -> b
    void onPageSelected(int) -> a_
    void setCurrentItem(int) -> setCurrentItem
    void setOnPageChangeListener(android.support.v4.view.ViewPager$OnPageChangeListener) -> setOnPageChangeListener
    void setPagingEnabled(boolean) -> setPagingEnabled
    void setViewPager(com.pahans.kichibichiya.view.ExtendedViewPager) -> setViewPager
    void addTab(android.graphics.drawable.Drawable,int) -> a
    void addTab(java.lang.String,android.graphics.drawable.Drawable,int) -> a
    void addTab(java.lang.String,int) -> a
    void animateToTab(int) -> c
    boolean access$0(com.pahans.kichibichiya.view.TabPageIndicator) -> a
    int access$1(com.pahans.kichibichiya.view.TabPageIndicator) -> b
    com.pahans.kichibichiya.view.TabPageIndicator$TitleProvider access$2(com.pahans.kichibichiya.view.TabPageIndicator) -> c
    void access$3(com.pahans.kichibichiya.view.TabPageIndicator,int) -> a
    com.pahans.kichibichiya.view.ExtendedViewPager access$4(com.pahans.kichibichiya.view.TabPageIndicator) -> d
    void access$5(com.pahans.kichibichiya.view.TabPageIndicator,java.lang.Runnable) -> a
com.pahans.kichibichiya.view.TabPageIndicator$1 -> com.pahans.kichibichiya.view.j:
    com.pahans.kichibichiya.view.TabPageIndicator this$0 -> a
    void onClick(android.view.View) -> onClick
com.pahans.kichibichiya.view.TabPageIndicator$2 -> com.pahans.kichibichiya.view.k:
    com.pahans.kichibichiya.view.TabPageIndicator this$0 -> a
    boolean onLongClick(android.view.View) -> onLongClick
com.pahans.kichibichiya.view.TabPageIndicator$3 -> com.pahans.kichibichiya.view.l:
    com.pahans.kichibichiya.view.TabPageIndicator this$0 -> a
    android.view.View val$tabView -> b
    void run() -> run
com.pahans.kichibichiya.view.TabPageIndicator$TabView -> com.pahans.kichibichiya.view.TabPageIndicator$TabView:
    com.pahans.kichibichiya.view.TabPageIndicator mParent -> a
    int mIndex -> b
    int getIndex() -> getIndex
    void init(com.pahans.kichibichiya.view.TabPageIndicator,java.lang.String,android.graphics.drawable.Drawable,int) -> a
    void onMeasure(int,int) -> onMeasure
com.pahans.kichibichiya.view.TabPageIndicator$TitleProvider -> com.pahans.kichibichiya.view.m:
    android.graphics.drawable.Drawable getIcon(int) -> c
    java.lang.String getTitle(int) -> d
    void onPageReselected(int) -> e
    void onPageSelected(int) -> f
    boolean onTabLongClick(int) -> g
com.pahans.sinhala.droid.project.SCTextView -> com.pahans.sinhala.droid.project.SCTextView:
    android.graphics.Typeface tf -> a
    void init() -> a
com.pahans.sinhala.droid.project.SinhalaDroid -> com.pahans.sinhala.droid.project.a:
    java.util.regex.Pattern p1 -> a
    java.util.regex.Pattern p2 -> b
    java.lang.String convert(java.lang.String) -> a
    java.lang.String unifix(java.lang.String) -> b
com.robobunny.SeekBarPreference -> com.robobunny.SeekBarPreference:
    java.lang.String TAG -> a
    int mMaxValue -> b
    int mMinValue -> c
    int mInterval -> d
    int mCurrentValue -> e
    java.lang.String mUnitsLeft -> f
    java.lang.String mUnitsRight -> g
    android.widget.SeekBar mSeekBar -> h
    android.widget.TextView mStatusText -> i
    void onBindView(android.view.View) -> onBindView
    void onProgressChanged(android.widget.SeekBar,int,boolean) -> onProgressChanged
    void onStartTrackingTouch(android.widget.SeekBar) -> onStartTrackingTouch
    void onStopTrackingTouch(android.widget.SeekBar) -> onStopTrackingTouch
    android.view.View onCreateView(android.view.ViewGroup) -> onCreateView
    java.lang.Object onGetDefaultValue(android.content.res.TypedArray,int) -> onGetDefaultValue
    void onSetInitialValue(boolean,java.lang.Object) -> onSetInitialValue
    void updateView(android.view.View) -> a
    java.lang.String getAttributeStringValue(android.util.AttributeSet,java.lang.String,java.lang.String,java.lang.String) -> a
    void initPreference(android.content.Context,android.util.AttributeSet) -> a
    void setValuesFromXml(android.util.AttributeSet) -> a
com.twitter.Extractor -> com.b.a:
    boolean extractURLWithoutProtocol -> a
    java.util.List extractMentionedScreennames(java.lang.String) -> a
    java.util.List extractMentionedScreennames(java.lang.String,boolean) -> a
    java.util.List extractMentionedScreennamesWithIndices(java.lang.String) -> b
    java.util.List extractMentionsOrListsWithIndices(java.lang.String) -> c
    java.util.List extractURLsWithIndices(java.lang.String) -> d
com.twitter.Extractor$Entity -> com.b.b:
    int start -> a
    int end -> b
    java.lang.String value -> c
    java.lang.String listSlug -> d
    com.twitter.Extractor$Entity$Type type -> e
    java.lang.String displayURL -> f
    java.lang.String expandedURL -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
com.twitter.Extractor$Entity$Type -> com.b.c:
    com.twitter.Extractor$Entity$Type URL -> a
    com.twitter.Extractor$Entity$Type HASHTAG -> b
    com.twitter.Extractor$Entity$Type MENTION -> c
    com.twitter.Extractor$Entity$Type CASHTAG -> d
    com.twitter.Extractor$Entity$Type[] ENUM$VALUES -> e
    com.twitter.Extractor$Entity$Type[] values() -> values
    com.twitter.Extractor$Entity$Type valueOf(java.lang.String) -> valueOf
com.twitter.Regex -> com.b.d:
    java.lang.String LATIN_ACCENTS_CHARS -> k
    java.lang.String HASHTAG_ALPHA_CHARS -> l
    java.lang.String HASHTAG_ALPHA_NUMERIC_CHARS -> m
    java.lang.String HASHTAG_ALPHA -> n
    java.lang.String HASHTAG_ALPHA_NUMERIC -> o
    java.lang.String URL_VALID_CHARS -> p
    java.lang.String URL_VALID_SUBDOMAIN -> q
    java.lang.String URL_VALID_DOMAIN_NAME -> r
    java.lang.String URL_VALID_DOMAIN -> s
    java.lang.String URL_VALID_GENERAL_PATH_CHARS -> t
    java.lang.String URL_BALANCED_PARENS -> u
    java.lang.String URL_VALID_PATH_ENDING_CHARS -> v
    java.lang.String URL_VALID_PATH -> w
    java.lang.String VALID_URL_PATTERN_STRING -> x
    java.lang.String AT_SIGNS_CHARS -> y
    java.util.regex.Pattern VALID_HASHTAG -> a
    java.util.regex.Pattern INVALID_HASHTAG_MATCH_END -> b
    java.util.regex.Pattern AT_SIGNS -> c
    java.util.regex.Pattern VALID_MENTION_OR_LIST -> d
    java.util.regex.Pattern VALID_REPLY -> e
    java.util.regex.Pattern INVALID_MENTION_MATCH_END -> f
    java.util.regex.Pattern VALID_URL -> g
    java.util.regex.Pattern VALID_TCO_URL -> h
    java.util.regex.Pattern INVALID_URL_WITHOUT_PROTOCOL_MATCH_BEGIN -> i
    java.util.regex.Pattern VALID_CASHTAG -> j
com.twitter.Validator -> com.b.e:
    int shortUrlLength -> a
    int shortUrlLengthHttps -> b
    com.twitter.Extractor extractor -> c
    int getTweetLength(java.lang.String) -> a
    boolean isValidTweet(java.lang.String) -> b
org.apache.http.entity.mime.FormBodyPart -> org.a.a.a.a.a:
    java.lang.String name -> a
    org.apache.http.entity.mime.Header header -> b
    org.apache.http.entity.mime.content.ContentBody body -> c
    java.lang.String getName() -> a
    org.apache.http.entity.mime.content.ContentBody getBody() -> b
    org.apache.http.entity.mime.Header getHeader() -> c
    void addField(java.lang.String,java.lang.String) -> a
    void generateContentDisp(org.apache.http.entity.mime.content.ContentBody) -> a
    void generateContentType(org.apache.http.entity.mime.content.ContentBody) -> b
    void generateTransferEncoding(org.apache.http.entity.mime.content.ContentBody) -> c
org.apache.http.entity.mime.Header -> org.a.a.a.a.b:
    java.util.List fields -> a
    java.util.Map fieldMap -> b
    void addField(org.apache.http.entity.mime.MinimalField) -> a
    org.apache.http.entity.mime.MinimalField getField(java.lang.String) -> a
    java.util.Iterator iterator() -> iterator
    java.lang.String toString() -> toString
org.apache.http.entity.mime.HttpMultipart -> org.a.a.a.a.c:
    org.apache.http.util.ByteArrayBuffer FIELD_SEP -> a
    org.apache.http.util.ByteArrayBuffer CR_LF -> b
    org.apache.http.util.ByteArrayBuffer TWO_DASHES -> c
    java.lang.String subType -> d
    java.nio.charset.Charset charset -> e
    java.lang.String boundary -> f
    java.util.List parts -> g
    org.apache.http.entity.mime.HttpMultipartMode mode -> h
    org.apache.http.util.ByteArrayBuffer encode(java.nio.charset.Charset,java.lang.String) -> a
    void writeBytes(org.apache.http.util.ByteArrayBuffer,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.nio.charset.Charset,java.io.OutputStream) -> a
    void writeBytes(java.lang.String,java.io.OutputStream) -> a
    void writeField(org.apache.http.entity.mime.MinimalField,java.io.OutputStream) -> a
    void writeField(org.apache.http.entity.mime.MinimalField,java.nio.charset.Charset,java.io.OutputStream) -> a
    java.util.List getBodyParts() -> a
    void addBodyPart(org.apache.http.entity.mime.FormBodyPart) -> a
    java.lang.String getBoundary() -> b
    void doWriteTo(org.apache.http.entity.mime.HttpMultipartMode,java.io.OutputStream,boolean) -> a
    void writeTo(java.io.OutputStream) -> a
    long getTotalLength() -> c
org.apache.http.entity.mime.HttpMultipart$1 -> org.a.a.a.a.d:
    int[] $SwitchMap$org$apache$http$entity$mime$HttpMultipartMode -> a
org.apache.http.entity.mime.HttpMultipartMode -> org.a.a.a.a.e:
    org.apache.http.entity.mime.HttpMultipartMode STRICT -> a
    org.apache.http.entity.mime.HttpMultipartMode BROWSER_COMPATIBLE -> b
    org.apache.http.entity.mime.HttpMultipartMode[] $VALUES -> c
    org.apache.http.entity.mime.HttpMultipartMode[] values() -> values
    org.apache.http.entity.mime.HttpMultipartMode valueOf(java.lang.String) -> valueOf
org.apache.http.entity.mime.MIME -> org.a.a.a.a.f:
    java.nio.charset.Charset DEFAULT_CHARSET -> a
org.apache.http.entity.mime.MinimalField -> org.a.a.a.a.g:
    java.lang.String name -> a
    java.lang.String value -> b
    java.lang.String getName() -> a
    java.lang.String getBody() -> b
    java.lang.String toString() -> toString
org.apache.http.entity.mime.MultipartEntity -> org.a.a.a.a.h:
    char[] MULTIPART_CHARS -> a
    org.apache.http.entity.mime.HttpMultipart multipart -> b
    org.apache.http.Header contentType -> c
    long length -> d
    boolean dirty -> e
    java.lang.String generateContentType(java.lang.String,java.nio.charset.Charset) -> a
    java.lang.String generateBoundary() -> a
    void addPart(org.apache.http.entity.mime.FormBodyPart) -> a
    void addPart(java.lang.String,org.apache.http.entity.mime.content.ContentBody) -> a
    boolean isRepeatable() -> isRepeatable
    boolean isChunked() -> isChunked
    boolean isStreaming() -> isStreaming
    long getContentLength() -> getContentLength
    org.apache.http.Header getContentType() -> getContentType
    org.apache.http.Header getContentEncoding() -> getContentEncoding
    void consumeContent() -> consumeContent
    java.io.InputStream getContent() -> getContent
    void writeTo(java.io.OutputStream) -> writeTo
org.apache.http.entity.mime.content.AbstractContentBody -> org.a.a.a.a.a.a:
    java.lang.String mimeType -> a
    java.lang.String mediaType -> b
    java.lang.String subType -> c
    java.lang.String getMimeType() -> a
org.apache.http.entity.mime.content.ContentBody -> org.a.a.a.a.a.b:
    java.lang.String getFilename() -> b
    void writeTo(java.io.OutputStream) -> a
org.apache.http.entity.mime.content.ContentDescriptor -> org.a.a.a.a.a.c:
    java.lang.String getMimeType() -> a
    java.lang.String getCharset() -> c
    java.lang.String getTransferEncoding() -> d
    long getContentLength() -> e
org.apache.http.entity.mime.content.FileBody -> org.a.a.a.a.a.d:
    java.io.File file -> a
    java.lang.String filename -> b
    java.lang.String charset -> c
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
org.apache.http.entity.mime.content.StringBody -> org.a.a.a.a.a.e:
    byte[] content -> a
    java.nio.charset.Charset charset -> b
    void writeTo(java.io.OutputStream) -> a
    java.lang.String getTransferEncoding() -> d
    java.lang.String getCharset() -> c
    long getContentLength() -> e
    java.lang.String getFilename() -> b
org.ccil.cowan.tagsoup.AttributesImpl -> org.b.a.a.a:
    int length -> a
    java.lang.String[] data -> b
    int getLength() -> getLength
    java.lang.String getURI(int) -> getURI
    java.lang.String getLocalName(int) -> getLocalName
    java.lang.String getQName(int) -> getQName
    java.lang.String getType(int) -> getType
    java.lang.String getValue(int) -> getValue
    int getIndex(java.lang.String,java.lang.String) -> getIndex
    int getIndex(java.lang.String) -> getIndex
    java.lang.String getType(java.lang.String,java.lang.String) -> getType
    java.lang.String getType(java.lang.String) -> getType
    java.lang.String getValue(java.lang.String,java.lang.String) -> getValue
    java.lang.String getValue(java.lang.String) -> getValue
    void clear() -> a
    void setAttributes(org.xml.sax.Attributes) -> a
    void addAttribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void setAttribute(int,java.lang.String,java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void removeAttribute(int) -> a
    void ensureCapacity(int) -> b
    void badIndex(int) -> c
org.ccil.cowan.tagsoup.AutoDetector -> org.b.a.a.b:
    java.io.Reader autoDetectingReader(java.io.InputStream) -> a
org.ccil.cowan.tagsoup.Element -> org.b.a.a.c:
    org.ccil.cowan.tagsoup.ElementType theType -> a
    org.ccil.cowan.tagsoup.AttributesImpl theAtts -> b
    org.ccil.cowan.tagsoup.Element theNext -> c
    boolean preclosed -> d
    org.ccil.cowan.tagsoup.AttributesImpl atts() -> a
    org.ccil.cowan.tagsoup.Element next() -> b
    void setNext(org.ccil.cowan.tagsoup.Element) -> a
    java.lang.String name() -> c
    java.lang.String namespace() -> d
    java.lang.String localName() -> e
    int model() -> f
    int flags() -> g
    org.ccil.cowan.tagsoup.ElementType parent() -> h
    boolean canContain(org.ccil.cowan.tagsoup.Element) -> b
    void setAttribute(java.lang.String,java.lang.String,java.lang.String) -> a
    void anonymize() -> i
    void clean() -> j
    void preclose() -> k
    boolean isPreclosed() -> l
org.ccil.cowan.tagsoup.ElementType -> org.b.a.a.d:
    java.lang.String theName -> a
    java.lang.String theNamespace -> b
    java.lang.String theLocalName -> c
    int theModel -> d
    int theMemberOf -> e
    int theFlags -> f
    org.ccil.cowan.tagsoup.AttributesImpl theAtts -> g
    org.ccil.cowan.tagsoup.ElementType theParent -> h
    org.ccil.cowan.tagsoup.Schema theSchema -> i
    java.lang.String namespace(java.lang.String,boolean) -> a
    java.lang.String localName(java.lang.String) -> a
    java.lang.String name() -> a
    java.lang.String namespace() -> b
    java.lang.String localName() -> c
    int model() -> d
    int flags() -> e
    org.ccil.cowan.tagsoup.AttributesImpl atts() -> f
    org.ccil.cowan.tagsoup.ElementType parent() -> g
    boolean canContain(org.ccil.cowan.tagsoup.ElementType) -> a
    void setAttribute(org.ccil.cowan.tagsoup.AttributesImpl,java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String normalize(java.lang.String) -> b
    void setAttribute(java.lang.String,java.lang.String,java.lang.String) -> a
    void setParent(org.ccil.cowan.tagsoup.ElementType) -> b
org.ccil.cowan.tagsoup.HTMLScanner -> org.b.a.a.e:
    int[] statetable -> h
    java.lang.String[] debug_actionnames -> i
    java.lang.String[] debug_statenames -> j
    java.lang.String thePublicid -> k
    java.lang.String theSystemid -> l
    int theLastLine -> m
    int theLastColumn -> n
    int theCurrentLine -> o
    int theCurrentColumn -> p
    int theState -> a
    int theNextState -> b
    char[] theOutputBuffer -> c
    int theSize -> d
    int[] theWinMap -> e
    short[][] statetableIndex -> f
    int statetableIndexMaxChar -> g
    void unread(java.io.PushbackReader,int) -> a
    int getLineNumber() -> getLineNumber
    int getColumnNumber() -> getColumnNumber
    java.lang.String getPublicId() -> getPublicId
    java.lang.String getSystemId() -> getSystemId
    void resetDocumentLocator(java.lang.String,java.lang.String) -> a
    void scan(java.io.Reader,org.ccil.cowan.tagsoup.ScanHandler) -> a
    void mark() -> b
    void startCDATA() -> a
    void save(int,org.ccil.cowan.tagsoup.ScanHandler) -> a
org.ccil.cowan.tagsoup.HTMLSchema -> org.b.a.a.f:
org.ccil.cowan.tagsoup.Parser -> org.b.a.a.g:
    org.xml.sax.ContentHandler theContentHandler -> a
    org.xml.sax.ext.LexicalHandler theLexicalHandler -> b
    org.xml.sax.DTDHandler theDTDHandler -> c
    org.xml.sax.ErrorHandler theErrorHandler -> d
    org.xml.sax.EntityResolver theEntityResolver -> e
    org.ccil.cowan.tagsoup.Schema theSchema -> f
    org.ccil.cowan.tagsoup.Scanner theScanner -> g
    org.ccil.cowan.tagsoup.AutoDetector theAutoDetector -> h
    boolean DEFAULT_NAMESPACES -> i
    boolean DEFAULT_IGNORE_BOGONS -> j
    boolean DEFAULT_BOGONS_EMPTY -> k
    boolean DEFAULT_ROOT_BOGONS -> l
    boolean DEFAULT_DEFAULT_ATTRIBUTES -> m
    boolean DEFAULT_TRANSLATE_COLONS -> n
    boolean DEFAULT_RESTART_ELEMENTS -> o
    boolean DEFAULT_IGNORABLE_WHITESPACE -> p
    boolean DEFAULT_CDATA_ELEMENTS -> q
    boolean namespaces -> r
    boolean ignoreBogons -> s
    boolean bogonsEmpty -> t
    boolean rootBogons -> u
    boolean defaultAttributes -> v
    boolean translateColons -> w
    boolean restartElements -> x
    boolean ignorableWhitespace -> y
    boolean CDATAElements -> z
    java.util.HashMap theFeatures -> A
    org.ccil.cowan.tagsoup.Element theNewElement -> B
    java.lang.String theAttributeName -> C
    boolean theDoctypeIsPresent -> D
    java.lang.String theDoctypePublicId -> E
    java.lang.String theDoctypeSystemId -> F
    java.lang.String theDoctypeName -> G
    java.lang.String thePITarget -> H
    org.ccil.cowan.tagsoup.Element theStack -> I
    org.ccil.cowan.tagsoup.Element theSaved -> J
    org.ccil.cowan.tagsoup.Element thePCDATA -> K
    int theEntity -> L
    char[] etagchars -> M
    boolean virginStack -> N
    java.lang.String legal -> O
    char[] theCommentBuffer -> P
    java.lang.Boolean truthValue(boolean) -> a
    boolean getFeature(java.lang.String) -> getFeature
    void setFeature(java.lang.String,boolean) -> setFeature
    java.lang.Object getProperty(java.lang.String) -> getProperty
    void setProperty(java.lang.String,java.lang.Object) -> setProperty
    void setEntityResolver(org.xml.sax.EntityResolver) -> setEntityResolver
    org.xml.sax.EntityResolver getEntityResolver() -> getEntityResolver
    void setDTDHandler(org.xml.sax.DTDHandler) -> setDTDHandler
    org.xml.sax.DTDHandler getDTDHandler() -> getDTDHandler
    void setContentHandler(org.xml.sax.ContentHandler) -> setContentHandler
    org.xml.sax.ContentHandler getContentHandler() -> getContentHandler
    void setErrorHandler(org.xml.sax.ErrorHandler) -> setErrorHandler
    org.xml.sax.ErrorHandler getErrorHandler() -> getErrorHandler
    void parse(org.xml.sax.InputSource) -> parse
    void parse(java.lang.String) -> parse
    void setup() -> b
    java.io.Reader getReader(org.xml.sax.InputSource) -> a
    java.io.InputStream getInputStream(java.lang.String,java.lang.String) -> a
    void adup(char[],int,int) -> a
    void aname(char[],int,int) -> b
    void aval(char[],int,int) -> c
    java.lang.String expandEntities(java.lang.String) -> a
    void entity(char[],int,int) -> d
    int lookupEntity(char[],int,int) -> q
    void eof(char[],int,int) -> e
    void etag(char[],int,int) -> f
    boolean etag_cdata(char[],int,int) -> g
    void etag_basic(char[],int,int) -> h
    void restart(org.ccil.cowan.tagsoup.Element) -> a
    void pop() -> c
    void restartablyPop() -> d
    void push(org.ccil.cowan.tagsoup.Element) -> b
    java.lang.String prefixOf(java.lang.String) -> b
    boolean foreign(java.lang.String,java.lang.String) -> b
    void decl(char[],int,int) -> i
    java.lang.String trimquotes(java.lang.String) -> c
    java.lang.String[] split(java.lang.String) -> d
    java.lang.String cleanPublicid(java.lang.String) -> e
    void gi(char[],int,int) -> j
    void pcdata(char[],int,int) -> k
    void pitarget(char[],int,int) -> l
    void pi(char[],int,int) -> m
    void stagc(char[],int,int) -> n
    void stage(char[],int,int) -> o
    void cmnt(char[],int,int) -> p
    void rectify(org.ccil.cowan.tagsoup.Element) -> c
    int getEntity() -> a
    java.lang.String makeName(char[],int,int) -> r
    void comment(char[],int,int) -> comment
    void endCDATA() -> endCDATA
    void endDTD() -> endDTD
    void endEntity(java.lang.String) -> endEntity
    void startCDATA() -> startCDATA
    void startDTD(java.lang.String,java.lang.String,java.lang.String) -> startDTD
    void startEntity(java.lang.String) -> startEntity
org.ccil.cowan.tagsoup.Parser$1 -> org.b.a.a.h:
    org.ccil.cowan.tagsoup.Parser this$0 -> a
    java.io.Reader autoDetectingReader(java.io.InputStream) -> a
org.ccil.cowan.tagsoup.ScanHandler -> org.b.a.a.i:
    void adup(char[],int,int) -> a
    void aname(char[],int,int) -> b
    void aval(char[],int,int) -> c
    void decl(char[],int,int) -> i
    void entity(char[],int,int) -> d
    void eof(char[],int,int) -> e
    void etag(char[],int,int) -> f
    void gi(char[],int,int) -> j
    void pcdata(char[],int,int) -> k
    void pi(char[],int,int) -> m
    void pitarget(char[],int,int) -> l
    void stagc(char[],int,int) -> n
    void stage(char[],int,int) -> o
    void cmnt(char[],int,int) -> p
    int getEntity() -> a
org.ccil.cowan.tagsoup.Scanner -> org.b.a.a.j:
    void scan(java.io.Reader,org.ccil.cowan.tagsoup.ScanHandler) -> a
    void resetDocumentLocator(java.lang.String,java.lang.String) -> a
    void startCDATA() -> a
org.ccil.cowan.tagsoup.Schema -> org.b.a.a.k:
    java.util.HashMap theEntities -> a
    java.util.HashMap theElementTypes -> b
    java.lang.String theURI -> c
    java.lang.String thePrefix -> d
    org.ccil.cowan.tagsoup.ElementType theRoot -> e
    void elementType(java.lang.String,int,int,int) -> a
    org.ccil.cowan.tagsoup.ElementType rootElementType() -> a
    void attribute(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    void parent(java.lang.String,java.lang.String) -> a
    void entity(java.lang.String,int) -> a
    org.ccil.cowan.tagsoup.ElementType getElementType(java.lang.String) -> a
    int getEntity(java.lang.String) -> b
    java.lang.String getURI() -> b
    java.lang.String getPrefix() -> c
    void setURI(java.lang.String) -> c
    void setPrefix(java.lang.String) -> d
org.mariotaku.actionbarcompat.ActionBar -> org.mariotaku.a.a:
    android.view.View getCustomView() -> a
    void setCustomView(int) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowCustomEnabled(boolean) -> b
    void setDisplayShowHomeEnabled(boolean) -> c
    void setDisplayShowTitleEnabled(boolean) -> d
    void setTitle(java.lang.CharSequence) -> a
org.mariotaku.actionbarcompat.ActionBarCompat -> org.mariotaku.a.b:
    org.mariotaku.actionbarcompat.ActionBar getActionBar() -> b
    android.view.MenuInflater getMenuInflater(android.view.MenuInflater) -> a
    org.mariotaku.actionbarcompat.ActionBarCompat getInstance(android.app.Activity) -> a
org.mariotaku.actionbarcompat.ActionBarCompatBase -> org.mariotaku.a.c:
    android.app.Activity mActivity -> a
    android.view.View mActionBarView -> b
    android.view.View mCustomView -> c
    android.view.View mHomeAsUpIndicator -> d
    android.widget.ImageView mIconView -> e
    android.widget.TextView mTitleView -> f
    android.widget.TextView mSubtitleView -> g
    android.view.ViewGroup mHomeView -> h
    android.view.ViewGroup mTitleContainer -> i
    android.view.ViewGroup mCustomViewContainer -> j
    android.view.ViewGroup mActionMenuView -> k
    android.view.ViewGroup mActionModeContainer -> l
    android.view.Menu mRealMenu -> m
    android.view.Menu mActionBarMenu -> n
    boolean mProgressBarIndeterminateEnabled -> o
    boolean mActionModeShowing -> p
    void createActionBarMenu() -> c
    android.view.View getCustomView() -> a
    android.view.MenuInflater getMenuInflater(android.view.MenuInflater) -> a
    void setCustomView(int) -> a
    void setCustomView(android.view.View) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowCustomEnabled(boolean) -> b
    void setDisplayShowHomeEnabled(boolean) -> c
    void setDisplayShowTitleEnabled(boolean) -> d
    void setTitle(java.lang.CharSequence) -> a
    android.view.View addActionItemCompatFromMenuItem(android.view.MenuItem) -> a
    void clearMenuItems() -> j
    void setHomeButton() -> k
    void hideInRealMenu(android.view.Menu) -> a
    void invalidateOptionsMenu() -> d
    boolean isActionModeShowing() -> e
    boolean requestCustomTitleView() -> f
    boolean setCustomTitleView() -> g
    void setProgressBarIndeterminateEnabled(boolean) -> e
    void setProgressBarIndeterminateVisibility(boolean) -> f
    android.view.View startActionMode() -> h
    void stopActionMode() -> i
    android.view.Menu access$0(org.mariotaku.actionbarcompat.ActionBarCompatBase) -> a
    android.view.Menu access$1(org.mariotaku.actionbarcompat.ActionBarCompatBase) -> b
    android.app.Activity access$2(org.mariotaku.actionbarcompat.ActionBarCompatBase) -> c
    android.view.ViewGroup access$3(org.mariotaku.actionbarcompat.ActionBarCompatBase) -> d
org.mariotaku.actionbarcompat.ActionBarCompatBase$1 -> org.mariotaku.a.d:
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem val$item -> b
    void onClick(android.view.View) -> onClick
    org.mariotaku.actionbarcompat.ActionBarCompatBase access$0(org.mariotaku.actionbarcompat.ActionBarCompatBase$1) -> a
org.mariotaku.actionbarcompat.ActionBarCompatBase$1$1 -> org.mariotaku.a.e:
    org.mariotaku.actionbarcompat.ActionBarCompatBase$1 this$1 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
org.mariotaku.actionbarcompat.ActionBarCompatBase$2 -> org.mariotaku.a.f:
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem val$item -> b
    boolean onLongClick(android.view.View) -> onLongClick
org.mariotaku.actionbarcompat.ActionBarCompatBase$3 -> org.mariotaku.a.g:
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem val$homeItem -> b
    void onClick(android.view.View) -> onClick
org.mariotaku.actionbarcompat.ActionBarCompatBase$SupportMenu -> org.mariotaku.a.h:
    android.content.Context context -> b
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem findItem(int) -> findItem
org.mariotaku.actionbarcompat.ActionBarCompatBase$SupportMenuInflater -> org.mariotaku.a.i:
    android.view.MenuInflater mInflater -> a
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> b
    void inflate(int,android.view.Menu) -> inflate
    void removeDuplicateMenuInActionBar(android.view.Menu,int) -> a
org.mariotaku.actionbarcompat.ActionBarCompatBase$SupportMenuItem -> org.mariotaku.a.j:
    int itemId -> b
    org.mariotaku.actionbarcompat.ActionBarCompatBase this$0 -> a
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    android.view.MenuItem setIcon(int) -> setIcon
    android.view.MenuItem setTitle(int) -> setTitle
    android.view.MenuItem setVisible(boolean) -> setVisible
org.mariotaku.actionbarcompat.ActionBarCompatNative -> org.mariotaku.a.k:
    android.app.Activity mActivity -> a
    android.view.View getCustomView() -> a
    void setCustomView(int) -> a
    void setDisplayHomeAsUpEnabled(boolean) -> a
    void setDisplayShowCustomEnabled(boolean) -> b
    void setDisplayShowHomeEnabled(boolean) -> c
    void setDisplayShowTitleEnabled(boolean) -> d
    void setTitle(java.lang.CharSequence) -> a
org.mariotaku.actionbarcompat.ActionBarFragmentActivity -> org.mariotaku.a.l:
    org.mariotaku.actionbarcompat.ActionBarCompat mActionBarCompat -> m
    boolean mActionBarInitialized -> n
    android.support.v4.app.Fragment mAttachedFragment -> o
    org.mariotaku.actionbarcompat.ActionModeCompat mActionModeCompat -> p
    android.view.MenuInflater getMenuInflater() -> getMenuInflater
    org.mariotaku.actionbarcompat.ActionBar getSupportActionBar() -> v
    void invalidateSupportOptionsMenu() -> w
    void onAttachFragment(android.support.v4.app.Fragment) -> a
    void onBackPressed() -> onBackPressed
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onPostCreate(android.os.Bundle) -> onPostCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    void requestSupportWindowFeature(int) -> c
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
    void setSupportProgressBarIndeterminateVisibility(boolean) -> b
    org.mariotaku.actionbarcompat.ActionMode startActionMode(org.mariotaku.actionbarcompat.ActionMode$Callback) -> a
org.mariotaku.actionbarcompat.ActionBarPreferenceActivity -> org.mariotaku.a.m:
    org.mariotaku.actionbarcompat.ActionBarCompat mActionBarCompat -> a
    boolean mActionBarInitialized -> b
    android.view.MenuInflater getMenuInflater() -> getMenuInflater
    org.mariotaku.actionbarcompat.ActionBar getSupportActionBar() -> f
    void onCreate(android.os.Bundle) -> onCreate
    boolean onCreateOptionsMenu(android.view.Menu) -> onCreateOptionsMenu
    void onPostCreate(android.os.Bundle) -> onPostCreate
    boolean onPrepareOptionsMenu(android.view.Menu) -> onPrepareOptionsMenu
    void onTitleChanged(java.lang.CharSequence,int) -> onTitleChanged
    void setContentView(int) -> setContentView
    void setContentView(android.view.View) -> setContentView
    void setContentView(android.view.View,android.view.ViewGroup$LayoutParams) -> setContentView
org.mariotaku.actionbarcompat.ActionMode -> org.mariotaku.a.n:
    void finish() -> a
    void setTitle(java.lang.CharSequence) -> a
org.mariotaku.actionbarcompat.ActionMode$Callback -> org.mariotaku.a.o:
    boolean onActionItemClicked(org.mariotaku.actionbarcompat.ActionMode,android.view.MenuItem) -> a
    boolean onCreateActionMode(org.mariotaku.actionbarcompat.ActionMode,android.view.Menu) -> a
    void onDestroyActionMode(org.mariotaku.actionbarcompat.ActionMode) -> a
    boolean onPrepareActionMode(org.mariotaku.actionbarcompat.ActionMode,android.view.Menu) -> b
org.mariotaku.actionbarcompat.ActionModeCompat -> org.mariotaku.a.p:
    org.mariotaku.actionbarcompat.ActionMode$Callback mCallbackProxy -> a
    android.view.View mActionModeContainer -> b
    android.widget.TextView mTitleView -> c
    android.widget.TextView mSubtitleView -> d
    org.mariotaku.menubar.MenuBar mMenuBar -> e
    org.mariotaku.actionbarcompat.ActionBarCompatBase mActionBar -> f
    org.mariotaku.menubar.MenuBar$OnMenuItemClickListener mListener -> g
    void finish() -> a
    void setTitle(java.lang.CharSequence) -> a
    org.mariotaku.actionbarcompat.ActionMode$Callback access$0(org.mariotaku.actionbarcompat.ActionModeCompat) -> a
org.mariotaku.actionbarcompat.ActionModeCompat$1 -> org.mariotaku.a.q:
    org.mariotaku.actionbarcompat.ActionModeCompat this$0 -> a
    boolean onMenuItemClick(android.view.MenuItem) -> a
org.mariotaku.actionbarcompat.ActionModeCompat$2 -> org.mariotaku.a.r:
    org.mariotaku.actionbarcompat.ActionModeCompat this$0 -> a
    void onClick(android.view.View) -> onClick
org.mariotaku.actionbarcompat.ActionModeNative -> org.mariotaku.a.s:
    org.mariotaku.actionbarcompat.ActionMode$Callback mCallbackProxy -> a
    android.view.ActionMode mActionMode -> b
    android.view.ActionMode$Callback mCallback -> c
    void finish() -> a
    void setTitle(java.lang.CharSequence) -> a
    org.mariotaku.actionbarcompat.ActionMode$Callback access$0(org.mariotaku.actionbarcompat.ActionModeNative) -> a
org.mariotaku.actionbarcompat.ActionModeNative$1 -> org.mariotaku.a.t:
    org.mariotaku.actionbarcompat.ActionModeNative this$0 -> a
    boolean onActionItemClicked(android.view.ActionMode,android.view.MenuItem) -> onActionItemClicked
    boolean onCreateActionMode(android.view.ActionMode,android.view.Menu) -> onCreateActionMode
    void onDestroyActionMode(android.view.ActionMode) -> onDestroyActionMode
    boolean onPrepareActionMode(android.view.ActionMode,android.view.Menu) -> onPrepareActionMode
org.mariotaku.actionbarcompat.MethodsCompat -> org.mariotaku.a.u:
    void invalidateOptionsMenu(android.app.Activity) -> a
org.mariotaku.internal.menu.MenuAdapter -> org.mariotaku.b.a.a:
    android.view.Menu mMenu -> a
    long getItemId(int) -> getItemId
    android.view.View getView(int,android.view.View,android.view.ViewGroup) -> getView
    void setMenu(android.view.Menu) -> a
    void setMenuItems() -> a
org.mariotaku.internal.menu.MenuImpl -> org.mariotaku.b.a.b:
    java.util.List mMenuItems -> a
    android.content.Context mContext -> b
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    void clear() -> clear
    void close() -> close
    android.view.MenuItem findItem(int) -> findItem
    android.view.MenuItem getItem(int) -> getItem
    java.util.List getMenuItems() -> a
    boolean hasVisibleItems() -> hasVisibleItems
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    void removeGroup(int) -> removeGroup
    void removeItem(int) -> removeItem
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    void setGroupVisible(int,boolean) -> setGroupVisible
    void setQwertyMode(boolean) -> setQwertyMode
    int size() -> size
org.mariotaku.internal.menu.MenuItemImpl -> org.mariotaku.b.a.c:
    java.lang.CharSequence title -> a
    int groupId -> b
    int itemId -> c
    int order -> d
    android.graphics.drawable.Drawable icon -> e
    android.view.SubMenu subMenu -> f
    android.content.Context context -> g
    boolean visible -> h
    boolean enabled -> i
    boolean checkable -> j
    boolean checked -> k
    boolean collapseActionView() -> collapseActionView
    boolean expandActionView() -> expandActionView
    android.view.ActionProvider getActionProvider() -> getActionProvider
    android.view.View getActionView() -> getActionView
    char getAlphabeticShortcut() -> getAlphabeticShortcut
    int getGroupId() -> getGroupId
    android.graphics.drawable.Drawable getIcon() -> getIcon
    android.content.Intent getIntent() -> getIntent
    int getItemId() -> getItemId
    android.view.ContextMenu$ContextMenuInfo getMenuInfo() -> getMenuInfo
    char getNumericShortcut() -> getNumericShortcut
    int getOrder() -> getOrder
    android.view.SubMenu getSubMenu() -> getSubMenu
    java.lang.CharSequence getTitle() -> getTitle
    java.lang.CharSequence getTitleCondensed() -> getTitleCondensed
    boolean hasSubMenu() -> hasSubMenu
    boolean isActionViewExpanded() -> isActionViewExpanded
    boolean isCheckable() -> isCheckable
    boolean isChecked() -> isChecked
    boolean isEnabled() -> isEnabled
    boolean isVisible() -> isVisible
    android.view.MenuItem setActionProvider(android.view.ActionProvider) -> setActionProvider
    android.view.MenuItem setActionView(int) -> setActionView
    android.view.MenuItem setActionView(android.view.View) -> setActionView
    android.view.MenuItem setAlphabeticShortcut(char) -> setAlphabeticShortcut
    android.view.MenuItem setCheckable(boolean) -> setCheckable
    android.view.MenuItem setChecked(boolean) -> setChecked
    android.view.MenuItem setEnabled(boolean) -> setEnabled
    android.view.MenuItem setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.MenuItem setIcon(int) -> setIcon
    android.view.MenuItem setIntent(android.content.Intent) -> setIntent
    android.view.MenuItem setNumericShortcut(char) -> setNumericShortcut
    android.view.MenuItem setOnActionExpandListener(android.view.MenuItem$OnActionExpandListener) -> setOnActionExpandListener
    android.view.MenuItem setOnMenuItemClickListener(android.view.MenuItem$OnMenuItemClickListener) -> setOnMenuItemClickListener
    android.view.MenuItem setShortcut(char,char) -> setShortcut
    void setShowAsAction(int) -> setShowAsAction
    android.view.MenuItem setShowAsActionFlags(int) -> setShowAsActionFlags
    android.view.MenuItem setTitle(java.lang.CharSequence) -> setTitle
    android.view.MenuItem setTitle(int) -> setTitle
    android.view.MenuItem setTitleCondensed(java.lang.CharSequence) -> setTitleCondensed
    android.view.MenuItem setVisible(boolean) -> setVisible
    java.lang.String toString() -> toString
    org.mariotaku.internal.menu.MenuItemImpl setGroupId(int) -> a
    org.mariotaku.internal.menu.MenuItemImpl setItemId(int) -> b
    org.mariotaku.internal.menu.MenuItemImpl setOrder(int) -> c
    org.mariotaku.internal.menu.MenuItemImpl setSubMenu(android.view.SubMenu) -> a
    android.view.MenuItem createItem(android.content.Context,int) -> a
org.mariotaku.internal.menu.Menus -> org.mariotaku.b.a.d:
    org.mariotaku.internal.menu.MenuAdapter mAdapter -> a
    void add(int,android.view.MenuItem) -> a
    boolean add(android.view.MenuItem) -> a
    boolean addAll(java.util.Collection) -> addAll
    boolean addAll(int,java.util.Collection) -> addAll
    void clear() -> clear
    android.view.MenuItem remove(int) -> a
    boolean remove(java.lang.Object) -> remove
    android.view.MenuItem set(int,android.view.MenuItem) -> b
    int findInsertIndex(int) -> b
    boolean add(java.lang.Object) -> add
    void add(int,java.lang.Object) -> add
    java.lang.Object set(int,java.lang.Object) -> set
    java.lang.Object remove(int) -> remove
org.mariotaku.internal.menu.SubMenuImpl -> org.mariotaku.b.a.e:
    java.util.List mMenuItems -> a
    org.mariotaku.internal.menu.MenuAdapter mAdapter -> b
    android.view.MenuItem menuItem -> c
    android.content.Context mContext -> d
    android.view.MenuItem add(java.lang.CharSequence) -> add
    android.view.MenuItem add(int) -> add
    android.view.MenuItem add(int,int,int,java.lang.CharSequence) -> add
    android.view.MenuItem add(int,int,int,int) -> add
    int addIntentOptions(int,int,int,android.content.ComponentName,android.content.Intent[],android.content.Intent,int,android.view.MenuItem[]) -> addIntentOptions
    android.view.SubMenu addSubMenu(java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,java.lang.CharSequence) -> addSubMenu
    android.view.SubMenu addSubMenu(int,int,int,int) -> addSubMenu
    void clear() -> clear
    void clearHeader() -> clearHeader
    void close() -> close
    android.view.MenuItem findItem(int) -> findItem
    android.view.MenuItem getItem() -> getItem
    android.view.MenuItem getItem(int) -> getItem
    java.util.List getMenuItems() -> a
    boolean hasVisibleItems() -> hasVisibleItems
    boolean isShortcutKey(int,android.view.KeyEvent) -> isShortcutKey
    boolean performIdentifierAction(int,int) -> performIdentifierAction
    boolean performShortcut(int,android.view.KeyEvent,int) -> performShortcut
    void removeGroup(int) -> removeGroup
    void removeItem(int) -> removeItem
    void setGroupCheckable(int,boolean,boolean) -> setGroupCheckable
    void setGroupEnabled(int,boolean) -> setGroupEnabled
    void setGroupVisible(int,boolean) -> setGroupVisible
    android.view.SubMenu setHeaderIcon(android.graphics.drawable.Drawable) -> setHeaderIcon
    android.view.SubMenu setHeaderIcon(int) -> setHeaderIcon
    android.view.SubMenu setHeaderTitle(java.lang.CharSequence) -> setHeaderTitle
    android.view.SubMenu setHeaderTitle(int) -> setHeaderTitle
    android.view.SubMenu setHeaderView(android.view.View) -> setHeaderView
    android.view.SubMenu setIcon(android.graphics.drawable.Drawable) -> setIcon
    android.view.SubMenu setIcon(int) -> setIcon
    void setQwertyMode(boolean) -> setQwertyMode
    int size() -> size
org.mariotaku.menubar.MenuBar -> org.mariotaku.menubar.MenuBar:
    android.view.Menu mMenu -> a
    android.content.Context mContext -> b
    org.mariotaku.menubar.MenuBar$OnMenuItemClickListener mItemClickListener -> c
    org.mariotaku.popupmenu.PopupMenu mPopupMenu -> d
    android.view.Menu getMenu() -> getMenu
    android.view.MenuInflater getMenuInflater() -> getMenuInflater
    void inflate(int) -> a
    void invalidate() -> invalidate
    boolean onMenuItemClick(android.view.MenuItem) -> a
    void setOnMenuItemClickListener(org.mariotaku.menubar.MenuBar$OnMenuItemClickListener) -> setOnMenuItemClickListener
    void show() -> a
    void onDetachedFromWindow() -> onDetachedFromWindow
    android.view.View addMenuButton(android.view.MenuItem) -> b
    android.content.Context access$0(org.mariotaku.menubar.MenuBar) -> a
    void access$1(org.mariotaku.menubar.MenuBar,org.mariotaku.popupmenu.PopupMenu) -> a
    org.mariotaku.popupmenu.PopupMenu access$2(org.mariotaku.menubar.MenuBar) -> b
    org.mariotaku.menubar.MenuBar$OnMenuItemClickListener access$3(org.mariotaku.menubar.MenuBar) -> c
org.mariotaku.menubar.MenuBar$1 -> org.mariotaku.menubar.a:
    org.mariotaku.menubar.MenuBar this$0 -> a
    android.view.MenuItem val$item -> b
    void onClick(android.view.View) -> onClick
org.mariotaku.menubar.MenuBar$2 -> org.mariotaku.menubar.b:
    org.mariotaku.menubar.MenuBar this$0 -> a
    android.view.MenuItem val$item -> b
    boolean onLongClick(android.view.View) -> onLongClick
org.mariotaku.menubar.MenuBar$OnMenuItemClickListener -> org.mariotaku.menubar.c:
    boolean onMenuItemClick(android.view.MenuItem) -> a
org.mariotaku.popupmenu.ListPopupWindow -> org.mariotaku.c.a:
    void dismiss() -> dismiss
    boolean isShowing() -> isShowing
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setAnchorView(android.view.View) -> setAnchorView
    void setInputMethodMode(int) -> setInputMethodMode
    void setModal(boolean) -> setModal
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> setOnItemClickListener
    void setPromptPosition(int) -> setPromptPosition
    void setSoftInputMode(int) -> setSoftInputMode
    void setWidth(int) -> setWidth
    void show() -> show
org.mariotaku.popupmenu.ListPopupWindow$InstanceHelper -> org.mariotaku.c.b:
    org.mariotaku.popupmenu.ListPopupWindow getInstance(android.content.Context) -> a
org.mariotaku.popupmenu.ListPopupWindowCompat -> org.mariotaku.c.c:
    android.content.Context mContext -> b
    android.widget.PopupWindow mPopup -> c
    android.widget.ListAdapter mAdapter -> d
    org.mariotaku.popupmenu.ListPopupWindowCompat$DropDownListView mDropDownList -> e
    int mDropDownHeight -> f
    int mDropDownWidth -> g
    int mDropDownHorizontalOffset -> h
    int mDropDownVerticalOffset -> i
    boolean mDropDownVerticalOffsetSet -> j
    boolean mDropDownAlwaysVisible -> k
    boolean mForceIgnoreOutsideTouch -> l
    int mListItemExpandMaximum -> a
    android.view.View mPromptView -> m
    int mPromptPosition -> n
    android.database.DataSetObserver mObserver -> o
    android.view.View mDropDownAnchorView -> p
    android.graphics.drawable.Drawable mDropDownListHighlight -> q
    android.widget.AdapterView$OnItemClickListener mItemClickListener -> r
    android.widget.AdapterView$OnItemSelectedListener mItemSelectedListener -> s
    org.mariotaku.popupmenu.ListPopupWindowCompat$ResizePopupRunnable mResizePopupRunnable -> t
    org.mariotaku.popupmenu.ListPopupWindowCompat$PopupTouchInterceptor mTouchInterceptor -> u
    org.mariotaku.popupmenu.ListPopupWindowCompat$ListSelectorHider mHideSelector -> v
    java.lang.Runnable mShowDropDownRunnable -> w
    android.os.Handler mHandler -> x
    android.graphics.Rect mTempRect -> y
    boolean mModal -> z
    void clearListSelection() -> a
    void dismiss() -> dismiss
    android.view.View getAnchorView() -> b
    boolean isInputMethodNotNeeded() -> c
    boolean isShowing() -> isShowing
    void setAdapter(android.widget.ListAdapter) -> setAdapter
    void setAnchorView(android.view.View) -> setAnchorView
    void setInputMethodMode(int) -> setInputMethodMode
    void setModal(boolean) -> setModal
    void setOnItemClickListener(android.widget.AdapterView$OnItemClickListener) -> setOnItemClickListener
    void setPromptPosition(int) -> setPromptPosition
    void setSoftInputMode(int) -> setSoftInputMode
    void setWidth(int) -> setWidth
    void show() -> show
    int buildDropDown() -> d
    void measureScrapChild(android.view.View,int,int,android.graphics.Rect) -> a
    void removePromptView() -> e
    int measureHeightOfChildren(int,int,int,int,int) -> a
    android.widget.PopupWindow access$0(org.mariotaku.popupmenu.ListPopupWindowCompat) -> a
    android.os.Handler access$1(org.mariotaku.popupmenu.ListPopupWindowCompat) -> b
    org.mariotaku.popupmenu.ListPopupWindowCompat$ResizePopupRunnable access$2(org.mariotaku.popupmenu.ListPopupWindowCompat) -> c
    org.mariotaku.popupmenu.ListPopupWindowCompat$DropDownListView access$3(org.mariotaku.popupmenu.ListPopupWindowCompat) -> d
org.mariotaku.popupmenu.ListPopupWindowCompat$1 -> org.mariotaku.c.d:
    org.mariotaku.popupmenu.ListPopupWindowCompat this$0 -> a
    void run() -> run
org.mariotaku.popupmenu.ListPopupWindowCompat$2 -> org.mariotaku.c.e:
    org.mariotaku.popupmenu.ListPopupWindowCompat this$0 -> a
    void onItemSelected(android.widget.AdapterView,android.view.View,int,long) -> onItemSelected
    void onNothingSelected(android.widget.AdapterView) -> onNothingSelected
org.mariotaku.popupmenu.ListPopupWindowCompat$DropDownListView -> org.mariotaku.c.f:
    boolean mListSelectionHidden -> a
    boolean mHijackFocus -> b
    boolean hasFocus() -> hasFocus
    boolean hasWindowFocus() -> hasWindowFocus
    boolean isFocused() -> isFocused
    boolean isInTouchMode() -> isInTouchMode
    void access$0(org.mariotaku.popupmenu.ListPopupWindowCompat$DropDownListView,boolean) -> a
org.mariotaku.popupmenu.ListPopupWindowCompat$ListSelectorHider -> org.mariotaku.c.g:
    org.mariotaku.popupmenu.ListPopupWindowCompat this$0 -> a
    void run() -> run
org.mariotaku.popupmenu.ListPopupWindowCompat$PopupDataSetObserver -> org.mariotaku.c.h:
    org.mariotaku.popupmenu.ListPopupWindowCompat this$0 -> a
    void onChanged() -> onChanged
    void onInvalidated() -> onInvalidated
org.mariotaku.popupmenu.ListPopupWindowCompat$PopupTouchInterceptor -> org.mariotaku.c.i:
    org.mariotaku.popupmenu.ListPopupWindowCompat this$0 -> a
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
org.mariotaku.popupmenu.ListPopupWindowCompat$ResizePopupRunnable -> org.mariotaku.c.j:
    org.mariotaku.popupmenu.ListPopupWindowCompat this$0 -> a
    void run() -> run
org.mariotaku.popupmenu.ListPopupWindowNative -> org.mariotaku.c.k:
org.mariotaku.popupmenu.PopupMenu -> org.mariotaku.c.l:
    org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener mItemClickListener -> a
    org.mariotaku.popupmenu.PopupMenu$OnDismissListener mDismissListener -> b
    android.view.Menu mMenu -> c
    android.content.Context mContext -> d
    android.view.View mView -> e
    org.mariotaku.popupmenu.ListPopupWindow mWindow -> f
    boolean mDidAction -> g
    org.mariotaku.internal.menu.MenuAdapter mAdapter -> h
    void dismiss() -> a
    android.view.Menu getMenu() -> b
    void inflate(int) -> a
    void onDismiss() -> onDismiss
    void onItemClick(android.widget.AdapterView,android.view.View,int,long) -> onItemClick
    boolean onTouch(android.view.View,android.view.MotionEvent) -> onTouch
    void setMenu(android.view.Menu) -> a
    void setOnMenuItemClickListener(org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener) -> a
    void show() -> c
    boolean isPopupWindowShowing() -> d
    void showMenu(android.view.Menu) -> b
    org.mariotaku.popupmenu.PopupMenu getInstance(android.content.Context,android.view.View) -> a
org.mariotaku.popupmenu.PopupMenu$OnDismissListener -> org.mariotaku.c.m:
    void onDismiss(org.mariotaku.popupmenu.PopupMenu) -> a
org.mariotaku.popupmenu.PopupMenu$OnMenuItemClickListener -> org.mariotaku.c.n:
    boolean onMenuItemClick(android.view.MenuItem) -> a
org.xbill.DNS.AAAARecord -> org.c.a.a:
    java.net.InetAddress address -> f
    java.net.InetAddress getAddress() -> a
    java.lang.String toString() -> toString
    void rrToWire(org.xbill.DNS.utils.DataByteOutputStream,org.xbill.DNS.Compression) -> a
org.xbill.DNS.ARecord -> org.c.a.b:
    java.net.InetAddress address -> f
    java.net.InetAddress getAddress() -> a
    java.lang.String toString() -> toString
    void rrToWire(org.xbill.DNS.utils.DataByteOutputStream,org.xbill.DNS.Compression) -> a
org.xbill.DNS.Compression -> org.c.a.c:
    java.util.Hashtable h -> a
    void add(int,org.xbill.DNS.Name) -> a
    org.xbill.DNS.Name get(int) -> a
    int get(org.xbill.DNS.Name) -> a
org.xbill.DNS.DClass -> org.c.a.d:
    org.xbill.DNS.utils.StringValueTable classes -> a
    java.lang.String string(int) -> a
org.xbill.DNS.EDNS -> org.c.a.e:
    org.xbill.DNS.OPTRecord newOPT(int) -> a
org.xbill.DNS.FindServer -> org.c.a.f:
    java.lang.String[] server -> a
    org.xbill.DNS.Name[] search -> b
    boolean probed -> c
    java.lang.String server() -> a
    java.lang.String[] servers() -> b
    void findProperty() -> c
    void findUnix() -> d
    void probe() -> e
org.xbill.DNS.Flags -> org.c.a.g:
    org.xbill.DNS.utils.StringValueTable flags -> a
    java.lang.String string(int) -> a
org.xbill.DNS.Header -> org.c.a.h:
    int id -> a
    boolean[] flags -> b
    byte rcode -> c
    byte opcode -> d
    short[] counts -> e
    java.lang.Object clone() -> clone
    short getCount(int) -> a
    boolean getFlag(int) -> b
    int getID() -> a
    byte getOpcode() -> b
    byte getRcode() -> c
    java.lang.String printFlags() -> d
    void setFlag(int) -> c
    void setOpcode(byte) -> a
    java.lang.String toString() -> toString
    byte[] toWire() -> e
    void readFlags(org.xbill.DNS.utils.DataByteInputStream) -> a
    void writeFlags(org.xbill.DNS.utils.DataByteOutputStream) -> b
    void decCount(int) -> d
    void incCount(int) -> e
    void toWire(org.xbill.DNS.utils.DataByteOutputStream) -> a
    short randomID() -> f
org.xbill.DNS.Message -> org.c.a.i:
    org.xbill.DNS.Header header -> a
    java.util.Vector[] sections -> b
    int size -> c
    void addRecord(org.xbill.DNS.Record,int) -> a
    java.lang.Object clone() -> clone
    org.xbill.DNS.Header getHeader() -> a
    java.util.Enumeration getSection(int) -> a
    org.xbill.DNS.Record[] getSectionArray(int) -> b
    org.xbill.DNS.TSIGRecord getTSIG() -> b
    int numBytes() -> c
    java.lang.String sectionToString(int) -> c
    java.lang.String toString() -> toString
    byte[] toWire() -> d
    void toWire(org.xbill.DNS.utils.DataByteOutputStream) -> a
    org.xbill.DNS.Message newQuery(org.xbill.DNS.Record) -> a
org.xbill.DNS.Name -> org.c.a.j:
    java.lang.String[] name -> b
    byte labels -> c
    boolean qualified -> d
    org.xbill.DNS.Name root -> a
    void append(org.xbill.DNS.Name) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void toWire(org.xbill.DNS.utils.DataByteOutputStream,org.xbill.DNS.Compression) -> a
    void toWireCanonical(org.xbill.DNS.utils.DataByteOutputStream) -> a
org.xbill.DNS.OPTRecord -> org.c.a.k:
    java.util.Hashtable options -> f
    java.lang.String toString() -> toString
    void rrToWire(org.xbill.DNS.utils.DataByteOutputStream,org.xbill.DNS.Compression) -> a
org.xbill.DNS.Opcode -> org.c.a.l:
    org.xbill.DNS.utils.StringValueTable opcodes -> a
    java.lang.String string(int) -> a
org.xbill.DNS.Rcode -> org.c.a.m:
    org.xbill.DNS.utils.StringValueTable rcodes -> a
    java.lang.String string(int) -> a
org.xbill.DNS.Record -> org.c.a.n:
    org.xbill.DNS.Name name -> a
    short type -> b
    short dclass -> c
    int ttl -> d
    int wireLength -> e
    boolean equals(java.lang.Object) -> equals
    org.xbill.DNS.Name getName() -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    byte[] toWire(int) -> a
    void rrToWire(org.xbill.DNS.utils.DataByteOutputStream,org.xbill.DNS.Compression) -> a
    java.lang.StringBuffer toStringNoData() -> c
    void toWire(org.xbill.DNS.utils.DataByteOutputStream,int,org.xbill.DNS.Compression) -> a
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,short,short) -> a
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,short,short,int,int,byte[]) -> a
    org.xbill.DNS.Record newRecord(org.xbill.DNS.Name,short,short,int,int,org.xbill.DNS.utils.DataByteInputStream,org.xbill.DNS.Compression) -> a
    java.lang.Class toClass(short) -> a
    org.xbill.DNS.Record fromWire(org.xbill.DNS.utils.DataByteInputStream,int,org.xbill.DNS.Compression) -> a
org.xbill.DNS.Resolver -> org.c.a.o:
    org.xbill.DNS.Message send(org.xbill.DNS.Message) -> a
    void setTCP(boolean) -> a
org.xbill.DNS.Section -> org.c.a.p:
    org.xbill.DNS.utils.StringValueTable sections -> a
    org.xbill.DNS.utils.StringValueTable longSections -> b
    org.xbill.DNS.utils.StringValueTable updSections -> c
    java.lang.String longString(int) -> a
    java.lang.String string(int) -> b
    java.lang.String updString(int) -> c
org.xbill.DNS.SimpleResolver -> org.c.a.q:
    java.net.InetAddress addr -> a
    int port -> b
    boolean useTCP -> c
    boolean ignoreTruncation -> d
    int EDNSlevel -> e
    org.xbill.DNS.TSIG tsig -> f
    int timeoutValue -> g
    java.lang.String defaultResolver -> h
    org.xbill.DNS.Message send(org.xbill.DNS.Message) -> a
    void setTCP(boolean) -> a
    org.xbill.DNS.Message sendTCP(org.xbill.DNS.Message,byte[]) -> a
org.xbill.DNS.TSIG -> org.c.a.r:
    org.xbill.DNS.Name name -> a
    byte[] key -> b
    org.xbill.DNS.utils.HMACSigner axfrSigner -> c
    void apply(org.xbill.DNS.Message,org.xbill.DNS.TSIGRecord) -> a
    boolean verify(org.xbill.DNS.Message,byte[],org.xbill.DNS.TSIGRecord) -> a
org.xbill.DNS.TSIGRecord -> org.c.a.s:
    org.xbill.DNS.Name alg -> f
    java.util.Date timeSigned -> g
    short fudge -> h
    byte[] signature -> i
    int originalID -> j
    short error -> k
    byte[] other -> l
    org.xbill.DNS.Name getAlg() -> a
    short getError() -> d
    short getFudge() -> e
    byte[] getOther() -> f
    byte[] getSignature() -> g
    java.util.Date getTimeSigned() -> h
    java.lang.String toString() -> toString
    void rrToWire(org.xbill.DNS.utils.DataByteOutputStream,org.xbill.DNS.Compression) -> a
org.xbill.DNS.Type -> org.c.a.t:
    org.xbill.DNS.utils.StringValueTable types -> a
    java.lang.String string(int) -> a
org.xbill.DNS.UNKRecord -> org.c.a.u:
    byte[] data -> f
    java.lang.String toString() -> toString
    void rrToWire(org.xbill.DNS.utils.DataByteOutputStream,org.xbill.DNS.Compression) -> a
org.xbill.DNS.WireParseException -> org.c.a.v:
org.xbill.DNS.utils.Base64 -> org.c.a.a.a:
    java.lang.String formatString(byte[],int,java.lang.String,boolean) -> a
    java.lang.String toString(byte[]) -> a
org.xbill.DNS.utils.DataByteInputStream -> org.c.a.a.b:
    int getPos() -> a
    int read(byte[]) -> read
    int readInt() -> b
    short readShort() -> c
    int readUnsignedByte() -> d
    int readUnsignedShort() -> e
org.xbill.DNS.utils.DataByteOutputStream -> org.c.a.a.c:
    int getPos() -> a
    void writeByte(int) -> a
    void writeInt(int) -> b
    void writeShort(int) -> c
    void writeShortAt(int,int) -> a
    void writeString(java.lang.String) -> a
org.xbill.DNS.utils.HMACSigner -> org.c.a.a.d:
    byte[] ipad -> a
    byte[] opad -> b
    java.io.ByteArrayOutputStream bytes -> c
    void addData(byte[]) -> a
    void addData(byte[],int,int) -> a
    byte[] sign() -> a
    boolean verify(byte[]) -> b
    boolean byteArrayCompare(byte[],byte[]) -> a
org.xbill.DNS.utils.MD5 -> org.c.a.a.e:
    byte[] compute(byte[]) -> a
    byte[] compute(byte[],int,int) -> a
    int[] decode(byte[],int,int) -> b
    void digest(byte[],int,int,int[]) -> a
    byte[] encode(int[]) -> a
    int F(int,int,int) -> a
    int FF(int,int,int,int,int,int,int) -> a
    int G(int,int,int) -> b
    int GG(int,int,int,int,int,int,int) -> b
    int H(int,int,int) -> c
    int HH(int,int,int,int,int,int,int) -> c
    int I(int,int,int) -> d
    int II(int,int,int,int,int,int,int) -> d
    byte[] pad(byte[],int,int) -> c
    int ROTATE_LEFT(int,int) -> a
org.xbill.DNS.utils.MyStringTokenizer -> org.c.a.a.f:
    char[] string -> a
    java.lang.String delim -> b
    boolean returnTokens -> c
    int current -> d
    java.lang.String putBack -> e
    boolean hasMoreDelimiters() -> a
    boolean hasMoreElements() -> hasMoreElements
    boolean hasMoreTokens() -> b
    java.lang.String nextElement() -> c
    java.lang.String nextToken() -> d
    boolean isDelim(int) -> a
    java.lang.Object nextElement() -> nextElement
org.xbill.DNS.utils.StringValueTable -> org.c.a.a.g:
    java.util.Hashtable s2v -> a
    java.util.Hashtable v2s -> b
    java.lang.String getString(int) -> a
    void put2(int,java.lang.String) -> a
twitter4j.Activity -> a.a:
    twitter4j.Activity$Action getAction() -> a
    java.util.Date getCreatedAt() -> b
    twitter4j.User[] getSources() -> c
    twitter4j.Status[] getTargetObjectStatuses() -> d
    twitter4j.Status[] getTargetStatuses() -> e
twitter4j.Activity$Action -> a.b:
    twitter4j.Activity$Action FAVORITE -> a
    twitter4j.Activity$Action FOLLOW -> b
    twitter4j.Activity$Action MENTION -> c
    twitter4j.Activity$Action REPLY -> d
    twitter4j.Activity$Action RETWEET -> e
    twitter4j.Activity$Action LIST_MEMBER_ADDED -> f
    int actionId -> g
    twitter4j.Activity$Action[] ENUM$VALUES -> h
    int getActionId() -> a
    twitter4j.Activity$Action fromString(java.lang.String) -> a
    twitter4j.Activity$Action[] values() -> values
    twitter4j.Activity$Action valueOf(java.lang.String) -> valueOf
twitter4j.Annotation -> a.c:
    java.lang.String type -> a
    java.util.Map attributes -> b
    int compareTo(twitter4j.Annotation) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Map getAttributes() -> a
    java.lang.String getType() -> b
    int hashCode() -> hashCode
    void setAttributes(java.util.Map) -> a
    void setType(java.lang.String) -> a
    java.lang.Integer size() -> c
    java.lang.String toString() -> toString
    java.util.SortedSet sortedNames() -> e
    org.json.JSONObject asJSONObject() -> d
    int compareTo(java.lang.Object) -> compareTo
twitter4j.Annotations -> a.d:
    java.util.List annotations -> a
    void addAnnotation(twitter4j.Annotation) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    boolean isEmpty() -> a
    void setAnnotations(java.util.List) -> a
    java.lang.Integer size() -> b
    java.lang.String toString() -> toString
    java.util.List getSortedAnnotations() -> d
    java.lang.String asParameterValue() -> c
twitter4j.CursorSupport -> a.e:
    long getNextCursor() -> a
    long getPreviousCursor() -> b
twitter4j.DirectMessage -> a.f:
    java.util.Date getCreatedAt() -> a
    long getId() -> b
    java.lang.String getRawText() -> c
    twitter4j.User getRecipient() -> d
    twitter4j.User getSender() -> e
    java.lang.String getText() -> f
twitter4j.EntitySupport -> a.g:
    twitter4j.MediaEntity[] getMediaEntities() -> g
    twitter4j.URLEntity[] getURLEntities() -> h
twitter4j.ExceptionDiagnosis -> a.h:
    int stackLineHash -> a
    int lineNumberHash -> b
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.GeoLocation -> a.i:
    double latitude -> a
    double longitude -> b
    boolean equals(java.lang.Object) -> equals
    double getLatitude() -> a
    double getLongitude() -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.HashtagEntity -> a.j:
twitter4j.IDs -> a.k:
    long[] getIDs() -> c
twitter4j.Location -> a.l:
    java.lang.String getName() -> a
    int getWoeid() -> b
twitter4j.MediaEntity -> a.m:
    java.net.URL getMediaURL() -> a
twitter4j.MediaEntity$Size -> a.n:
    java.lang.Integer THUMB -> a
    java.lang.Integer SMALL -> b
    java.lang.Integer MEDIUM -> c
    java.lang.Integer LARGE -> d
twitter4j.PagableResponseList -> a.o:
twitter4j.Paging -> a.p:
    int page -> c
    int count -> d
    long sinceId -> e
    long maxId -> f
    char[] S -> a
    char[] SMCP -> b
    twitter4j.http.HttpParameter[] NULL_PARAMETER_ARRAY -> g
    java.util.List NULL_PARAMETER_LIST -> h
    boolean equals(java.lang.Object) -> equals
    int getCount() -> a
    long getMaxId() -> b
    int getPage() -> c
    long getSinceId() -> d
    int hashCode() -> hashCode
    void setCount(int) -> a
    void setMaxId(long) -> a
    void setSinceId(long) -> b
    java.lang.String toString() -> toString
    void addPostParameter(char[],char,java.util.List,java.lang.String,long) -> a
    twitter4j.http.HttpParameter[] asPostParameterArray() -> e
    twitter4j.http.HttpParameter[] asPostParameterArray(char[],java.lang.String) -> a
    java.util.List asPostParameterList(char[],java.lang.String) -> b
twitter4j.Place -> a.q:
    java.lang.String getId() -> a
twitter4j.Query -> a.r:
    java.lang.String query -> a
    java.lang.String lang -> b
    java.lang.String locale -> c
    long maxId -> d
    int rpp -> e
    int page -> f
    java.lang.String since -> g
    long sinceId -> h
    java.lang.String geocode -> i
    java.lang.String until -> j
    java.lang.String resultType -> k
    twitter4j.http.HttpParameter WITH_TWITTER_USER_ID -> l
    boolean equals(java.lang.Object) -> equals
    int getPage() -> a
    int getRpp() -> b
    long getSinceId() -> c
    int hashCode() -> hashCode
    void setMaxId(long) -> a
    void setRpp(int) -> a
    java.lang.String toString() -> toString
    void appendParameter(java.lang.String,long,java.util.List) -> a
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> a
    twitter4j.http.HttpParameter[] asHttpParameterArray(twitter4j.http.HttpParameter) -> a
twitter4j.QueryResult -> a.s:
    double getCompletedIn() -> a
    long getMaxId() -> b
    int getPage() -> c
    java.lang.String getQuery() -> d
    java.lang.String getRefreshUrl() -> e
    int getResultsPerPage() -> f
    long getSinceId() -> g
    twitter4j.Status[] getStatuses() -> h
    java.lang.String getWarning() -> i
twitter4j.RateLimitStatus -> a.t:
    java.util.Date getResetTime() -> a
twitter4j.RateLimitStatusEvent -> a.u:
    twitter4j.RateLimitStatus rateLimitStatus -> a
    boolean isAccountRateLimitStatus -> b
twitter4j.RateLimitStatusListener -> a.v:
    void onRateLimitReached(twitter4j.RateLimitStatusEvent) -> a
    void onRateLimitStatus(twitter4j.RateLimitStatusEvent) -> b
twitter4j.Relationship -> a.w:
    long getSourceUserId() -> a
    java.lang.String getSourceUserScreenName() -> b
    long getTargetUserId() -> c
    java.lang.String getTargetUserScreenName() -> d
    boolean isSourceBlockingTarget() -> e
    boolean isSourceFollowingTarget() -> f
    boolean isTargetFollowingSource() -> g
twitter4j.ResponseList -> a.x:
twitter4j.SavedSearch -> a.y:
    int getId() -> a
    java.lang.String getName() -> b
    int getPosition() -> c
    java.lang.String getQuery() -> d
twitter4j.Status -> a.z:
    java.util.Date getCreatedAt() -> a
    twitter4j.GeoLocation getGeoLocation() -> b
    long getId() -> c
    java.lang.String getInReplyToScreenName() -> d
    long getInReplyToStatusId() -> e
    java.lang.String getRawText() -> f
    long getRetweetCount() -> i
    twitter4j.Status getRetweetedStatus() -> j
    java.lang.String getSource() -> k
    java.lang.String getText() -> l
    twitter4j.User getUser() -> m
    boolean isFavorited() -> n
    boolean isRetweet() -> o
twitter4j.StatusUpdate -> a.aa:
    java.lang.String status -> a
    long inReplyToStatusId -> b
    twitter4j.GeoLocation location -> c
    java.lang.String placeId -> d
    boolean displayCoordinates -> e
    twitter4j.Annotations annotations -> f
    boolean possiblySensitive -> g
    java.lang.String mediaName -> h
    java.io.InputStream mediaBody -> i
    java.io.File mediaFile -> j
    boolean equals(java.lang.Object) -> equals
    java.lang.String getStatus() -> a
    int hashCode() -> hashCode
    void setInReplyToStatusId(long) -> a
    void setLocation(twitter4j.GeoLocation) -> a
    void setMedia(java.io.File) -> a
    java.lang.String toString() -> toString
    void appendParameter(java.lang.String,double,java.util.List) -> a
    void appendParameter(java.lang.String,long,java.util.List) -> a
    void appendParameter(java.lang.String,java.lang.String,java.util.List) -> a
    twitter4j.http.HttpParameter[] asHttpParameterArray(twitter4j.http.HttpParameter) -> a
    boolean isWithMedia() -> b
twitter4j.Trend -> a.ab:
    java.lang.String getName() -> a
    java.lang.String getQuery() -> b
    java.lang.String getUrl() -> c
twitter4j.Trends -> a.ac:
    java.util.Date getAsOf() -> a
    java.util.Date getTrendAt() -> b
    twitter4j.Trend[] getTrends() -> c
twitter4j.Twitter -> a.ad:
twitter4j.TwitterAPIMonitor -> a.ae:
    java.util.regex.Pattern pattern -> a
    twitter4j.TwitterAPIMonitor SINGLETON -> b
    twitter4j.management.APIStatistics STATISTICS -> c
    void methodCalled(java.lang.String,long,boolean) -> a
    twitter4j.TwitterAPIMonitor getInstance() -> a
twitter4j.TwitterBase -> a.af:
    twitter4j.conf.Configuration getConfiguration() -> a
twitter4j.TwitterBaseImpl -> a.ag:
    twitter4j.conf.Configuration conf -> a
    java.lang.String screenName -> b
    long id -> c
    twitter4j.http.HttpClientWrapper http -> d
    java.util.List rateLimitStatusListeners -> g
    twitter4j.internal.json.z_T4JInternalFactory factory -> e
    twitter4j.auth.Authorization auth -> f
    boolean equals(java.lang.Object) -> equals
    twitter4j.conf.Configuration getConfiguration() -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> a
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> a
    int hashCode() -> hashCode
    void httpResponseReceived(twitter4j.http.HttpResponseEvent) -> a
    java.lang.String toString() -> toString
    void ensureAuthorizationEnabled() -> b
    twitter4j.User fillInIDAndScreenName() -> c
    void setFactory() -> d
    twitter4j.auth.OAuthSupport getOAuth() -> e
    void init() -> f
twitter4j.TwitterException -> a.ah:
    int statusCode -> b
    twitter4j.ExceptionDiagnosis exceptionDiagnosis -> c
    twitter4j.http.HttpResponse response -> d
    twitter4j.http.HttpRequest request -> e
    java.lang.String requestPath -> f
    java.lang.String[] FILTER -> g
    boolean nested -> a
    twitter4j.TwitterException$ErrorMessage[] errorMessages -> h
    boolean equals(java.lang.Object) -> equals
    boolean exceededRateLimitation() -> a
    twitter4j.TwitterException$ErrorMessage[] getErrorMessages() -> b
    twitter4j.http.HttpResponse getHttpResponse() -> c
    java.lang.String getMessage() -> getMessage
    twitter4j.RateLimitStatus getRateLimitStatus() -> d
    int getStatusCode() -> e
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void decode(java.lang.String) -> a
    void setNested() -> f
    java.lang.String getCause(int) -> a
twitter4j.TwitterException$ErrorMessage -> a.ai:
    int code -> a
    java.lang.String message -> b
    int getCode() -> a
    java.lang.String getMessage() -> b
    java.lang.String toString() -> toString
twitter4j.TwitterFactory -> a.aj:
    twitter4j.auth.Authorization DEFAULT_AUTHORIZATION -> a
    twitter4j.Twitter SINGLETON -> b
    twitter4j.conf.Configuration conf -> c
    twitter4j.Twitter getInstance() -> a
    twitter4j.Twitter getInstance(twitter4j.auth.AccessToken) -> a
    twitter4j.Twitter getInstance(twitter4j.auth.Authorization) -> a
twitter4j.TwitterImpl -> a.ak:
    twitter4j.http.HttpParameter INCLUDE_ENTITIES -> g
    twitter4j.http.HttpParameter INCLUDE_RTS -> h
    twitter4j.http.HttpParameter INCLUDE_MY_RETWEET -> i
    twitter4j.UserList addUserListMember(int,long) -> a
    twitter4j.User createBlock(long) -> a
    twitter4j.Status createFavorite(long) -> b
    twitter4j.User createFriendship(long) -> c
    twitter4j.UserList createUserList(java.lang.String,boolean,java.lang.String) -> a
    twitter4j.UserList createUserListSubscription(int) -> a
    twitter4j.UserList deleteUserListMember(int,long) -> b
    twitter4j.User destroyBlock(long) -> d
    twitter4j.DirectMessage destroyDirectMessage(long) -> e
    twitter4j.Status destroyFavorite(long) -> f
    twitter4j.User destroyFriendship(long) -> g
    twitter4j.Status destroyStatus(long) -> h
    twitter4j.UserList destroyUserList(int) -> b
    twitter4j.UserList destroyUserListSubscription(int) -> c
    boolean equals(java.lang.Object) -> equals
    twitter4j.ResponseList getActivitiesAboutMe(twitter4j.Paging) -> a
    twitter4j.ResponseList getAvailableTrends() -> e
    twitter4j.IDs getBlockingUsersIDs() -> f
    twitter4j.ResponseList getDirectMessages(twitter4j.Paging) -> b
    twitter4j.ResponseList getFavorites(long,twitter4j.Paging) -> a
    twitter4j.ResponseList getFavorites(java.lang.String,twitter4j.Paging) -> a
    twitter4j.IDs getFollowersIDs(long,long) -> a
    twitter4j.IDs getFollowersIDs(java.lang.String,long) -> a
    twitter4j.IDs getFriendsIDs(long,long) -> b
    twitter4j.IDs getFriendsIDs(java.lang.String,long) -> b
    twitter4j.ResponseList getHomeTimeline(twitter4j.Paging) -> c
    twitter4j.IDs getIncomingFriendships(long) -> i
    twitter4j.Trends getLocationTrends(int) -> d
    twitter4j.ResponseList getMentions(twitter4j.Paging) -> d
    twitter4j.ResponseList getSavedSearches() -> g
    twitter4j.ResponseList getSentDirectMessages(twitter4j.Paging) -> e
    twitter4j.PagableResponseList getUserListMembers(int,long) -> c
    twitter4j.PagableResponseList getUserListMemberships(long,long) -> c
    twitter4j.PagableResponseList getUserListMemberships(long,long,boolean) -> a
    twitter4j.PagableResponseList getUserListMemberships(java.lang.String,long) -> c
    twitter4j.PagableResponseList getUserListMemberships(java.lang.String,long,boolean) -> a
    twitter4j.ResponseList getUserLists(long) -> j
    twitter4j.ResponseList getUserLists(java.lang.String) -> b
    twitter4j.ResponseList getUserListStatuses(int,twitter4j.Paging) -> a
    twitter4j.PagableResponseList getUserListSubscribers(int,long) -> d
    twitter4j.ResponseList getUserTimeline(long,twitter4j.Paging) -> b
    twitter4j.ResponseList getUserTimeline(java.lang.String,twitter4j.Paging) -> b
    int hashCode() -> hashCode
    twitter4j.ResponseList lookupUsers(long[]) -> a
    twitter4j.User reportSpam(long) -> k
    twitter4j.Status retweetStatus(long) -> l
    twitter4j.QueryResult search(twitter4j.Query) -> a
    twitter4j.ResponseList searchUsers(java.lang.String,int) -> a
    twitter4j.DirectMessage sendDirectMessage(long,java.lang.String) -> a
    twitter4j.DirectMessage sendDirectMessage(java.lang.String,java.lang.String) -> b
    twitter4j.Relationship showFriendship(long,long) -> d
    twitter4j.Status showStatus(long) -> m
    twitter4j.User showUser(long) -> n
    twitter4j.User showUser(java.lang.String) -> c
    twitter4j.UserList showUserList(int) -> e
    java.lang.String toString() -> toString
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    twitter4j.User updateProfileImage(java.io.File) -> a
    twitter4j.Status updateStatus(twitter4j.StatusUpdate) -> a
    twitter4j.UserList updateUserList(int,java.lang.String,boolean,java.lang.String) -> a
    twitter4j.User verifyCredentials() -> h
    void addParameterToList(java.util.List,java.lang.String,java.lang.String) -> a
    void checkFileValidity(java.io.File) -> b
    twitter4j.http.HttpResponse get(java.lang.String,java.lang.String,twitter4j.http.HttpParameter[]) -> a
    boolean isOk(twitter4j.http.HttpResponse) -> a
    twitter4j.http.HttpParameter[] mergeParameters(twitter4j.http.HttpParameter[],twitter4j.http.HttpParameter[]) -> a
    twitter4j.http.HttpResponse post(java.lang.String,java.lang.String,twitter4j.http.HttpParameter[]) -> b
twitter4j.TwitterResponse -> a.al:
twitter4j.URLEntity -> a.am:
    java.lang.String getDisplayURL() -> b
    int getEnd() -> c
    java.net.URL getExpandedURL() -> d
    int getStart() -> e
twitter4j.User -> a.an:
    java.util.Date getCreatedAt() -> a
    java.lang.String getDescription() -> b
    int getFavouritesCount() -> c
    int getFollowersCount() -> d
    int getFriendsCount() -> e
    long getId() -> f
    java.lang.String getLocation() -> g
    java.lang.String getName() -> h
    java.lang.String getProfileBannerImageUrl() -> i
    java.net.URL getProfileImageURL() -> j
    java.lang.String getScreenName() -> k
    int getStatusesCount() -> l
    java.net.URL getURL() -> m
    boolean isFollowRequestSent() -> n
    boolean isProtected() -> o
    boolean isVerified() -> p
twitter4j.UserList -> a.ao:
    java.lang.String getDescription() -> a
    int getId() -> b
    int getMemberCount() -> c
    java.lang.String getName() -> d
    int getSubscriberCount() -> e
    twitter4j.User getUser() -> f
    boolean isFollowing() -> g
    boolean isPublic() -> h
twitter4j.UserMentionEntity -> a.ap:
twitter4j.Version -> a.aq:
    java.lang.String getVersion() -> a
twitter4j.api.AccountMethods -> a.a.a:
    twitter4j.User updateProfile(java.lang.String,java.lang.String,java.lang.String,java.lang.String) -> a
    twitter4j.User updateProfileImage(java.io.File) -> a
    twitter4j.User verifyCredentials() -> h
twitter4j.api.ActivityMethods -> a.a.b:
    twitter4j.ResponseList getActivitiesAboutMe(twitter4j.Paging) -> a
twitter4j.api.BlockMethods -> a.a.c:
    twitter4j.User createBlock(long) -> a
    twitter4j.User destroyBlock(long) -> d
    twitter4j.IDs getBlockingUsersIDs() -> f
twitter4j.api.DirectMessageMethods -> a.a.d:
    twitter4j.DirectMessage destroyDirectMessage(long) -> e
    twitter4j.ResponseList getDirectMessages(twitter4j.Paging) -> b
    twitter4j.ResponseList getSentDirectMessages(twitter4j.Paging) -> e
    twitter4j.DirectMessage sendDirectMessage(long,java.lang.String) -> a
    twitter4j.DirectMessage sendDirectMessage(java.lang.String,java.lang.String) -> b
twitter4j.api.FavoriteMethods -> a.a.e:
    twitter4j.Status createFavorite(long) -> b
    twitter4j.Status destroyFavorite(long) -> f
    twitter4j.ResponseList getFavorites(long,twitter4j.Paging) -> a
    twitter4j.ResponseList getFavorites(java.lang.String,twitter4j.Paging) -> a
twitter4j.api.FriendsFollowersMethods -> a.a.f:
    twitter4j.IDs getFollowersIDs(long,long) -> a
    twitter4j.IDs getFollowersIDs(java.lang.String,long) -> a
    twitter4j.IDs getFriendsIDs(long,long) -> b
    twitter4j.IDs getFriendsIDs(java.lang.String,long) -> b
twitter4j.api.FriendshipMethods -> a.a.g:
    twitter4j.User createFriendship(long) -> c
    twitter4j.User destroyFriendship(long) -> g
    twitter4j.IDs getIncomingFriendships(long) -> i
    twitter4j.Relationship showFriendship(long,long) -> d
twitter4j.api.ListMembersMethods -> a.a.h:
    twitter4j.UserList addUserListMember(int,long) -> a
    twitter4j.UserList deleteUserListMember(int,long) -> b
    twitter4j.PagableResponseList getUserListMembers(int,long) -> c
twitter4j.api.ListMethods -> a.a.i:
    twitter4j.UserList createUserList(java.lang.String,boolean,java.lang.String) -> a
    twitter4j.UserList destroyUserList(int) -> b
    twitter4j.PagableResponseList getUserListMemberships(long,long) -> c
    twitter4j.PagableResponseList getUserListMemberships(java.lang.String,long) -> c
    twitter4j.ResponseList getUserLists(long) -> j
    twitter4j.ResponseList getUserLists(java.lang.String) -> b
    twitter4j.ResponseList getUserListStatuses(int,twitter4j.Paging) -> a
    twitter4j.UserList showUserList(int) -> e
    twitter4j.UserList updateUserList(int,java.lang.String,boolean,java.lang.String) -> a
twitter4j.api.ListSubscribersMethods -> a.a.j:
    twitter4j.UserList createUserListSubscription(int) -> a
    twitter4j.UserList destroyUserListSubscription(int) -> c
    twitter4j.PagableResponseList getUserListSubscribers(int,long) -> d
twitter4j.api.LocalTrendsMethods -> a.a.k:
    twitter4j.ResponseList getAvailableTrends() -> e
    twitter4j.Trends getLocationTrends(int) -> d
twitter4j.api.SavedSearchesMethods -> a.a.l:
    twitter4j.ResponseList getSavedSearches() -> g
twitter4j.api.SearchMethods -> a.a.m:
    twitter4j.QueryResult search(twitter4j.Query) -> a
twitter4j.api.SpamReportingMethods -> a.a.n:
    twitter4j.User reportSpam(long) -> k
twitter4j.api.StatusMethods -> a.a.o:
    twitter4j.Status destroyStatus(long) -> h
    twitter4j.Status retweetStatus(long) -> l
    twitter4j.Status showStatus(long) -> m
    twitter4j.Status updateStatus(twitter4j.StatusUpdate) -> a
twitter4j.api.TimelineMethods -> a.a.p:
    twitter4j.ResponseList getHomeTimeline(twitter4j.Paging) -> c
    twitter4j.ResponseList getMentions(twitter4j.Paging) -> d
    twitter4j.ResponseList getUserTimeline(long,twitter4j.Paging) -> b
    twitter4j.ResponseList getUserTimeline(java.lang.String,twitter4j.Paging) -> b
twitter4j.api.UserMethods -> a.a.q:
    twitter4j.ResponseList lookupUsers(long[]) -> a
    twitter4j.ResponseList searchUsers(java.lang.String,int) -> a
    twitter4j.User showUser(long) -> n
    twitter4j.User showUser(java.lang.String) -> c
twitter4j.auth.AccessToken -> a.b.a:
    java.lang.String screenName -> b
    long userId -> c
    boolean equals(java.lang.Object) -> equals
    long getUserId() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    java.lang.String getParameter(java.lang.String) -> a
    java.lang.String getTokenSecret() -> b
    java.lang.String getToken() -> c
twitter4j.auth.Authorization -> a.b.b:
    java.lang.String getAuthorizationHeader(twitter4j.http.HttpRequest) -> a
    boolean isEnabled() -> a
twitter4j.auth.AuthorizationConfiguration -> a.b.c:
    java.lang.String getOAuthAccessToken() -> a
    java.lang.String getOAuthAccessTokenSecret() -> b
    java.lang.String getOAuthConsumerKey() -> c
    java.lang.String getOAuthConsumerSecret() -> d
    java.lang.String getPassword() -> e
    java.lang.String getUser() -> f
twitter4j.auth.AuthorizationFactory -> a.b.d:
    twitter4j.auth.Authorization getInstance(twitter4j.conf.Configuration) -> a
twitter4j.auth.BasicAuthorization -> a.b.e:
    java.lang.String userId -> a
    java.lang.String password -> b
    java.lang.String basic -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String getAuthorizationHeader(twitter4j.http.HttpRequest) -> a
    int hashCode() -> hashCode
    boolean isEnabled() -> a
    java.lang.String toString() -> toString
    java.lang.String encodeBasicAuthenticationString() -> b
twitter4j.auth.NullAuthorization -> a.b.f:
    twitter4j.auth.NullAuthorization SINGLETON -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getAuthorizationHeader(twitter4j.http.HttpRequest) -> a
    boolean isEnabled() -> a
    java.lang.String toString() -> toString
    twitter4j.auth.NullAuthorization getInstance() -> b
twitter4j.auth.OAuthAuthorization -> a.b.g:
    twitter4j.conf.Configuration conf -> a
    twitter4j.http.HttpClientWrapper http -> b
    twitter4j.http.HttpParameter OAUTH_SIGNATURE_METHOD -> c
    twitter4j.internal.logging.Logger logger -> d
    java.lang.String consumerKey -> e
    java.lang.String consumerSecret -> f
    java.lang.String realm -> g
    twitter4j.auth.OAuthToken oauthToken -> h
    java.util.Random RAND -> i
    boolean equals(java.lang.Object) -> equals
    java.lang.String getAuthorizationHeader(twitter4j.http.HttpRequest) -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String) -> b
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> a
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> a
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String,java.lang.String) -> b
    int hashCode() -> hashCode
    boolean isEnabled() -> a
    void setOAuthAccessToken(twitter4j.auth.AccessToken) -> a
    void setOAuthConsumer(java.lang.String,java.lang.String) -> c
    java.lang.String toString() -> toString
    void ensureTokenIsAvailable() -> b
    void parseGetParameters(java.lang.String,java.util.List) -> a
    java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.http.HttpParameter[],twitter4j.auth.OAuthToken) -> a
    java.lang.String generateAuthorizationHeader(java.lang.String,java.lang.String,twitter4j.http.HttpParameter[],java.lang.String,java.lang.String,twitter4j.auth.OAuthToken) -> a
    java.lang.String generateSignature(java.lang.String,twitter4j.auth.OAuthToken) -> a
    java.lang.String constructRequestURL(java.lang.String) -> c
    java.lang.String encodeParameters(java.util.List) -> a
    java.lang.String encodeParameters(java.util.List,java.lang.String,boolean) -> a
    java.lang.String normalizeRequestParameters(java.util.List) -> b
    java.util.List toParamList(twitter4j.http.HttpParameter[]) -> a
twitter4j.auth.OAuthSupport -> a.b.h:
    twitter4j.auth.AccessToken getOAuthAccessToken(twitter4j.auth.RequestToken,java.lang.String) -> a
    twitter4j.auth.AccessToken getOAuthAccessToken(java.lang.String,java.lang.String) -> a
    twitter4j.auth.RequestToken getOAuthRequestToken(java.lang.String) -> a
twitter4j.auth.OAuthToken -> a.b.i:
    java.lang.String token -> b
    java.lang.String tokenSecret -> c
    javax.crypto.spec.SecretKeySpec secretKeySpec -> d
    java.lang.String[] responseStr -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getParameter(java.lang.String) -> a
    java.lang.String getToken() -> c
    java.lang.String getTokenSecret() -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    javax.crypto.spec.SecretKeySpec getSecretKeySpec() -> d
    void setSecretKeySpec(javax.crypto.spec.SecretKeySpec) -> a
twitter4j.auth.RequestToken -> a.b.j:
    twitter4j.conf.Configuration conf -> b
    java.lang.String getAuthorizationURL() -> a
    java.lang.String toString() -> toString
    java.lang.String getParameter(java.lang.String) -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String getTokenSecret() -> b
    java.lang.String getToken() -> c
twitter4j.auth.TwipOModeAuthorization -> a.b.k:
    twitter4j.auth.TwipOModeAuthorization SINGLETON -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getAuthorizationHeader(twitter4j.http.HttpRequest) -> a
    boolean isEnabled() -> a
    java.lang.String toString() -> toString
twitter4j.conf.BaseConfigurationFactory -> a.c.a:
    twitter4j.conf.ConfigurationBase ROOT_CONFIGURATION -> a
    twitter4j.conf.Configuration getInstance() -> a
twitter4j.conf.Configuration -> a.c.b:
    java.lang.String getHttpClientImplementation() -> g
    java.lang.String getOAuthAccessTokenURL() -> h
    java.lang.String getOAuthAuthorizationURL() -> i
    java.lang.String getOAuthBaseURL() -> j
    java.lang.String getOAuthRequestTokenURL() -> k
    java.lang.String getRestBaseURL() -> l
    java.lang.String getSigningOAuthAccessTokenURL() -> m
    java.lang.String getSigningOAuthBaseURL() -> n
    java.lang.String getSigningOAuthRequestTokenURL() -> o
    java.lang.String getSigningRestBaseURL() -> p
    boolean isIncludeEntitiesEnabled() -> q
    boolean isIncludeRTsEnabled() -> r
twitter4j.conf.ConfigurationBase -> a.c.c:
    boolean debug -> b
    java.lang.String userAgent -> c
    java.lang.String user -> d
    java.lang.String password -> e
    boolean useSSL -> f
    boolean ignoreSSLError -> g
    boolean prettyDebug -> h
    boolean gzipEnabled -> i
    java.lang.String httpProxyHost -> j
    java.lang.String httpProxyUser -> k
    java.lang.String httpProxyPassword -> l
    int httpProxyPort -> m
    int httpConnectionTimeout -> n
    int httpReadTimeout -> o
    java.lang.String httpClientImplementation -> p
    int httpRetryCount -> q
    int httpRetryIntervalSeconds -> r
    int maxTotalConnections -> s
    int defaultMaxPerRoute -> t
    java.lang.String oAuthConsumerKey -> u
    java.lang.String oAuthConsumerSecret -> v
    java.lang.String oAuthAccessToken -> w
    java.lang.String oAuthAccessTokenSecret -> x
    java.lang.String oAuthRequestTokenURL -> y
    java.lang.String oAuthAuthorizationURL -> z
    java.lang.String oAuthAccessTokenURL -> A
    java.lang.String oAuthAuthenticationURL -> B
    java.lang.String signingOAuthRequestTokenURL -> C
    java.lang.String signingOAuthAuthorizationURL -> D
    java.lang.String signingOAuthAccessTokenURL -> E
    java.lang.String signingOAuthAuthenticationURL -> F
    java.lang.String oAuthBaseURL -> G
    java.lang.String signingOAuthBaseURL -> H
    java.lang.String signingRestBaseURL -> I
    java.lang.String restBaseURL -> J
    boolean includeRTsEnabled -> K
    boolean includeEntitiesEnabled -> L
    java.lang.String clientVersion -> M
    java.lang.String clientURL -> N
    java.lang.String clientName -> O
    twitter4j.http.HostAddressResolver hostAddressResolver -> P
    java.util.Map requestHeaders -> a
    java.util.List instances -> Q
    boolean equals(java.lang.Object) -> equals
    java.lang.String getClientName() -> s
    java.lang.String getClientURL() -> t
    java.lang.String getClientVersion() -> u
    twitter4j.http.HostAddressResolver getHostAddressResolver() -> v
    java.lang.String getHttpClientImplementation() -> g
    int getHttpConnectionTimeout() -> w
    java.lang.String getHttpProxyHost() -> x
    java.lang.String getHttpProxyPassword() -> y
    int getHttpProxyPort() -> z
    java.lang.String getHttpProxyUser() -> A
    int getHttpReadTimeout() -> B
    int getHttpRetryCount() -> C
    int getHttpRetryIntervalSeconds() -> D
    java.lang.String getOAuthAccessToken() -> a
    java.lang.String getOAuthAccessTokenSecret() -> b
    java.lang.String getOAuthAccessTokenURL() -> h
    java.lang.String getOAuthAuthorizationURL() -> i
    java.lang.String getOAuthBaseURL() -> j
    java.lang.String getOAuthConsumerKey() -> c
    java.lang.String getOAuthConsumerSecret() -> d
    java.lang.String getOAuthRequestTokenURL() -> k
    java.lang.String getPassword() -> e
    java.util.Map getRequestHeaders() -> E
    java.lang.String getRestBaseURL() -> l
    java.lang.String getSigningOAuthAccessTokenURL() -> m
    java.lang.String getSigningOAuthBaseURL() -> n
    java.lang.String getSigningOAuthRequestTokenURL() -> o
    java.lang.String getSigningRestBaseURL() -> p
    java.lang.String getUser() -> f
    java.lang.String getUserAgent() -> F
    int hashCode() -> hashCode
    boolean isIncludeEntitiesEnabled() -> q
    boolean isIncludeRTsEnabled() -> r
    boolean isPrettyDebugEnabled() -> G
    boolean isSSLErrorIgnored() -> H
    void setHostAddressResolver(twitter4j.http.HostAddressResolver) -> a
    void setHttpClientImplementation(java.lang.Class) -> a
    void cacheInstance() -> I
    void setClientName(java.lang.String) -> a
    void setClientURL(java.lang.String) -> b
    void setClientVersion(java.lang.String) -> c
    void setDebug(boolean) -> a
    void setGZIPEnabled(boolean) -> b
    void setHttpConnectionTimeout(int) -> a
    void setHttpDefaultMaxPerRoute(int) -> b
    void setHttpMaxTotalConnections(int) -> c
    void setHttpProxyHost(java.lang.String) -> d
    void setHttpProxyPassword(java.lang.String) -> e
    void setHttpProxyPort(int) -> d
    void setHttpProxyUser(java.lang.String) -> f
    void setHttpReadTimeout(int) -> e
    void setHttpRetryCount(int) -> f
    void setHttpRetryIntervalSeconds(int) -> g
    void setIgnoreSSLError(boolean) -> c
    void setIncludeEntitiesEnbled(boolean) -> d
    void setIncludeRTsEnbled(boolean) -> e
    void setOAuthAccessToken(java.lang.String) -> g
    void setOAuthAccessTokenSecret(java.lang.String) -> h
    void setOAuthBaseURL(java.lang.String) -> i
    void setOAuthConsumerKey(java.lang.String) -> j
    void setOAuthConsumerSecret(java.lang.String) -> k
    void setPassword(java.lang.String) -> l
    void setPrettyDebugEnabled(boolean) -> f
    void setRestBaseURL(java.lang.String) -> m
    void setSigningOAuthBaseURL(java.lang.String) -> n
    void setSigningRestBaseURL(java.lang.String) -> o
    void setUser(java.lang.String) -> p
    void setUserAgent(java.lang.String) -> q
    void setUseSSL(boolean) -> g
    void fixOAuthBaseURL() -> K
    void fixRestBaseURL() -> L
    void initRequestHeaders() -> J
    void cacheInstance(twitter4j.conf.ConfigurationBase) -> a
    java.lang.String fixURL(boolean,java.lang.String) -> a
    java.lang.String fixURLSlash(java.lang.String) -> r
    boolean isNullOrEmpty(java.lang.String) -> s
twitter4j.conf.ConfigurationBuilder -> a.c.d:
    twitter4j.conf.ConfigurationBase configuration -> a
    twitter4j.conf.Configuration build() -> a
    twitter4j.conf.ConfigurationBuilder setClientName(java.lang.String) -> a
    twitter4j.conf.ConfigurationBuilder setClientURL(java.lang.String) -> b
    twitter4j.conf.ConfigurationBuilder setClientVersion(java.lang.String) -> c
    twitter4j.conf.ConfigurationBuilder setGZIPEnabled(boolean) -> a
    twitter4j.conf.ConfigurationBuilder setHostAddressResolver(twitter4j.http.HostAddressResolver) -> a
    twitter4j.conf.ConfigurationBuilder setHttpClientImplementation(java.lang.Class) -> a
    twitter4j.conf.ConfigurationBuilder setHttpConnectionTimeout(int) -> a
    twitter4j.conf.ConfigurationBuilder setHttpProxyHost(java.lang.String) -> d
    twitter4j.conf.ConfigurationBuilder setHttpProxyPort(int) -> b
    twitter4j.conf.ConfigurationBuilder setIgnoreSSLError(boolean) -> b
    twitter4j.conf.ConfigurationBuilder setIncludeEntitiesEnabled(boolean) -> c
    twitter4j.conf.ConfigurationBuilder setOAuthBaseURL(java.lang.String) -> e
    twitter4j.conf.ConfigurationBuilder setOAuthConsumerKey(java.lang.String) -> f
    twitter4j.conf.ConfigurationBuilder setOAuthConsumerSecret(java.lang.String) -> g
    twitter4j.conf.ConfigurationBuilder setRestBaseURL(java.lang.String) -> h
    twitter4j.conf.ConfigurationBuilder setSigningOAuthBaseURL(java.lang.String) -> i
    twitter4j.conf.ConfigurationBuilder setSigningRestBaseURL(java.lang.String) -> j
    twitter4j.conf.ConfigurationBuilder setUserAgent(java.lang.String) -> k
    void checkNotBuilt() -> b
twitter4j.conf.ConfigurationContext -> a.c.e:
    twitter4j.conf.ConfigurationFactory factory -> a
    twitter4j.conf.Configuration getInstance() -> a
twitter4j.conf.ConfigurationFactory -> a.c.f:
    twitter4j.conf.Configuration getInstance() -> a
twitter4j.http.BASE64Encoder -> a.d.a:
    char last2byte -> a
    char last4byte -> b
    char last6byte -> c
    char lead6byte -> d
    char lead4byte -> e
    char lead2byte -> f
    char[] encodeTable -> g
    java.lang.String encode(byte[]) -> a
twitter4j.http.HTMLEntity -> a.d.b:
    java.util.Map entityEscapeMap -> a
    java.util.Map escapeEntityMap -> b
    java.lang.String unescape(java.lang.String) -> a
    void unescape(java.lang.StringBuffer) -> a
twitter4j.http.HostAddressResolver -> a.d.c:
    java.lang.String resolve(java.lang.String) -> a
twitter4j.http.HttpClient -> a.d.d:
    twitter4j.http.HttpResponse request(twitter4j.http.HttpRequest) -> a
twitter4j.http.HttpClientBase -> a.d.e:
    twitter4j.internal.logging.Logger logger -> b
    twitter4j.http.HttpClientConfiguration CONF -> a
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void write(java.io.DataOutputStream,java.lang.String) -> a
    boolean isProxyConfigured() -> a
twitter4j.http.HttpClientConfiguration -> a.d.f:
    twitter4j.http.HostAddressResolver getHostAddressResolver() -> v
    int getHttpConnectionTimeout() -> w
    java.lang.String getHttpProxyHost() -> x
    java.lang.String getHttpProxyPassword() -> y
    int getHttpProxyPort() -> z
    java.lang.String getHttpProxyUser() -> A
    int getHttpReadTimeout() -> B
    int getHttpRetryCount() -> C
    int getHttpRetryIntervalSeconds() -> D
    boolean isPrettyDebugEnabled() -> G
    boolean isSSLErrorIgnored() -> H
twitter4j.http.HttpClientFactory -> a.d.g:
    twitter4j.http.HttpClient getInstance(twitter4j.conf.Configuration) -> a
twitter4j.http.HttpClientImpl -> a.d.h:
    twitter4j.internal.logging.Logger logger -> b
    javax.net.ssl.TrustManager[] TRUST_ALL_CERTS -> c
    javax.net.ssl.SSLSocketFactory IGNORE_ERROR_SSL_FACTORY -> d
    javax.net.ssl.HostnameVerifier ALLOW_ALL_HOSTNAME_VERIFIER -> e
    java.util.Map instanceMap -> f
    twitter4j.http.HttpResponse request(twitter4j.http.HttpRequest) -> a
    java.net.HttpURLConnection getConnection(java.lang.String) -> a
    void setHeaders(twitter4j.http.HttpRequest,java.net.HttpURLConnection) -> a
twitter4j.http.HttpClientImpl$1 -> a.d.i:
    twitter4j.http.HttpClientImpl this$0 -> a
    java.net.PasswordAuthentication getPasswordAuthentication() -> getPasswordAuthentication
twitter4j.http.HttpClientImpl$AllowAllHostnameVerifier -> a.d.j:
    boolean verify(java.lang.String,javax.net.ssl.SSLSession) -> verify
twitter4j.http.HttpClientImpl$TrustAllX509TrustManager -> a.d.k:
    void checkClientTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkClientTrusted
    void checkServerTrusted(java.security.cert.X509Certificate[],java.lang.String) -> checkServerTrusted
    java.security.cert.X509Certificate[] getAcceptedIssuers() -> getAcceptedIssuers
twitter4j.http.HttpClientWrapper -> a.d.l:
    twitter4j.conf.Configuration wrapperConf -> a
    twitter4j.http.HttpClient http -> b
    java.util.Map requestHeaders -> c
    twitter4j.http.HttpResponseListener httpResponseListener -> d
    boolean equals(java.lang.Object) -> equals
    twitter4j.http.HttpResponse get(java.lang.String,java.lang.String) -> a
    twitter4j.http.HttpResponse get(java.lang.String,java.lang.String,twitter4j.auth.Authorization) -> a
    twitter4j.http.HttpResponse get(java.lang.String,java.lang.String,twitter4j.http.HttpParameter[],twitter4j.auth.Authorization) -> a
    int hashCode() -> hashCode
    twitter4j.http.HttpResponse post(java.lang.String,java.lang.String,twitter4j.http.HttpParameter[],twitter4j.auth.Authorization) -> b
    twitter4j.http.HttpResponse post(java.lang.String,java.lang.String,twitter4j.http.HttpParameter[],twitter4j.auth.Authorization,java.util.Map) -> a
    void setHttpResponseListener(twitter4j.http.HttpResponseListener) -> a
    java.lang.String toString() -> toString
    twitter4j.http.HttpResponse request(twitter4j.http.HttpRequest) -> a
twitter4j.http.HttpClientWrapperConfiguration -> a.d.m:
    java.util.Map getRequestHeaders() -> E
twitter4j.http.HttpParameter -> a.d.n:
    java.lang.String name -> a
    java.lang.String value -> b
    java.io.File file -> c
    java.io.InputStream fileBody -> d
    int compareTo(twitter4j.http.HttpParameter) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getContentType() -> a
    java.io.File getFile() -> b
    java.io.InputStream getFileBody() -> c
    java.lang.String getName() -> d
    java.lang.String getValue() -> e
    boolean hasFileBody() -> f
    int hashCode() -> hashCode
    boolean isFile() -> g
    java.lang.String toString() -> toString
    boolean containsFile(twitter4j.http.HttpParameter[]) -> a
    java.lang.String encode(java.lang.String) -> a
    java.lang.String encodeParameters(twitter4j.http.HttpParameter[]) -> b
    int compareTo(java.lang.Object) -> compareTo
twitter4j.http.HttpRequest -> a.d.o:
    twitter4j.http.RequestMethod method -> a
    java.lang.String url -> b
    java.lang.String sign_url -> c
    twitter4j.http.HttpParameter[] parameters -> d
    twitter4j.auth.Authorization authorization -> e
    java.util.Map requestHeaders -> f
    twitter4j.http.HttpParameter[] NULL_PARAMETERS -> g
    boolean equals(java.lang.Object) -> equals
    twitter4j.auth.Authorization getAuthorization() -> a
    twitter4j.http.RequestMethod getMethod() -> b
    twitter4j.http.HttpParameter[] getParameters() -> c
    java.util.Map getRequestHeaders() -> d
    java.lang.String getSignURL() -> e
    java.lang.String getURL() -> f
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.http.HttpResponse -> a.d.p:
    twitter4j.internal.logging.Logger logger -> e
    twitter4j.http.HttpClientConfiguration CONF -> a
    int statusCode -> b
    java.lang.String responseAsString -> c
    java.io.InputStream is -> d
    boolean streamConsumed -> f
    org.json.JSONObject json -> g
    org.json.JSONArray jsonArray -> h
    org.json.JSONArray asJSONArray() -> b
    org.json.JSONObject asJSONObject() -> c
    java.io.InputStream asStream() -> d
    java.lang.String asString() -> e
    void disconnect() -> a
    java.lang.String getResponseHeader(java.lang.String) -> a
    int getStatusCode() -> f
    java.lang.String toString() -> toString
    void disconnectForcibly() -> g
twitter4j.http.HttpResponseEvent -> a.d.q:
    twitter4j.http.HttpRequest request -> a
    twitter4j.http.HttpResponse response -> b
    twitter4j.TwitterException twitterException -> c
    boolean equals(java.lang.Object) -> equals
    twitter4j.http.HttpResponse getResponse() -> a
    twitter4j.TwitterException getTwitterException() -> b
    int hashCode() -> hashCode
    boolean isAuthenticated() -> c
    java.lang.String toString() -> toString
twitter4j.http.HttpResponseImpl -> a.d.r:
    java.net.HttpURLConnection con -> e
    void disconnect() -> a
    java.lang.String getResponseHeader(java.lang.String) -> a
twitter4j.http.HttpResponseListener -> a.d.s:
    void httpResponseReceived(twitter4j.http.HttpResponseEvent) -> a
twitter4j.http.RequestMethod -> a.d.t:
    java.lang.String name -> f
    java.util.Map instances -> g
    twitter4j.http.RequestMethod GET -> a
    twitter4j.http.RequestMethod POST -> b
    twitter4j.http.RequestMethod DELETE -> c
    twitter4j.http.RequestMethod HEAD -> d
    twitter4j.http.RequestMethod PUT -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String name() -> a
    java.lang.String toString() -> toString
twitter4j.http.StreamingGZIPInputStream -> a.d.u:
    java.io.InputStream wrapped -> a
    int available() -> available
twitter4j.internal.json.ActivityJSONImpl -> a.e.a.a:
    twitter4j.Activity$Action action -> a
    java.util.Date createdAt -> b
    twitter4j.User[] sources -> c
    twitter4j.User[] targetUsers -> d
    twitter4j.Status[] targetObjectStatuses -> e
    twitter4j.Status[] targetStatuses -> f
    twitter4j.UserList[] targetObjectUserLists -> g
    long maxPosition -> h
    long minPosition -> i
    int targetObjectsSize -> j
    int targetsSize -> k
    int sourcesSize -> l
    int compareTo(twitter4j.Activity) -> a
    twitter4j.Activity$Action getAction() -> a
    java.util.Date getCreatedAt() -> b
    twitter4j.User[] getSources() -> c
    twitter4j.Status[] getTargetObjectStatuses() -> d
    twitter4j.Status[] getTargetStatuses() -> e
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.ResponseList createActivityList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
    twitter4j.ResponseList createActivityList(org.json.JSONArray,twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.DirectMessageJSONImpl -> a.e.a.b:
    long id -> a
    java.lang.String text -> b
    java.lang.String rawText -> c
    long senderId -> d
    long recipientId -> e
    java.util.Date createdAt -> f
    java.lang.String senderScreenName -> g
    java.lang.String recipientScreenName -> h
    twitter4j.UserMentionEntity[] userMentionEntities -> i
    twitter4j.URLEntity[] urlEntities -> j
    twitter4j.HashtagEntity[] hashtagEntities -> k
    twitter4j.User sender -> l
    twitter4j.User recipient -> m
    boolean equals(java.lang.Object) -> equals
    java.util.Date getCreatedAt() -> a
    long getId() -> b
    twitter4j.MediaEntity[] getMediaEntities() -> g
    java.lang.String getRawText() -> c
    twitter4j.User getRecipient() -> d
    twitter4j.User getSender() -> e
    java.lang.String getText() -> f
    twitter4j.URLEntity[] getURLEntities() -> h
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.ResponseList createDirectMessageList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
twitter4j.internal.json.HashtagEntityJSONImpl -> a.e.a.c:
    int start -> a
    int end -> b
    java.lang.String text -> c
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
twitter4j.internal.json.IDsJSONImpl -> a.e.a.d:
    long[] ids -> a
    long previousCursor -> b
    long nextCursor -> c
    boolean equals(java.lang.Object) -> equals
    long[] getIDs() -> c
    long getNextCursor() -> a
    long getPreviousCursor() -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(java.lang.String) -> a
twitter4j.internal.json.LocationJSONImpl -> a.e.a.e:
    int woeid -> a
    java.lang.String countryName -> b
    java.lang.String countryCode -> c
    java.lang.String placeName -> d
    int placeCode -> e
    java.lang.String name -> f
    java.lang.String url -> g
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> a
    int getWoeid() -> b
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.ResponseList createLocationList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
    twitter4j.ResponseList createLocationList(org.json.JSONArray) -> a
twitter4j.internal.json.MediaEntityJSONImpl -> a.e.a.f:
    long id -> a
    int start -> b
    int end -> c
    java.net.URL url -> d
    java.net.URL mediaURL -> e
    java.net.URL mediaURLHttps -> f
    java.net.URL expandedURL -> g
    java.lang.String displayURL -> h
    java.util.Map sizes -> i
    java.lang.String type -> j
    boolean equals(java.lang.Object) -> equals
    java.lang.String getDisplayURL() -> b
    int getEnd() -> c
    java.net.URL getExpandedURL() -> d
    java.net.URL getMediaURL() -> a
    int getStart() -> e
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void addMediaEntitySizeIfNotNull(java.util.Map,org.json.JSONObject,java.lang.Integer,java.lang.String) -> a
twitter4j.internal.json.MediaEntityJSONImpl$Size -> a.e.a.g:
    int width -> e
    int height -> f
    int resize -> g
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.PagableResponseListImpl -> a.e.a.h:
    long previousCursor -> a
    long nextCursor -> b
    long getNextCursor() -> a
    long getPreviousCursor() -> b
twitter4j.internal.json.PlaceJSONImpl -> a.e.a.i:
    java.lang.String name -> a
    java.lang.String streetAddress -> b
    java.lang.String countryCode -> c
    java.lang.String id -> d
    java.lang.String country -> e
    java.lang.String placeType -> f
    java.lang.String url -> g
    java.lang.String fullName -> h
    java.lang.String boundingBoxType -> i
    twitter4j.GeoLocation[][] boundingBoxCoordinates -> j
    java.lang.String geometryType -> k
    twitter4j.GeoLocation[][] geometryCoordinates -> l
    twitter4j.Place[] containedWithIn -> m
    int compareTo(twitter4j.Place) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getId() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.QueryResultJSONImpl -> a.e.a.j:
    long sinceId -> a
    long maxId -> b
    java.lang.String refreshUrl -> c
    int resultsPerPage -> d
    java.lang.String warning -> e
    double completedIn -> f
    int page -> g
    java.lang.String query -> h
    twitter4j.Status[] statuses -> i
    boolean equals(java.lang.Object) -> equals
    double getCompletedIn() -> a
    long getMaxId() -> b
    int getPage() -> c
    java.lang.String getQuery() -> d
    java.lang.String getRefreshUrl() -> e
    int getResultsPerPage() -> f
    long getSinceId() -> g
    twitter4j.Status[] getStatuses() -> h
    java.lang.String getWarning() -> i
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.RateLimitStatusJSONImpl -> a.e.a.k:
    int remainingHits -> a
    int hourlyLimit -> b
    int resetTimeInSeconds -> c
    int secondsUntilReset -> d
    java.util.Date resetTime -> e
    boolean equals(java.lang.Object) -> equals
    java.util.Date getResetTime() -> a
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.RateLimitStatus createFeatureSpecificRateLimitStatusFromResponseHeader(twitter4j.http.HttpResponse) -> a
    twitter4j.RateLimitStatus createFromResponseHeader(twitter4j.http.HttpResponse) -> b
twitter4j.internal.json.RelationshipJSONImpl -> a.e.a.l:
    long targetUserId -> a
    java.lang.String targetUserScreenName -> b
    boolean sourceBlockingTarget -> c
    boolean sourceNotificationsEnabled -> d
    boolean sourceFollowingTarget -> e
    boolean sourceFollowedByTarget -> f
    long sourceUserId -> g
    java.lang.String sourceUserScreenName -> h
    boolean equals(java.lang.Object) -> equals
    long getSourceUserId() -> a
    java.lang.String getSourceUserScreenName() -> b
    long getTargetUserId() -> c
    java.lang.String getTargetUserScreenName() -> d
    int hashCode() -> hashCode
    boolean isSourceBlockingTarget() -> e
    boolean isSourceFollowingTarget() -> f
    boolean isTargetFollowingSource() -> g
    java.lang.String toString() -> toString
twitter4j.internal.json.ResponseListImpl -> a.e.a.m:
    twitter4j.RateLimitStatus rateLimitStatus -> a
    twitter4j.RateLimitStatus featureSpecificRateLimitStatus -> b
    int accessLevel -> c
    void init(twitter4j.http.HttpResponse) -> a
twitter4j.internal.json.SavedSearchJSONImpl -> a.e.a.n:
    java.util.Date createdAt -> a
    java.lang.String query -> b
    int position -> c
    java.lang.String name -> d
    int id -> e
    int compareTo(twitter4j.SavedSearch) -> a
    boolean equals(java.lang.Object) -> equals
    int getId() -> a
    java.lang.String getName() -> b
    int getPosition() -> c
    java.lang.String getQuery() -> d
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.ResponseList createSavedSearchList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.StatusJSONImpl -> a.e.a.o:
    twitter4j.internal.logging.Logger logger -> a
    java.util.Date createdAt -> b
    long id -> c
    java.lang.String text -> d
    java.lang.String rawText -> e
    java.lang.String source -> f
    boolean isTruncated -> g
    long inReplyToStatusId -> h
    long inReplyToUserId -> i
    boolean isFavorited -> j
    java.lang.String inReplyToScreenName -> k
    twitter4j.GeoLocation geoLocation -> l
    twitter4j.Place place -> m
    long retweetCount -> n
    boolean wasRetweetedByMe -> o
    java.lang.String[] contributors -> p
    long[] contributorsIDs -> q
    twitter4j.Annotations annotations -> r
    twitter4j.Status retweetedStatus -> s
    twitter4j.UserMentionEntity[] userMentionEntities -> t
    twitter4j.URLEntity[] urlEntities -> u
    twitter4j.HashtagEntity[] hashtagEntities -> v
    twitter4j.MediaEntity[] mediaEntities -> w
    twitter4j.Status myRetweetedStatus -> x
    twitter4j.User user -> y
    int compareTo(twitter4j.Status) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Date getCreatedAt() -> a
    twitter4j.GeoLocation getGeoLocation() -> b
    long getId() -> c
    java.lang.String getInReplyToScreenName() -> d
    long getInReplyToStatusId() -> e
    twitter4j.MediaEntity[] getMediaEntities() -> g
    java.lang.String getRawText() -> f
    long getRetweetCount() -> i
    twitter4j.Status getRetweetedStatus() -> j
    java.lang.String getSource() -> k
    java.lang.String getText() -> l
    twitter4j.URLEntity[] getURLEntities() -> h
    twitter4j.User getUser() -> m
    int hashCode() -> hashCode
    boolean isFavorited() -> n
    boolean isRetweet() -> o
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.ResponseList createStatusList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.TrendJSONImpl -> a.e.a.p:
    java.lang.String name -> a
    java.lang.String url -> b
    java.lang.String query -> c
    boolean equals(java.lang.Object) -> equals
    java.lang.String getName() -> a
    java.lang.String getQuery() -> b
    java.lang.String getUrl() -> c
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
twitter4j.internal.json.TrendsJSONImpl -> a.e.a.q:
    java.util.Date asOf -> a
    java.util.Date trendAt -> b
    twitter4j.Trend[] trends -> c
    twitter4j.Location location -> d
    int compareTo(twitter4j.Trends) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Date getAsOf() -> a
    java.util.Date getTrendAt() -> b
    twitter4j.Trend[] getTrends() -> c
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(java.lang.String) -> a
    twitter4j.Location extractLocation(org.json.JSONObject) -> a
    twitter4j.Trend[] jsonArrayToTrendArray(org.json.JSONArray) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.TwitterResponseImpl -> a.e.a.r:
    twitter4j.RateLimitStatus rateLimitStatus -> a
    int accessLevel -> b
twitter4j.internal.json.URLEntityJSONImpl -> a.e.a.s:
    int start -> a
    int end -> b
    java.net.URL url -> c
    java.net.URL expandedURL -> d
    java.lang.String displayURL -> e
    boolean equals(java.lang.Object) -> equals
    java.lang.String getDisplayURL() -> b
    int getEnd() -> c
    java.net.URL getExpandedURL() -> d
    int getStart() -> e
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
twitter4j.internal.json.UserJSONImpl -> a.e.a.t:
    long id -> a
    java.lang.String name -> b
    java.lang.String screenName -> c
    java.lang.String location -> d
    java.lang.String description -> e
    boolean isContributorsEnabled -> f
    java.lang.String profileImageUrl -> g
    java.lang.String profileImageUrlHttps -> h
    java.lang.String url -> i
    boolean isProtected -> j
    int followersCount -> k
    twitter4j.Status status -> l
    java.lang.String profileBackgroundColor -> m
    java.lang.String profileTextColor -> n
    java.lang.String profileLinkColor -> o
    java.lang.String profileSidebarFillColor -> p
    java.lang.String profileSidebarBorderColor -> q
    boolean profileUseBackgroundImage -> r
    boolean showAllInlineMedia -> s
    int friendsCount -> t
    java.util.Date createdAt -> u
    int favouritesCount -> v
    int utcOffset -> w
    java.lang.String timeZone -> x
    java.lang.String profileBackgroundImageUrl -> y
    java.lang.String profileBackgroundImageUrlHttps -> z
    boolean profileBackgroundTiled -> A
    java.lang.String lang -> B
    int statusesCount -> C
    boolean isGeoEnabled -> D
    boolean isVerified -> E
    boolean translator -> F
    int listedCount -> G
    boolean isFollowRequestSent -> H
    java.lang.String profileBannerImageUrl -> I
    int compareTo(twitter4j.User) -> a
    boolean equals(java.lang.Object) -> equals
    java.util.Date getCreatedAt() -> a
    java.lang.String getDescription() -> b
    int getFavouritesCount() -> c
    int getFollowersCount() -> d
    int getFriendsCount() -> e
    long getId() -> f
    java.lang.String getLocation() -> g
    java.lang.String getName() -> h
    java.lang.String getProfileBannerImageUrl() -> i
    java.net.URL getProfileImageURL() -> j
    java.lang.String getScreenName() -> k
    int getStatusesCount() -> l
    java.net.URL getURL() -> m
    int hashCode() -> hashCode
    boolean isFollowRequestSent() -> n
    boolean isProtected() -> o
    boolean isVerified() -> p
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.PagableResponseList createPagableUserList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
    twitter4j.ResponseList createUserList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> b
    twitter4j.ResponseList createUserList(org.json.JSONArray,twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.UserListJSONImpl -> a.e.a.u:
    int id -> a
    java.lang.String name -> b
    java.lang.String fullName -> c
    java.lang.String slug -> d
    java.lang.String description -> e
    int subscriberCount -> f
    int memberCount -> g
    java.lang.String uri -> h
    boolean mode -> i
    twitter4j.User user -> j
    boolean following -> k
    int compareTo(twitter4j.UserList) -> a
    boolean equals(java.lang.Object) -> equals
    java.lang.String getDescription() -> a
    int getId() -> b
    int getMemberCount() -> c
    java.lang.String getName() -> d
    int getSubscriberCount() -> e
    twitter4j.User getUser() -> f
    int hashCode() -> hashCode
    boolean isFollowing() -> g
    boolean isPublic() -> h
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
    twitter4j.PagableResponseList createPagableUserListList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> a
    twitter4j.ResponseList createUserListList(twitter4j.http.HttpResponse,twitter4j.conf.Configuration) -> b
    int compareTo(java.lang.Object) -> compareTo
twitter4j.internal.json.UserMentionEntityJSONImpl -> a.e.a.v:
    int start -> a
    int end -> b
    java.lang.String name -> c
    java.lang.String screenName -> d
    long id -> e
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    void init(org.json.JSONObject) -> a
twitter4j.internal.json.z_T4JInternalFactory -> a.e.a.w:
    twitter4j.ResponseList createActivityList(twitter4j.http.HttpResponse) -> a
    twitter4j.UserList createAUserList(twitter4j.http.HttpResponse) -> b
    twitter4j.DirectMessage createDirectMessage(twitter4j.http.HttpResponse) -> c
    twitter4j.ResponseList createDirectMessageList(twitter4j.http.HttpResponse) -> d
    twitter4j.IDs createIDs(twitter4j.http.HttpResponse) -> e
    twitter4j.ResponseList createLocationList(twitter4j.http.HttpResponse) -> f
    twitter4j.PagableResponseList createPagableUserList(twitter4j.http.HttpResponse) -> g
    twitter4j.PagableResponseList createPagableUserListList(twitter4j.http.HttpResponse) -> h
    twitter4j.QueryResult createQueryResult(twitter4j.http.HttpResponse,twitter4j.Query) -> a
    twitter4j.Relationship createRelationship(twitter4j.http.HttpResponse) -> i
    twitter4j.ResponseList createSavedSearchList(twitter4j.http.HttpResponse) -> j
    twitter4j.Status createStatus(twitter4j.http.HttpResponse) -> k
    twitter4j.ResponseList createStatusList(twitter4j.http.HttpResponse) -> l
    twitter4j.Trends createTrends(twitter4j.http.HttpResponse) -> m
    twitter4j.User createUser(twitter4j.http.HttpResponse) -> n
    twitter4j.ResponseList createUserList(twitter4j.http.HttpResponse) -> o
    twitter4j.ResponseList createUserListList(twitter4j.http.HttpResponse) -> p
twitter4j.internal.json.z_T4JInternalJSONImplFactory -> a.e.a.x:
    twitter4j.conf.Configuration conf -> a
    twitter4j.ResponseList createActivityList(twitter4j.http.HttpResponse) -> a
    twitter4j.UserList createAUserList(twitter4j.http.HttpResponse) -> b
    twitter4j.DirectMessage createDirectMessage(twitter4j.http.HttpResponse) -> c
    twitter4j.ResponseList createDirectMessageList(twitter4j.http.HttpResponse) -> d
    twitter4j.IDs createIDs(twitter4j.http.HttpResponse) -> e
    twitter4j.ResponseList createLocationList(twitter4j.http.HttpResponse) -> f
    twitter4j.PagableResponseList createPagableUserList(twitter4j.http.HttpResponse) -> g
    twitter4j.PagableResponseList createPagableUserListList(twitter4j.http.HttpResponse) -> h
    twitter4j.QueryResult createQueryResult(twitter4j.http.HttpResponse,twitter4j.Query) -> a
    twitter4j.Relationship createRelationship(twitter4j.http.HttpResponse) -> i
    twitter4j.ResponseList createSavedSearchList(twitter4j.http.HttpResponse) -> j
    twitter4j.Status createStatus(twitter4j.http.HttpResponse) -> k
    twitter4j.ResponseList createStatusList(twitter4j.http.HttpResponse) -> l
    twitter4j.Trends createTrends(twitter4j.http.HttpResponse) -> m
    twitter4j.User createUser(twitter4j.http.HttpResponse) -> n
    twitter4j.ResponseList createUserList(twitter4j.http.HttpResponse) -> o
    twitter4j.ResponseList createUserListList(twitter4j.http.HttpResponse) -> p
    boolean equals(java.lang.Object) -> equals
    int hashCode() -> hashCode
    java.lang.String toString() -> toString
    twitter4j.RateLimitStatus createRateLimitStatusFromResponseHeader(twitter4j.http.HttpResponse) -> q
    twitter4j.GeoLocation[][] coordinatesAsGeoLocationArray(org.json.JSONArray) -> a
    twitter4j.GeoLocation createGeoLocation(org.json.JSONObject) -> a
twitter4j.internal.logging.AndroidLogger -> a.e.b.a:
    void debug(java.lang.String) -> a
    void debug(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.Throwable) -> a
    boolean isDebugEnabled() -> a
    boolean isErrorEnabled() -> b
    boolean isWarnEnabled() -> c
    void warn(java.lang.String) -> b
twitter4j.internal.logging.AndroidLoggerFactory -> a.e.b.b:
    twitter4j.internal.logging.Logger getLogger() -> a
twitter4j.internal.logging.Logger -> a.e.b.c:
    twitter4j.internal.logging.LoggerFactory LOGGER_FACTORY -> a
    void debug(java.lang.String) -> a
    void debug(java.lang.String,java.lang.String) -> a
    void error(java.lang.String,java.lang.Throwable) -> a
    boolean isDebugEnabled() -> a
    void warn(java.lang.String) -> b
    twitter4j.internal.logging.Logger getLogger() -> d
twitter4j.internal.logging.LoggerFactory -> a.e.b.d:
    twitter4j.internal.logging.Logger getLogger() -> a
twitter4j.internal.util.z_T4JInternalParseUtil -> a.e.c.a:
    java.lang.ThreadLocal formatMap -> a
    boolean getBoolean(java.lang.String,org.json.JSONObject) -> a
    java.util.Date getDate(java.lang.String,org.json.JSONObject) -> b
    java.util.Date getDate(java.lang.String,org.json.JSONObject,java.lang.String) -> a
    java.util.Date getDate(java.lang.String,java.lang.String) -> a
    double getDouble(java.lang.String,org.json.JSONObject) -> c
    int getInt(java.lang.String) -> a
    int getInt(java.lang.String,org.json.JSONObject) -> d
    long getLong(java.lang.String) -> b
    long getLong(java.lang.String,org.json.JSONObject) -> e
    java.lang.String getRawString(java.lang.String,org.json.JSONObject) -> f
    java.lang.String getUnescapedString(java.lang.String,org.json.JSONObject) -> g
    java.lang.String getURLDecodedString(java.lang.String,org.json.JSONObject) -> h
    java.util.Date parseTrendsDate(java.lang.String) -> c
    int toAccessLevel(twitter4j.http.HttpResponse) -> a
twitter4j.internal.util.z_T4JInternalParseUtil$1 -> a.e.c.b:
    java.util.Map initialValue() -> a
    java.lang.Object initialValue() -> initialValue
twitter4j.internal.util.z_T4JInternalStringUtil -> a.e.c.c:
    java.lang.String join(long[]) -> a
    java.lang.String maskString(java.lang.String) -> a
    java.lang.String replaceLast(java.lang.String,java.lang.String,java.lang.String) -> a
    java.lang.String[] split(java.lang.String,java.lang.String) -> a
twitter4j.management.APIStatistics -> a.f.a:
    twitter4j.management.InvocationStatisticsCalculator API_STATS_CALCULATOR -> a
    java.util.Map METHOD_STATS_MAP -> b
    int HISTORY_SIZE -> c
    void methodCalled(java.lang.String,long,boolean) -> a
    twitter4j.management.InvocationStatisticsCalculator getMethodStatistics(java.lang.String) -> a
twitter4j.management.InvocationStatisticsCalculator -> a.f.b:
    java.lang.String name -> a
    long[] times -> b
    int index -> c
    long callCount -> d
    long errorCount -> e
    long totalTime -> f
    long getAverageTime() -> a
    long getCallCount() -> b
    long getErrorCount() -> c
    long getTotalTime() -> d
    void increment(long,boolean) -> a
    java.lang.String toString() -> toString
